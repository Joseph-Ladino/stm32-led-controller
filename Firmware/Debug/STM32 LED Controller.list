
STM32 LED Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a988  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  0800aa40  0800aa40  0001aa40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac8c  0800ac8c  00020104  2**0
                  CONTENTS
  4 .ARM          00000000  0800ac8c  0800ac8c  00020104  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ac8c  0800ac8c  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac8c  0800ac8c  0001ac8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac90  0800ac90  0001ac90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0800ac94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c64  20000104  0800ad98  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d68  0800ad98  00021d68  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001be45  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000415b  00000000  00000000  0003bfb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001710  00000000  00000000  00040110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011ed  00000000  00000000  00041820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c751  00000000  00000000  00042a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e373  00000000  00000000  0005f15e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aa111  00000000  00000000  0007d4d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005368  00000000  00000000  001275e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0012c94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000104 	.word	0x20000104
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800aa28 	.word	0x0800aa28

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000108 	.word	0x20000108
 80000fc:	0800aa28 	.word	0x0800aa28

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	; 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f8f0 	bl	80003f8 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__divsi3>:
 8000224:	4603      	mov	r3, r0
 8000226:	430b      	orrs	r3, r1
 8000228:	d47f      	bmi.n	800032a <__divsi3+0x106>
 800022a:	2200      	movs	r2, #0
 800022c:	0843      	lsrs	r3, r0, #1
 800022e:	428b      	cmp	r3, r1
 8000230:	d374      	bcc.n	800031c <__divsi3+0xf8>
 8000232:	0903      	lsrs	r3, r0, #4
 8000234:	428b      	cmp	r3, r1
 8000236:	d35f      	bcc.n	80002f8 <__divsi3+0xd4>
 8000238:	0a03      	lsrs	r3, r0, #8
 800023a:	428b      	cmp	r3, r1
 800023c:	d344      	bcc.n	80002c8 <__divsi3+0xa4>
 800023e:	0b03      	lsrs	r3, r0, #12
 8000240:	428b      	cmp	r3, r1
 8000242:	d328      	bcc.n	8000296 <__divsi3+0x72>
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d30d      	bcc.n	8000266 <__divsi3+0x42>
 800024a:	22ff      	movs	r2, #255	; 0xff
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	ba12      	rev	r2, r2
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d302      	bcc.n	800025c <__divsi3+0x38>
 8000256:	1212      	asrs	r2, r2, #8
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	d065      	beq.n	8000328 <__divsi3+0x104>
 800025c:	0b03      	lsrs	r3, r0, #12
 800025e:	428b      	cmp	r3, r1
 8000260:	d319      	bcc.n	8000296 <__divsi3+0x72>
 8000262:	e000      	b.n	8000266 <__divsi3+0x42>
 8000264:	0a09      	lsrs	r1, r1, #8
 8000266:	0bc3      	lsrs	r3, r0, #15
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x4c>
 800026c:	03cb      	lsls	r3, r1, #15
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b83      	lsrs	r3, r0, #14
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x58>
 8000278:	038b      	lsls	r3, r1, #14
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b43      	lsrs	r3, r0, #13
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x64>
 8000284:	034b      	lsls	r3, r1, #13
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b03      	lsrs	r3, r0, #12
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x70>
 8000290:	030b      	lsls	r3, r1, #12
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0ac3      	lsrs	r3, r0, #11
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x7c>
 800029c:	02cb      	lsls	r3, r1, #11
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a83      	lsrs	r3, r0, #10
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x88>
 80002a8:	028b      	lsls	r3, r1, #10
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a43      	lsrs	r3, r0, #9
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x94>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a03      	lsrs	r3, r0, #8
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0xa0>
 80002c0:	020b      	lsls	r3, r1, #8
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	d2cd      	bcs.n	8000264 <__divsi3+0x40>
 80002c8:	09c3      	lsrs	r3, r0, #7
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xae>
 80002ce:	01cb      	lsls	r3, r1, #7
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0983      	lsrs	r3, r0, #6
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xba>
 80002da:	018b      	lsls	r3, r1, #6
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0943      	lsrs	r3, r0, #5
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xc6>
 80002e6:	014b      	lsls	r3, r1, #5
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0903      	lsrs	r3, r0, #4
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xd2>
 80002f2:	010b      	lsls	r3, r1, #4
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	08c3      	lsrs	r3, r0, #3
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xde>
 80002fe:	00cb      	lsls	r3, r1, #3
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0883      	lsrs	r3, r0, #2
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xea>
 800030a:	008b      	lsls	r3, r1, #2
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0843      	lsrs	r3, r0, #1
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xf6>
 8000316:	004b      	lsls	r3, r1, #1
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	1a41      	subs	r1, r0, r1
 800031e:	d200      	bcs.n	8000322 <__divsi3+0xfe>
 8000320:	4601      	mov	r1, r0
 8000322:	4152      	adcs	r2, r2
 8000324:	4610      	mov	r0, r2
 8000326:	4770      	bx	lr
 8000328:	e05d      	b.n	80003e6 <__divsi3+0x1c2>
 800032a:	0fca      	lsrs	r2, r1, #31
 800032c:	d000      	beq.n	8000330 <__divsi3+0x10c>
 800032e:	4249      	negs	r1, r1
 8000330:	1003      	asrs	r3, r0, #32
 8000332:	d300      	bcc.n	8000336 <__divsi3+0x112>
 8000334:	4240      	negs	r0, r0
 8000336:	4053      	eors	r3, r2
 8000338:	2200      	movs	r2, #0
 800033a:	469c      	mov	ip, r3
 800033c:	0903      	lsrs	r3, r0, #4
 800033e:	428b      	cmp	r3, r1
 8000340:	d32d      	bcc.n	800039e <__divsi3+0x17a>
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d312      	bcc.n	800036e <__divsi3+0x14a>
 8000348:	22fc      	movs	r2, #252	; 0xfc
 800034a:	0189      	lsls	r1, r1, #6
 800034c:	ba12      	rev	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d30c      	bcc.n	800036e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d308      	bcc.n	800036e <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d304      	bcc.n	800036e <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	d03a      	beq.n	80003de <__divsi3+0x1ba>
 8000368:	1192      	asrs	r2, r2, #6
 800036a:	e000      	b.n	800036e <__divsi3+0x14a>
 800036c:	0989      	lsrs	r1, r1, #6
 800036e:	09c3      	lsrs	r3, r0, #7
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x154>
 8000374:	01cb      	lsls	r3, r1, #7
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0983      	lsrs	r3, r0, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x160>
 8000380:	018b      	lsls	r3, r1, #6
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0943      	lsrs	r3, r0, #5
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x16c>
 800038c:	014b      	lsls	r3, r1, #5
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0903      	lsrs	r3, r0, #4
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x178>
 8000398:	010b      	lsls	r3, r1, #4
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	08c3      	lsrs	r3, r0, #3
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x184>
 80003a4:	00cb      	lsls	r3, r1, #3
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0883      	lsrs	r3, r0, #2
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x190>
 80003b0:	008b      	lsls	r3, r1, #2
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	d2d9      	bcs.n	800036c <__divsi3+0x148>
 80003b8:	0843      	lsrs	r3, r0, #1
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__divsi3+0x19e>
 80003be:	004b      	lsls	r3, r1, #1
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	1a41      	subs	r1, r0, r1
 80003c6:	d200      	bcs.n	80003ca <__divsi3+0x1a6>
 80003c8:	4601      	mov	r1, r0
 80003ca:	4663      	mov	r3, ip
 80003cc:	4152      	adcs	r2, r2
 80003ce:	105b      	asrs	r3, r3, #1
 80003d0:	4610      	mov	r0, r2
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x1b4>
 80003d4:	4240      	negs	r0, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d500      	bpl.n	80003dc <__divsi3+0x1b8>
 80003da:	4249      	negs	r1, r1
 80003dc:	4770      	bx	lr
 80003de:	4663      	mov	r3, ip
 80003e0:	105b      	asrs	r3, r3, #1
 80003e2:	d300      	bcc.n	80003e6 <__divsi3+0x1c2>
 80003e4:	4240      	negs	r0, r0
 80003e6:	b501      	push	{r0, lr}
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 f805 	bl	80003f8 <__aeabi_idiv0>
 80003ee:	bd02      	pop	{r1, pc}

080003f0 <__aeabi_idivmod>:
 80003f0:	2900      	cmp	r1, #0
 80003f2:	d0f8      	beq.n	80003e6 <__divsi3+0x1c2>
 80003f4:	e716      	b.n	8000224 <__divsi3>
 80003f6:	4770      	bx	lr

080003f8 <__aeabi_idiv0>:
 80003f8:	4770      	bx	lr
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003fc:	b5b0      	push	{r4, r5, r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000400:	f000 fcdc 	bl	8000dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000404:	f000 f82e 	bl	8000464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000408:	f000 fa00 	bl	800080c <MX_GPIO_Init>
  MX_DMA_Init();
 800040c:	f000 f9d8 	bl	80007c0 <MX_DMA_Init>
  MX_TIM1_Init();
 8000410:	f000 f8be 	bl	8000590 <MX_TIM1_Init>
  MX_SPI1_Init();
 8000414:	f000 f87e 	bl	8000514 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000418:	f000 f984 	bl	8000724 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 800041c:	f009 fd36 	bl	8009e8c <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  // enable W5500 ethernet controller
  HAL_GPIO_WritePin(ETH_RSTn_GPIO_Port, ETH_RSTn_Pin, GPIO_PIN_RESET);
 8000420:	23a0      	movs	r3, #160	; 0xa0
 8000422:	05db      	lsls	r3, r3, #23
 8000424:	2200      	movs	r2, #0
 8000426:	2120      	movs	r1, #32
 8000428:	0018      	movs	r0, r3
 800042a:	f001 f9af 	bl	800178c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  HAL_GPIO_TogglePin(TEST_LED_GPIO_Port, TEST_LED_Pin);\
 800042e:	4b0b      	ldr	r3, [pc, #44]	; (800045c <main+0x60>)
 8000430:	2102      	movs	r1, #2
 8000432:	0018      	movs	r0, r3
 8000434:	f001 f9c7 	bl	80017c6 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000438:	23fa      	movs	r3, #250	; 0xfa
 800043a:	005b      	lsls	r3, r3, #1
 800043c:	0018      	movs	r0, r3
 800043e:	f000 fd43 	bl	8000ec8 <HAL_Delay>
	  CDC_Transmit_FS(data, strlen(data));
 8000442:	4b07      	ldr	r3, [pc, #28]	; (8000460 <main+0x64>)
 8000444:	681c      	ldr	r4, [r3, #0]
 8000446:	4b06      	ldr	r3, [pc, #24]	; (8000460 <main+0x64>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	0018      	movs	r0, r3
 800044c:	f7ff fe58 	bl	8000100 <strlen>
 8000450:	0003      	movs	r3, r0
 8000452:	0019      	movs	r1, r3
 8000454:	0020      	movs	r0, r4
 8000456:	f009 fd9d 	bl	8009f94 <CDC_Transmit_FS>
  while (1) {
 800045a:	e7e8      	b.n	800042e <main+0x32>
 800045c:	50000400 	.word	0x50000400
 8000460:	20000000 	.word	0x20000000

08000464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000464:	b590      	push	{r4, r7, lr}
 8000466:	b093      	sub	sp, #76	; 0x4c
 8000468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046a:	2410      	movs	r4, #16
 800046c:	193b      	adds	r3, r7, r4
 800046e:	0018      	movs	r0, r3
 8000470:	2338      	movs	r3, #56	; 0x38
 8000472:	001a      	movs	r2, r3
 8000474:	2100      	movs	r1, #0
 8000476:	f00a faab 	bl	800a9d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047a:	003b      	movs	r3, r7
 800047c:	0018      	movs	r0, r3
 800047e:	2310      	movs	r3, #16
 8000480:	001a      	movs	r2, r3
 8000482:	2100      	movs	r1, #0
 8000484:	f00a faa4 	bl	800a9d0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	009b      	lsls	r3, r3, #2
 800048c:	0018      	movs	r0, r3
 800048e:	f002 ff69 	bl	8003364 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000492:	193b      	adds	r3, r7, r4
 8000494:	2201      	movs	r2, #1
 8000496:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000498:	193b      	adds	r3, r7, r4
 800049a:	2280      	movs	r2, #128	; 0x80
 800049c:	0252      	lsls	r2, r2, #9
 800049e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004a0:	0021      	movs	r1, r4
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	2202      	movs	r2, #2
 80004a6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	2203      	movs	r2, #3
 80004ac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	2220      	movs	r2, #32
 80004b2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2208      	movs	r2, #8
 80004b8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2280      	movs	r2, #128	; 0x80
 80004be:	0292      	lsls	r2, r2, #10
 80004c0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	2280      	movs	r2, #128	; 0x80
 80004c6:	0492      	lsls	r2, r2, #18
 80004c8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2280      	movs	r2, #128	; 0x80
 80004ce:	0592      	lsls	r2, r2, #22
 80004d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	0018      	movs	r0, r3
 80004d6:	f002 ff91 	bl	80033fc <HAL_RCC_OscConfig>
 80004da:	1e03      	subs	r3, r0, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80004de:	f000 fa2f 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e2:	003b      	movs	r3, r7
 80004e4:	2207      	movs	r2, #7
 80004e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e8:	003b      	movs	r3, r7
 80004ea:	2202      	movs	r2, #2
 80004ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ee:	003b      	movs	r3, r7
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f4:	003b      	movs	r3, r7
 80004f6:	2200      	movs	r2, #0
 80004f8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004fa:	003b      	movs	r3, r7
 80004fc:	2102      	movs	r1, #2
 80004fe:	0018      	movs	r0, r3
 8000500:	f003 fa96 	bl	8003a30 <HAL_RCC_ClockConfig>
 8000504:	1e03      	subs	r3, r0, #0
 8000506:	d001      	beq.n	800050c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000508:	f000 fa1a 	bl	8000940 <Error_Handler>
  }
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b013      	add	sp, #76	; 0x4c
 8000512:	bd90      	pop	{r4, r7, pc}

08000514 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000518:	4b1b      	ldr	r3, [pc, #108]	; (8000588 <MX_SPI1_Init+0x74>)
 800051a:	4a1c      	ldr	r2, [pc, #112]	; (800058c <MX_SPI1_Init+0x78>)
 800051c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800051e:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <MX_SPI1_Init+0x74>)
 8000520:	2282      	movs	r2, #130	; 0x82
 8000522:	0052      	lsls	r2, r2, #1
 8000524:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000526:	4b18      	ldr	r3, [pc, #96]	; (8000588 <MX_SPI1_Init+0x74>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800052c:	4b16      	ldr	r3, [pc, #88]	; (8000588 <MX_SPI1_Init+0x74>)
 800052e:	22e0      	movs	r2, #224	; 0xe0
 8000530:	00d2      	lsls	r2, r2, #3
 8000532:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <MX_SPI1_Init+0x74>)
 8000536:	2200      	movs	r2, #0
 8000538:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800053a:	4b13      	ldr	r3, [pc, #76]	; (8000588 <MX_SPI1_Init+0x74>)
 800053c:	2200      	movs	r2, #0
 800053e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000540:	4b11      	ldr	r3, [pc, #68]	; (8000588 <MX_SPI1_Init+0x74>)
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	0092      	lsls	r2, r2, #2
 8000546:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000548:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <MX_SPI1_Init+0x74>)
 800054a:	2200      	movs	r2, #0
 800054c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <MX_SPI1_Init+0x74>)
 8000550:	2200      	movs	r2, #0
 8000552:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000554:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <MX_SPI1_Init+0x74>)
 8000556:	2200      	movs	r2, #0
 8000558:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800055a:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <MX_SPI1_Init+0x74>)
 800055c:	2200      	movs	r2, #0
 800055e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000560:	4b09      	ldr	r3, [pc, #36]	; (8000588 <MX_SPI1_Init+0x74>)
 8000562:	2207      	movs	r2, #7
 8000564:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <MX_SPI1_Init+0x74>)
 8000568:	2200      	movs	r2, #0
 800056a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <MX_SPI1_Init+0x74>)
 800056e:	2208      	movs	r2, #8
 8000570:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000572:	4b05      	ldr	r3, [pc, #20]	; (8000588 <MX_SPI1_Init+0x74>)
 8000574:	0018      	movs	r0, r3
 8000576:	f003 fd8d 	bl	8004094 <HAL_SPI_Init>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800057e:	f000 f9df 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000120 	.word	0x20000120
 800058c:	40013000 	.word	0x40013000

08000590 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b09c      	sub	sp, #112	; 0x70
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000596:	2360      	movs	r3, #96	; 0x60
 8000598:	18fb      	adds	r3, r7, r3
 800059a:	0018      	movs	r0, r3
 800059c:	2310      	movs	r3, #16
 800059e:	001a      	movs	r2, r3
 80005a0:	2100      	movs	r1, #0
 80005a2:	f00a fa15 	bl	800a9d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a6:	2354      	movs	r3, #84	; 0x54
 80005a8:	18fb      	adds	r3, r7, r3
 80005aa:	0018      	movs	r0, r3
 80005ac:	230c      	movs	r3, #12
 80005ae:	001a      	movs	r2, r3
 80005b0:	2100      	movs	r1, #0
 80005b2:	f00a fa0d 	bl	800a9d0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005b6:	2338      	movs	r3, #56	; 0x38
 80005b8:	18fb      	adds	r3, r7, r3
 80005ba:	0018      	movs	r0, r3
 80005bc:	231c      	movs	r3, #28
 80005be:	001a      	movs	r2, r3
 80005c0:	2100      	movs	r1, #0
 80005c2:	f00a fa05 	bl	800a9d0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	0018      	movs	r0, r3
 80005ca:	2334      	movs	r3, #52	; 0x34
 80005cc:	001a      	movs	r2, r3
 80005ce:	2100      	movs	r1, #0
 80005d0:	f00a f9fe 	bl	800a9d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005d4:	4b51      	ldr	r3, [pc, #324]	; (800071c <MX_TIM1_Init+0x18c>)
 80005d6:	4a52      	ldr	r2, [pc, #328]	; (8000720 <MX_TIM1_Init+0x190>)
 80005d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005da:	4b50      	ldr	r3, [pc, #320]	; (800071c <MX_TIM1_Init+0x18c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e0:	4b4e      	ldr	r3, [pc, #312]	; (800071c <MX_TIM1_Init+0x18c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 80-1;
 80005e6:	4b4d      	ldr	r3, [pc, #308]	; (800071c <MX_TIM1_Init+0x18c>)
 80005e8:	224f      	movs	r2, #79	; 0x4f
 80005ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ec:	4b4b      	ldr	r3, [pc, #300]	; (800071c <MX_TIM1_Init+0x18c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005f2:	4b4a      	ldr	r3, [pc, #296]	; (800071c <MX_TIM1_Init+0x18c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f8:	4b48      	ldr	r3, [pc, #288]	; (800071c <MX_TIM1_Init+0x18c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005fe:	4b47      	ldr	r3, [pc, #284]	; (800071c <MX_TIM1_Init+0x18c>)
 8000600:	0018      	movs	r0, r3
 8000602:	f003 fdff 	bl	8004204 <HAL_TIM_Base_Init>
 8000606:	1e03      	subs	r3, r0, #0
 8000608:	d001      	beq.n	800060e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800060a:	f000 f999 	bl	8000940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800060e:	2160      	movs	r1, #96	; 0x60
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2280      	movs	r2, #128	; 0x80
 8000614:	0152      	lsls	r2, r2, #5
 8000616:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000618:	187a      	adds	r2, r7, r1
 800061a:	4b40      	ldr	r3, [pc, #256]	; (800071c <MX_TIM1_Init+0x18c>)
 800061c:	0011      	movs	r1, r2
 800061e:	0018      	movs	r0, r3
 8000620:	f003 ffa8 	bl	8004574 <HAL_TIM_ConfigClockSource>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d001      	beq.n	800062c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000628:	f000 f98a 	bl	8000940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800062c:	4b3b      	ldr	r3, [pc, #236]	; (800071c <MX_TIM1_Init+0x18c>)
 800062e:	0018      	movs	r0, r3
 8000630:	f003 fe40 	bl	80042b4 <HAL_TIM_PWM_Init>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000638:	f000 f982 	bl	8000940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800063c:	2154      	movs	r1, #84	; 0x54
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2200      	movs	r2, #0
 8000648:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000650:	187a      	adds	r2, r7, r1
 8000652:	4b32      	ldr	r3, [pc, #200]	; (800071c <MX_TIM1_Init+0x18c>)
 8000654:	0011      	movs	r1, r2
 8000656:	0018      	movs	r0, r3
 8000658:	f004 fc50 	bl	8004efc <HAL_TIMEx_MasterConfigSynchronization>
 800065c:	1e03      	subs	r3, r0, #0
 800065e:	d001      	beq.n	8000664 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000660:	f000 f96e 	bl	8000940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000664:	2138      	movs	r1, #56	; 0x38
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2260      	movs	r2, #96	; 0x60
 800066a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2200      	movs	r2, #0
 8000670:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2200      	movs	r2, #0
 8000688:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000690:	1879      	adds	r1, r7, r1
 8000692:	4b22      	ldr	r3, [pc, #136]	; (800071c <MX_TIM1_Init+0x18c>)
 8000694:	2200      	movs	r2, #0
 8000696:	0018      	movs	r0, r3
 8000698:	f003 fe6c 	bl	8004374 <HAL_TIM_PWM_ConfigChannel>
 800069c:	1e03      	subs	r3, r0, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80006a0:	f000 f94e 	bl	8000940 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2200      	movs	r2, #0
 80006ae:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2280      	movs	r2, #128	; 0x80
 80006c6:	0192      	lsls	r2, r2, #6
 80006c8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2280      	movs	r2, #128	; 0x80
 80006e0:	0492      	lsls	r2, r2, #18
 80006e2:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2200      	movs	r2, #0
 80006e8:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2200      	movs	r2, #0
 80006ee:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2200      	movs	r2, #0
 80006f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006f6:	1d3a      	adds	r2, r7, #4
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_TIM1_Init+0x18c>)
 80006fa:	0011      	movs	r1, r2
 80006fc:	0018      	movs	r0, r3
 80006fe:	f004 fc6d 	bl	8004fdc <HAL_TIMEx_ConfigBreakDeadTime>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d001      	beq.n	800070a <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000706:	f000 f91b 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800070a:	4b04      	ldr	r3, [pc, #16]	; (800071c <MX_TIM1_Init+0x18c>)
 800070c:	0018      	movs	r0, r3
 800070e:	f000 fa3b 	bl	8000b88 <HAL_TIM_MspPostInit>

}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b01c      	add	sp, #112	; 0x70
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	20000244 	.word	0x20000244
 8000720:	40012c00 	.word	0x40012c00

08000724 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000728:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 800072a:	4a24      	ldr	r2, [pc, #144]	; (80007bc <MX_USART1_UART_Init+0x98>)
 800072c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800072e:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 8000730:	22e1      	movs	r2, #225	; 0xe1
 8000732:	0252      	lsls	r2, r2, #9
 8000734:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000742:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 8000768:	2200      	movs	r2, #0
 800076a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 800076e:	0018      	movs	r0, r3
 8000770:	f004 fcd0 	bl	8005114 <HAL_UART_Init>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d001      	beq.n	800077c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000778:	f000 f8e2 	bl	8000940 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 800077e:	2100      	movs	r1, #0
 8000780:	0018      	movs	r0, r3
 8000782:	f005 f96d 	bl	8005a60 <HAL_UARTEx_SetTxFifoThreshold>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800078a:	f000 f8d9 	bl	8000940 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 8000790:	2100      	movs	r1, #0
 8000792:	0018      	movs	r0, r3
 8000794:	f005 f9a4 	bl	8005ae0 <HAL_UARTEx_SetRxFifoThreshold>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d001      	beq.n	80007a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800079c:	f000 f8d0 	bl	8000940 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 80007a2:	0018      	movs	r0, r3
 80007a4:	f005 f922 	bl	80059ec <HAL_UARTEx_DisableFifoMode>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80007ac:	f000 f8c8 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007b0:	46c0      	nop			; (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	200002f0 	.word	0x200002f0
 80007bc:	40013800 	.word	0x40013800

080007c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_DMA_Init+0x48>)
 80007c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_DMA_Init+0x48>)
 80007cc:	2101      	movs	r1, #1
 80007ce:	430a      	orrs	r2, r1
 80007d0:	639a      	str	r2, [r3, #56]	; 0x38
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <MX_DMA_Init+0x48>)
 80007d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007d6:	2201      	movs	r2, #1
 80007d8:	4013      	ands	r3, r2
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	2009      	movs	r0, #9
 80007e4:	f000 fc56 	bl	8001094 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007e8:	2009      	movs	r0, #9
 80007ea:	f000 fc68 	bl	80010be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	200a      	movs	r0, #10
 80007f4:	f000 fc4e 	bl	8001094 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80007f8:	200a      	movs	r0, #10
 80007fa:	f000 fc60 	bl	80010be <HAL_NVIC_EnableIRQ>

}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b002      	add	sp, #8
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	40021000 	.word	0x40021000

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b089      	sub	sp, #36	; 0x24
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	240c      	movs	r4, #12
 8000814:	193b      	adds	r3, r7, r4
 8000816:	0018      	movs	r0, r3
 8000818:	2314      	movs	r3, #20
 800081a:	001a      	movs	r2, r3
 800081c:	2100      	movs	r1, #0
 800081e:	f00a f8d7 	bl	800a9d0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000822:	4b44      	ldr	r3, [pc, #272]	; (8000934 <MX_GPIO_Init+0x128>)
 8000824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000826:	4b43      	ldr	r3, [pc, #268]	; (8000934 <MX_GPIO_Init+0x128>)
 8000828:	2120      	movs	r1, #32
 800082a:	430a      	orrs	r2, r1
 800082c:	635a      	str	r2, [r3, #52]	; 0x34
 800082e:	4b41      	ldr	r3, [pc, #260]	; (8000934 <MX_GPIO_Init+0x128>)
 8000830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000832:	2220      	movs	r2, #32
 8000834:	4013      	ands	r3, r2
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b3e      	ldr	r3, [pc, #248]	; (8000934 <MX_GPIO_Init+0x128>)
 800083c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800083e:	4b3d      	ldr	r3, [pc, #244]	; (8000934 <MX_GPIO_Init+0x128>)
 8000840:	2101      	movs	r1, #1
 8000842:	430a      	orrs	r2, r1
 8000844:	635a      	str	r2, [r3, #52]	; 0x34
 8000846:	4b3b      	ldr	r3, [pc, #236]	; (8000934 <MX_GPIO_Init+0x128>)
 8000848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800084a:	2201      	movs	r2, #1
 800084c:	4013      	ands	r3, r2
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b38      	ldr	r3, [pc, #224]	; (8000934 <MX_GPIO_Init+0x128>)
 8000854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000856:	4b37      	ldr	r3, [pc, #220]	; (8000934 <MX_GPIO_Init+0x128>)
 8000858:	2102      	movs	r1, #2
 800085a:	430a      	orrs	r2, r1
 800085c:	635a      	str	r2, [r3, #52]	; 0x34
 800085e:	4b35      	ldr	r3, [pc, #212]	; (8000934 <MX_GPIO_Init+0x128>)
 8000860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000862:	2202      	movs	r2, #2
 8000864:	4013      	ands	r3, r2
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ETH_SCSn_Pin|ETH_RSTn_Pin|LED_PWR_EN_Pin, GPIO_PIN_RESET);
 800086a:	238c      	movs	r3, #140	; 0x8c
 800086c:	0099      	lsls	r1, r3, #2
 800086e:	23a0      	movs	r3, #160	; 0xa0
 8000870:	05db      	lsls	r3, r3, #23
 8000872:	2200      	movs	r2, #0
 8000874:	0018      	movs	r0, r3
 8000876:	f000 ff89 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEST_LED_Pin|ESP_IO2_Pin|ESP_IO0_Pin|ESP_EN_Pin
 800087a:	492f      	ldr	r1, [pc, #188]	; (8000938 <MX_GPIO_Init+0x12c>)
 800087c:	4b2f      	ldr	r3, [pc, #188]	; (800093c <MX_GPIO_Init+0x130>)
 800087e:	2200      	movs	r2, #0
 8000880:	0018      	movs	r0, r3
 8000882:	f000 ff83 	bl	800178c <HAL_GPIO_WritePin>
                          |ESP_RSTn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ETH_INTn_Pin */
  GPIO_InitStruct.Pin = ETH_INTn_Pin;
 8000886:	193b      	adds	r3, r7, r4
 8000888:	2208      	movs	r2, #8
 800088a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800088c:	193b      	adds	r3, r7, r4
 800088e:	2284      	movs	r2, #132	; 0x84
 8000890:	0392      	lsls	r2, r2, #14
 8000892:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ETH_INTn_GPIO_Port, &GPIO_InitStruct);
 800089a:	193a      	adds	r2, r7, r4
 800089c:	23a0      	movs	r3, #160	; 0xa0
 800089e:	05db      	lsls	r3, r3, #23
 80008a0:	0011      	movs	r1, r2
 80008a2:	0018      	movs	r0, r3
 80008a4:	f000 fe06 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ETH_SCSn_Pin ETH_RSTn_Pin LED_PWR_EN_Pin */
  GPIO_InitStruct.Pin = ETH_SCSn_Pin|ETH_RSTn_Pin|LED_PWR_EN_Pin;
 80008a8:	0021      	movs	r1, r4
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	228c      	movs	r2, #140	; 0x8c
 80008ae:	0092      	lsls	r2, r2, #2
 80008b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	000c      	movs	r4, r1
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	2201      	movs	r2, #1
 80008b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	193a      	adds	r2, r7, r4
 80008c8:	23a0      	movs	r3, #160	; 0xa0
 80008ca:	05db      	lsls	r3, r3, #23
 80008cc:	0011      	movs	r1, r2
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 fdf0 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEST_LED_Pin ESP_IO2_Pin ESP_IO0_Pin ESP_EN_Pin
                           ESP_RSTn_Pin */
  GPIO_InitStruct.Pin = TEST_LED_Pin|ESP_IO2_Pin|ESP_IO0_Pin|ESP_EN_Pin
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	4a18      	ldr	r2, [pc, #96]	; (8000938 <MX_GPIO_Init+0x12c>)
 80008d8:	601a      	str	r2, [r3, #0]
                          |ESP_RSTn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	2201      	movs	r2, #1
 80008de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	4a13      	ldr	r2, [pc, #76]	; (800093c <MX_GPIO_Init+0x130>)
 80008f0:	0019      	movs	r1, r3
 80008f2:	0010      	movs	r0, r2
 80008f4:	f000 fdde 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_PWR_OK_Pin */
  GPIO_InitStruct.Pin = LED_PWR_OK_Pin;
 80008f8:	0021      	movs	r1, r4
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2280      	movs	r2, #128	; 0x80
 80008fe:	0212      	lsls	r2, r2, #8
 8000900:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LED_PWR_OK_GPIO_Port, &GPIO_InitStruct);
 800090e:	187b      	adds	r3, r7, r1
 8000910:	4a0a      	ldr	r2, [pc, #40]	; (800093c <MX_GPIO_Init+0x130>)
 8000912:	0019      	movs	r1, r3
 8000914:	0010      	movs	r0, r2
 8000916:	f000 fdcd 	bl	80014b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	2006      	movs	r0, #6
 8000920:	f000 fbb8 	bl	8001094 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000924:	2006      	movs	r0, #6
 8000926:	f000 fbca 	bl	80010be <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	b009      	add	sp, #36	; 0x24
 8000930:	bd90      	pop	{r4, r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	40021000 	.word	0x40021000
 8000938:	00000332 	.word	0x00000332
 800093c:	50000400 	.word	0x50000400

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	e7fe      	b.n	8000948 <Error_Handler+0x8>
	...

0800094c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <HAL_MspInit+0x4c>)
 8000954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <HAL_MspInit+0x4c>)
 8000958:	2101      	movs	r1, #1
 800095a:	430a      	orrs	r2, r1
 800095c:	641a      	str	r2, [r3, #64]	; 0x40
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	2201      	movs	r2, #1
 8000964:	4013      	ands	r3, r2
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <HAL_MspInit+0x4c>)
 800096c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <HAL_MspInit+0x4c>)
 8000970:	2180      	movs	r1, #128	; 0x80
 8000972:	0549      	lsls	r1, r1, #21
 8000974:	430a      	orrs	r2, r1
 8000976:	63da      	str	r2, [r3, #60]	; 0x3c
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <HAL_MspInit+0x4c>)
 800097a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	055b      	lsls	r3, r3, #21
 8000980:	4013      	ands	r3, r2
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000986:	23c0      	movs	r3, #192	; 0xc0
 8000988:	00db      	lsls	r3, r3, #3
 800098a:	0018      	movs	r0, r3
 800098c:	f000 fac0 	bl	8000f10 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000990:	46c0      	nop			; (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	b002      	add	sp, #8
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40021000 	.word	0x40021000

0800099c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b08b      	sub	sp, #44	; 0x2c
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	2414      	movs	r4, #20
 80009a6:	193b      	adds	r3, r7, r4
 80009a8:	0018      	movs	r0, r3
 80009aa:	2314      	movs	r3, #20
 80009ac:	001a      	movs	r2, r3
 80009ae:	2100      	movs	r1, #0
 80009b0:	f00a f80e 	bl	800a9d0 <memset>
  if(hspi->Instance==SPI1)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a46      	ldr	r2, [pc, #280]	; (8000ad4 <HAL_SPI_MspInit+0x138>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d000      	beq.n	80009c0 <HAL_SPI_MspInit+0x24>
 80009be:	e084      	b.n	8000aca <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009c0:	4b45      	ldr	r3, [pc, #276]	; (8000ad8 <HAL_SPI_MspInit+0x13c>)
 80009c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009c4:	4b44      	ldr	r3, [pc, #272]	; (8000ad8 <HAL_SPI_MspInit+0x13c>)
 80009c6:	2180      	movs	r1, #128	; 0x80
 80009c8:	0149      	lsls	r1, r1, #5
 80009ca:	430a      	orrs	r2, r1
 80009cc:	641a      	str	r2, [r3, #64]	; 0x40
 80009ce:	4b42      	ldr	r3, [pc, #264]	; (8000ad8 <HAL_SPI_MspInit+0x13c>)
 80009d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009d2:	2380      	movs	r3, #128	; 0x80
 80009d4:	015b      	lsls	r3, r3, #5
 80009d6:	4013      	ands	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	4b3e      	ldr	r3, [pc, #248]	; (8000ad8 <HAL_SPI_MspInit+0x13c>)
 80009de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009e0:	4b3d      	ldr	r3, [pc, #244]	; (8000ad8 <HAL_SPI_MspInit+0x13c>)
 80009e2:	2101      	movs	r1, #1
 80009e4:	430a      	orrs	r2, r1
 80009e6:	635a      	str	r2, [r3, #52]	; 0x34
 80009e8:	4b3b      	ldr	r3, [pc, #236]	; (8000ad8 <HAL_SPI_MspInit+0x13c>)
 80009ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ec:	2201      	movs	r2, #1
 80009ee:	4013      	ands	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 80009f4:	0021      	movs	r1, r4
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2246      	movs	r2, #70	; 0x46
 80009fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2202      	movs	r2, #2
 8000a00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	187a      	adds	r2, r7, r1
 8000a16:	23a0      	movs	r3, #160	; 0xa0
 8000a18:	05db      	lsls	r3, r3, #23
 8000a1a:	0011      	movs	r1, r2
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f000 fd49 	bl	80014b4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000a22:	4b2e      	ldr	r3, [pc, #184]	; (8000adc <HAL_SPI_MspInit+0x140>)
 8000a24:	4a2e      	ldr	r2, [pc, #184]	; (8000ae0 <HAL_SPI_MspInit+0x144>)
 8000a26:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000a28:	4b2c      	ldr	r3, [pc, #176]	; (8000adc <HAL_SPI_MspInit+0x140>)
 8000a2a:	2210      	movs	r2, #16
 8000a2c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <HAL_SPI_MspInit+0x140>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a34:	4b29      	ldr	r3, [pc, #164]	; (8000adc <HAL_SPI_MspInit+0x140>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a3a:	4b28      	ldr	r3, [pc, #160]	; (8000adc <HAL_SPI_MspInit+0x140>)
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a40:	4b26      	ldr	r3, [pc, #152]	; (8000adc <HAL_SPI_MspInit+0x140>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a46:	4b25      	ldr	r3, [pc, #148]	; (8000adc <HAL_SPI_MspInit+0x140>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000a4c:	4b23      	ldr	r3, [pc, #140]	; (8000adc <HAL_SPI_MspInit+0x140>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a52:	4b22      	ldr	r3, [pc, #136]	; (8000adc <HAL_SPI_MspInit+0x140>)
 8000a54:	2280      	movs	r2, #128	; 0x80
 8000a56:	0192      	lsls	r2, r2, #6
 8000a58:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000a5a:	4b20      	ldr	r3, [pc, #128]	; (8000adc <HAL_SPI_MspInit+0x140>)
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 fb4b 	bl	80010f8 <HAL_DMA_Init>
 8000a62:	1e03      	subs	r3, r0, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8000a66:	f7ff ff6b 	bl	8000940 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a1b      	ldr	r2, [pc, #108]	; (8000adc <HAL_SPI_MspInit+0x140>)
 8000a6e:	659a      	str	r2, [r3, #88]	; 0x58
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <HAL_SPI_MspInit+0x140>)
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000a76:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <HAL_SPI_MspInit+0x148>)
 8000a78:	4a1b      	ldr	r2, [pc, #108]	; (8000ae8 <HAL_SPI_MspInit+0x14c>)
 8000a7a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000a7c:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <HAL_SPI_MspInit+0x148>)
 8000a7e:	2211      	movs	r2, #17
 8000a80:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <HAL_SPI_MspInit+0x148>)
 8000a84:	2210      	movs	r2, #16
 8000a86:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a88:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <HAL_SPI_MspInit+0x148>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_SPI_MspInit+0x148>)
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <HAL_SPI_MspInit+0x148>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_SPI_MspInit+0x148>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <HAL_SPI_MspInit+0x148>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <HAL_SPI_MspInit+0x148>)
 8000aa8:	2280      	movs	r2, #128	; 0x80
 8000aaa:	0192      	lsls	r2, r2, #6
 8000aac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <HAL_SPI_MspInit+0x148>)
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f000 fb21 	bl	80010f8 <HAL_DMA_Init>
 8000ab6:	1e03      	subs	r3, r0, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_SPI_MspInit+0x122>
    {
      Error_Handler();
 8000aba:	f7ff ff41 	bl	8000940 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <HAL_SPI_MspInit+0x148>)
 8000ac2:	655a      	str	r2, [r3, #84]	; 0x54
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <HAL_SPI_MspInit+0x148>)
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b00b      	add	sp, #44	; 0x2c
 8000ad0:	bd90      	pop	{r4, r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	40013000 	.word	0x40013000
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	20000184 	.word	0x20000184
 8000ae0:	4002001c 	.word	0x4002001c
 8000ae4:	200001e4 	.word	0x200001e4
 8000ae8:	40020030 	.word	0x40020030

08000aec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a1f      	ldr	r2, [pc, #124]	; (8000b78 <HAL_TIM_Base_MspInit+0x8c>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d138      	bne.n	8000b70 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <HAL_TIM_Base_MspInit+0x90>)
 8000b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b02:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <HAL_TIM_Base_MspInit+0x90>)
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	0109      	lsls	r1, r1, #4
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	641a      	str	r2, [r3, #64]	; 0x40
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <HAL_TIM_Base_MspInit+0x90>)
 8000b0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	011b      	lsls	r3, r3, #4
 8000b14:	4013      	ands	r3, r2
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <HAL_TIM_Base_MspInit+0x94>)
 8000b1c:	4a19      	ldr	r2, [pc, #100]	; (8000b84 <HAL_TIM_Base_MspInit+0x98>)
 8000b1e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <HAL_TIM_Base_MspInit+0x94>)
 8000b22:	2214      	movs	r2, #20
 8000b24:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <HAL_TIM_Base_MspInit+0x94>)
 8000b28:	2210      	movs	r2, #16
 8000b2a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <HAL_TIM_Base_MspInit+0x94>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b32:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <HAL_TIM_Base_MspInit+0x94>)
 8000b34:	2280      	movs	r2, #128	; 0x80
 8000b36:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <HAL_TIM_Base_MspInit+0x94>)
 8000b3a:	2280      	movs	r2, #128	; 0x80
 8000b3c:	0052      	lsls	r2, r2, #1
 8000b3e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <HAL_TIM_Base_MspInit+0x94>)
 8000b42:	2280      	movs	r2, #128	; 0x80
 8000b44:	00d2      	lsls	r2, r2, #3
 8000b46:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <HAL_TIM_Base_MspInit+0x94>)
 8000b4a:	2220      	movs	r2, #32
 8000b4c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <HAL_TIM_Base_MspInit+0x94>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <HAL_TIM_Base_MspInit+0x94>)
 8000b56:	0018      	movs	r0, r3
 8000b58:	f000 face 	bl	80010f8 <HAL_DMA_Init>
 8000b5c:	1e03      	subs	r3, r0, #0
 8000b5e:	d001      	beq.n	8000b64 <HAL_TIM_Base_MspInit+0x78>
    {
      Error_Handler();
 8000b60:	f7ff feee 	bl	8000940 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <HAL_TIM_Base_MspInit+0x94>)
 8000b68:	625a      	str	r2, [r3, #36]	; 0x24
 8000b6a:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <HAL_TIM_Base_MspInit+0x94>)
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b004      	add	sp, #16
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40012c00 	.word	0x40012c00
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	20000290 	.word	0x20000290
 8000b84:	40020008 	.word	0x40020008

08000b88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b88:	b590      	push	{r4, r7, lr}
 8000b8a:	b089      	sub	sp, #36	; 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	240c      	movs	r4, #12
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	0018      	movs	r0, r3
 8000b96:	2314      	movs	r3, #20
 8000b98:	001a      	movs	r2, r3
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	f009 ff18 	bl	800a9d0 <memset>
  if(htim->Instance==TIM1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a15      	ldr	r2, [pc, #84]	; (8000bfc <HAL_TIM_MspPostInit+0x74>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d123      	bne.n	8000bf2 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <HAL_TIM_MspPostInit+0x78>)
 8000bac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <HAL_TIM_MspPostInit+0x78>)
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	635a      	str	r2, [r3, #52]	; 0x34
 8000bb6:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <HAL_TIM_MspPostInit+0x78>)
 8000bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bba:	2201      	movs	r2, #1
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = LED_DATA_Pin;
 8000bc2:	193b      	adds	r3, r7, r4
 8000bc4:	2280      	movs	r2, #128	; 0x80
 8000bc6:	0052      	lsls	r2, r2, #1
 8000bc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	0021      	movs	r1, r4
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2202      	movs	r2, #2
 8000bd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	2203      	movs	r2, #3
 8000bdc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	2202      	movs	r2, #2
 8000be2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LED_DATA_GPIO_Port, &GPIO_InitStruct);
 8000be4:	187a      	adds	r2, r7, r1
 8000be6:	23a0      	movs	r3, #160	; 0xa0
 8000be8:	05db      	lsls	r3, r3, #23
 8000bea:	0011      	movs	r1, r2
 8000bec:	0018      	movs	r0, r3
 8000bee:	f000 fc61 	bl	80014b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b009      	add	sp, #36	; 0x24
 8000bf8:	bd90      	pop	{r4, r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	40012c00 	.word	0x40012c00
 8000c00:	40021000 	.word	0x40021000

08000c04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b095      	sub	sp, #84	; 0x54
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	233c      	movs	r3, #60	; 0x3c
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	0018      	movs	r0, r3
 8000c12:	2314      	movs	r3, #20
 8000c14:	001a      	movs	r2, r3
 8000c16:	2100      	movs	r1, #0
 8000c18:	f009 feda 	bl	800a9d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c1c:	2410      	movs	r4, #16
 8000c1e:	193b      	adds	r3, r7, r4
 8000c20:	0018      	movs	r0, r3
 8000c22:	232c      	movs	r3, #44	; 0x2c
 8000c24:	001a      	movs	r2, r3
 8000c26:	2100      	movs	r1, #0
 8000c28:	f009 fed2 	bl	800a9d0 <memset>
  if(huart->Instance==USART1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a22      	ldr	r2, [pc, #136]	; (8000cbc <HAL_UART_MspInit+0xb8>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d13d      	bne.n	8000cb2 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	2201      	movs	r2, #1
 8000c3a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	0018      	movs	r0, r3
 8000c46:	f003 f89d 	bl	8003d84 <HAL_RCCEx_PeriphCLKConfig>
 8000c4a:	1e03      	subs	r3, r0, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c4e:	f7ff fe77 	bl	8000940 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c52:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <HAL_UART_MspInit+0xbc>)
 8000c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c56:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <HAL_UART_MspInit+0xbc>)
 8000c58:	2180      	movs	r1, #128	; 0x80
 8000c5a:	01c9      	lsls	r1, r1, #7
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	641a      	str	r2, [r3, #64]	; 0x40
 8000c60:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <HAL_UART_MspInit+0xbc>)
 8000c62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	01db      	lsls	r3, r3, #7
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <HAL_UART_MspInit+0xbc>)
 8000c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <HAL_UART_MspInit+0xbc>)
 8000c74:	2102      	movs	r1, #2
 8000c76:	430a      	orrs	r2, r1
 8000c78:	635a      	str	r2, [r3, #52]	; 0x34
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <HAL_UART_MspInit+0xbc>)
 8000c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c7e:	2202      	movs	r2, #2
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c86:	213c      	movs	r1, #60	; 0x3c
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	22c0      	movs	r2, #192	; 0xc0
 8000c8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	2202      	movs	r2, #2
 8000c92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	187b      	adds	r3, r7, r1
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	4a06      	ldr	r2, [pc, #24]	; (8000cc4 <HAL_UART_MspInit+0xc0>)
 8000caa:	0019      	movs	r1, r3
 8000cac:	0010      	movs	r0, r2
 8000cae:	f000 fc01 	bl	80014b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b015      	add	sp, #84	; 0x54
 8000cb8:	bd90      	pop	{r4, r7, pc}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	40013800 	.word	0x40013800
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	50000400 	.word	0x50000400

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ccc:	e7fe      	b.n	8000ccc <NMI_Handler+0x4>

08000cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <HardFault_Handler+0x4>

08000cd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cec:	f000 f8d0 	bl	8000e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ETH_INTn_Pin);
 8000cfa:	2008      	movs	r0, #8
 8000cfc:	f000 fd7e 	bl	80017fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000d00:	46c0      	nop			; (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <USB_IRQHandler>:

/**
  * @brief This function handles USB interrupt.
  */
void USB_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <USB_IRQHandler+0x14>)
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f000 ff38 	bl	8001b84 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	20001868 	.word	0x20001868

08000d20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <DMA1_Channel1_IRQHandler+0x14>)
 8000d26:	0018      	movs	r0, r3
 8000d28:	f000 fa92 	bl	8001250 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	20000290 	.word	0x20000290

08000d38 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f000 fa86 	bl	8001250 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000d46:	0018      	movs	r0, r3
 8000d48:	f000 fa82 	bl	8001250 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	20000184 	.word	0x20000184
 8000d58:	200001e4 	.word	0x200001e4

08000d5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d68:	480d      	ldr	r0, [pc, #52]	; (8000da0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d6c:	f7ff fff6 	bl	8000d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d70:	480c      	ldr	r0, [pc, #48]	; (8000da4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d72:	490d      	ldr	r1, [pc, #52]	; (8000da8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d74:	4a0d      	ldr	r2, [pc, #52]	; (8000dac <LoopForever+0xe>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d78:	e002      	b.n	8000d80 <LoopCopyDataInit>

08000d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7e:	3304      	adds	r3, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d84:	d3f9      	bcc.n	8000d7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d88:	4c0a      	ldr	r4, [pc, #40]	; (8000db4 <LoopForever+0x16>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d8c:	e001      	b.n	8000d92 <LoopFillZerobss>

08000d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d90:	3204      	adds	r2, #4

08000d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d94:	d3fb      	bcc.n	8000d8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d96:	f009 fe23 	bl	800a9e0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d9a:	f7ff fb2f 	bl	80003fc <main>

08000d9e <LoopForever>:

LoopForever:
  b LoopForever
 8000d9e:	e7fe      	b.n	8000d9e <LoopForever>
  ldr   r0, =_estack
 8000da0:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da8:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8000dac:	0800ac94 	.word	0x0800ac94
  ldr r2, =_sbss
 8000db0:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8000db4:	20001d68 	.word	0x20001d68

08000db8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000db8:	e7fe      	b.n	8000db8 <ADC1_IRQHandler>
	...

08000dbc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <HAL_Init+0x3c>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_Init+0x3c>)
 8000dce:	2180      	movs	r1, #128	; 0x80
 8000dd0:	0049      	lsls	r1, r1, #1
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dd6:	2003      	movs	r0, #3
 8000dd8:	f000 f810 	bl	8000dfc <HAL_InitTick>
 8000ddc:	1e03      	subs	r3, r0, #0
 8000dde:	d003      	beq.n	8000de8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000de0:	1dfb      	adds	r3, r7, #7
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
 8000de6:	e001      	b.n	8000dec <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000de8:	f7ff fdb0 	bl	800094c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dec:	1dfb      	adds	r3, r7, #7
 8000dee:	781b      	ldrb	r3, [r3, #0]
}
 8000df0:	0018      	movs	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b002      	add	sp, #8
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40022000 	.word	0x40022000

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e04:	230f      	movs	r3, #15
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <HAL_InitTick+0x88>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d02b      	beq.n	8000e6c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000e14:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <HAL_InitTick+0x8c>)
 8000e16:	681c      	ldr	r4, [r3, #0]
 8000e18:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <HAL_InitTick+0x88>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	0019      	movs	r1, r3
 8000e1e:	23fa      	movs	r3, #250	; 0xfa
 8000e20:	0098      	lsls	r0, r3, #2
 8000e22:	f7ff f975 	bl	8000110 <__udivsi3>
 8000e26:	0003      	movs	r3, r0
 8000e28:	0019      	movs	r1, r3
 8000e2a:	0020      	movs	r0, r4
 8000e2c:	f7ff f970 	bl	8000110 <__udivsi3>
 8000e30:	0003      	movs	r3, r0
 8000e32:	0018      	movs	r0, r3
 8000e34:	f000 f953 	bl	80010de <HAL_SYSTICK_Config>
 8000e38:	1e03      	subs	r3, r0, #0
 8000e3a:	d112      	bne.n	8000e62 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	d80a      	bhi.n	8000e58 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e42:	6879      	ldr	r1, [r7, #4]
 8000e44:	2301      	movs	r3, #1
 8000e46:	425b      	negs	r3, r3
 8000e48:	2200      	movs	r2, #0
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f000 f922 	bl	8001094 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <HAL_InitTick+0x90>)
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	e00d      	b.n	8000e74 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e58:	230f      	movs	r3, #15
 8000e5a:	18fb      	adds	r3, r7, r3
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]
 8000e60:	e008      	b.n	8000e74 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e62:	230f      	movs	r3, #15
 8000e64:	18fb      	adds	r3, r7, r3
 8000e66:	2201      	movs	r2, #1
 8000e68:	701a      	strb	r2, [r3, #0]
 8000e6a:	e003      	b.n	8000e74 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e6c:	230f      	movs	r3, #15
 8000e6e:	18fb      	adds	r3, r7, r3
 8000e70:	2201      	movs	r2, #1
 8000e72:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e74:	230f      	movs	r3, #15
 8000e76:	18fb      	adds	r3, r7, r3
 8000e78:	781b      	ldrb	r3, [r3, #0]
}
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b005      	add	sp, #20
 8000e80:	bd90      	pop	{r4, r7, pc}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	2000000c 	.word	0x2000000c
 8000e88:	20000004 	.word	0x20000004
 8000e8c:	20000008 	.word	0x20000008

08000e90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <HAL_IncTick+0x1c>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	001a      	movs	r2, r3
 8000e9a:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <HAL_IncTick+0x20>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	18d2      	adds	r2, r2, r3
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <HAL_IncTick+0x20>)
 8000ea2:	601a      	str	r2, [r3, #0]
}
 8000ea4:	46c0      	nop			; (mov r8, r8)
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	2000000c 	.word	0x2000000c
 8000eb0:	20000384 	.word	0x20000384

08000eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b02      	ldr	r3, [pc, #8]	; (8000ec4 <HAL_GetTick+0x10>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	20000384 	.word	0x20000384

08000ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed0:	f7ff fff0 	bl	8000eb4 <HAL_GetTick>
 8000ed4:	0003      	movs	r3, r0
 8000ed6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	d005      	beq.n	8000eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <HAL_Delay+0x44>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	001a      	movs	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	189b      	adds	r3, r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	f7ff ffe0 	bl	8000eb4 <HAL_GetTick>
 8000ef4:	0002      	movs	r2, r0
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d8f7      	bhi.n	8000ef0 <HAL_Delay+0x28>
  {
  }
}
 8000f00:	46c0      	nop			; (mov r8, r8)
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b004      	add	sp, #16
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	2000000c 	.word	0x2000000c

08000f10 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000f1e:	4013      	ands	r3, r2
 8000f20:	0019      	movs	r1, r3
 8000f22:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	430a      	orrs	r2, r1
 8000f28:	601a      	str	r2, [r3, #0]
}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b002      	add	sp, #8
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	40010000 	.word	0x40010000
 8000f38:	fffff9ff 	.word	0xfffff9ff

08000f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	0002      	movs	r2, r0
 8000f44:	1dfb      	adds	r3, r7, #7
 8000f46:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	1dfb      	adds	r3, r7, #7
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f4e:	d809      	bhi.n	8000f64 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f50:	1dfb      	adds	r3, r7, #7
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	001a      	movs	r2, r3
 8000f56:	231f      	movs	r3, #31
 8000f58:	401a      	ands	r2, r3
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <__NVIC_EnableIRQ+0x30>)
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	000a      	movs	r2, r1
 8000f62:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b002      	add	sp, #8
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	e000e100 	.word	0xe000e100

08000f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	0002      	movs	r2, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b7f      	cmp	r3, #127	; 0x7f
 8000f84:	d828      	bhi.n	8000fd8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f86:	4a2f      	ldr	r2, [pc, #188]	; (8001044 <__NVIC_SetPriority+0xd4>)
 8000f88:	1dfb      	adds	r3, r7, #7
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	089b      	lsrs	r3, r3, #2
 8000f90:	33c0      	adds	r3, #192	; 0xc0
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	589b      	ldr	r3, [r3, r2]
 8000f96:	1dfa      	adds	r2, r7, #7
 8000f98:	7812      	ldrb	r2, [r2, #0]
 8000f9a:	0011      	movs	r1, r2
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	400a      	ands	r2, r1
 8000fa0:	00d2      	lsls	r2, r2, #3
 8000fa2:	21ff      	movs	r1, #255	; 0xff
 8000fa4:	4091      	lsls	r1, r2
 8000fa6:	000a      	movs	r2, r1
 8000fa8:	43d2      	mvns	r2, r2
 8000faa:	401a      	ands	r2, r3
 8000fac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	019b      	lsls	r3, r3, #6
 8000fb2:	22ff      	movs	r2, #255	; 0xff
 8000fb4:	401a      	ands	r2, r3
 8000fb6:	1dfb      	adds	r3, r7, #7
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	0018      	movs	r0, r3
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	4003      	ands	r3, r0
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fc4:	481f      	ldr	r0, [pc, #124]	; (8001044 <__NVIC_SetPriority+0xd4>)
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	b25b      	sxtb	r3, r3
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	33c0      	adds	r3, #192	; 0xc0
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fd6:	e031      	b.n	800103c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fd8:	4a1b      	ldr	r2, [pc, #108]	; (8001048 <__NVIC_SetPriority+0xd8>)
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	0019      	movs	r1, r3
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	400b      	ands	r3, r1
 8000fe4:	3b08      	subs	r3, #8
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	3306      	adds	r3, #6
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	18d3      	adds	r3, r2, r3
 8000fee:	3304      	adds	r3, #4
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	1dfa      	adds	r2, r7, #7
 8000ff4:	7812      	ldrb	r2, [r2, #0]
 8000ff6:	0011      	movs	r1, r2
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	400a      	ands	r2, r1
 8000ffc:	00d2      	lsls	r2, r2, #3
 8000ffe:	21ff      	movs	r1, #255	; 0xff
 8001000:	4091      	lsls	r1, r2
 8001002:	000a      	movs	r2, r1
 8001004:	43d2      	mvns	r2, r2
 8001006:	401a      	ands	r2, r3
 8001008:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	019b      	lsls	r3, r3, #6
 800100e:	22ff      	movs	r2, #255	; 0xff
 8001010:	401a      	ands	r2, r3
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	0018      	movs	r0, r3
 8001018:	2303      	movs	r3, #3
 800101a:	4003      	ands	r3, r0
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001020:	4809      	ldr	r0, [pc, #36]	; (8001048 <__NVIC_SetPriority+0xd8>)
 8001022:	1dfb      	adds	r3, r7, #7
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	001c      	movs	r4, r3
 8001028:	230f      	movs	r3, #15
 800102a:	4023      	ands	r3, r4
 800102c:	3b08      	subs	r3, #8
 800102e:	089b      	lsrs	r3, r3, #2
 8001030:	430a      	orrs	r2, r1
 8001032:	3306      	adds	r3, #6
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	18c3      	adds	r3, r0, r3
 8001038:	3304      	adds	r3, #4
 800103a:	601a      	str	r2, [r3, #0]
}
 800103c:	46c0      	nop			; (mov r8, r8)
 800103e:	46bd      	mov	sp, r7
 8001040:	b003      	add	sp, #12
 8001042:	bd90      	pop	{r4, r7, pc}
 8001044:	e000e100 	.word	0xe000e100
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	1e5a      	subs	r2, r3, #1
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	045b      	lsls	r3, r3, #17
 800105c:	429a      	cmp	r2, r3
 800105e:	d301      	bcc.n	8001064 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001060:	2301      	movs	r3, #1
 8001062:	e010      	b.n	8001086 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <SysTick_Config+0x44>)
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	3a01      	subs	r2, #1
 800106a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106c:	2301      	movs	r3, #1
 800106e:	425b      	negs	r3, r3
 8001070:	2103      	movs	r1, #3
 8001072:	0018      	movs	r0, r3
 8001074:	f7ff ff7c 	bl	8000f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SysTick_Config+0x44>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <SysTick_Config+0x44>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	0018      	movs	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	b002      	add	sp, #8
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	210f      	movs	r1, #15
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	1c02      	adds	r2, r0, #0
 80010a4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	187b      	adds	r3, r7, r1
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	0011      	movs	r1, r2
 80010b0:	0018      	movs	r0, r3
 80010b2:	f7ff ff5d 	bl	8000f70 <__NVIC_SetPriority>
}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	46bd      	mov	sp, r7
 80010ba:	b004      	add	sp, #16
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	0002      	movs	r2, r0
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff ff33 	bl	8000f3c <__NVIC_EnableIRQ>
}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	46bd      	mov	sp, r7
 80010da:	b002      	add	sp, #8
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff ffaf 	bl	800104c <SysTick_Config>
 80010ee:	0003      	movs	r3, r0
}
 80010f0:	0018      	movs	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b002      	add	sp, #8
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e091      	b.n	800122e <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	001a      	movs	r2, r3
 8001110:	4b49      	ldr	r3, [pc, #292]	; (8001238 <HAL_DMA_Init+0x140>)
 8001112:	429a      	cmp	r2, r3
 8001114:	d810      	bhi.n	8001138 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a48      	ldr	r2, [pc, #288]	; (800123c <HAL_DMA_Init+0x144>)
 800111c:	4694      	mov	ip, r2
 800111e:	4463      	add	r3, ip
 8001120:	2114      	movs	r1, #20
 8001122:	0018      	movs	r0, r3
 8001124:	f7fe fff4 	bl	8000110 <__udivsi3>
 8001128:	0003      	movs	r3, r0
 800112a:	009a      	lsls	r2, r3, #2
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a43      	ldr	r2, [pc, #268]	; (8001240 <HAL_DMA_Init+0x148>)
 8001134:	641a      	str	r2, [r3, #64]	; 0x40
 8001136:	e00f      	b.n	8001158 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a41      	ldr	r2, [pc, #260]	; (8001244 <HAL_DMA_Init+0x14c>)
 800113e:	4694      	mov	ip, r2
 8001140:	4463      	add	r3, ip
 8001142:	2114      	movs	r1, #20
 8001144:	0018      	movs	r0, r3
 8001146:	f7fe ffe3 	bl	8000110 <__udivsi3>
 800114a:	0003      	movs	r3, r0
 800114c:	009a      	lsls	r2, r3, #2
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a3c      	ldr	r2, [pc, #240]	; (8001248 <HAL_DMA_Init+0x150>)
 8001156:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2225      	movs	r2, #37	; 0x25
 800115c:	2102      	movs	r1, #2
 800115e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4938      	ldr	r1, [pc, #224]	; (800124c <HAL_DMA_Init+0x154>)
 800116c:	400a      	ands	r2, r1
 800116e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6819      	ldr	r1, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	431a      	orrs	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	431a      	orrs	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	431a      	orrs	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	431a      	orrs	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	431a      	orrs	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	431a      	orrs	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	0018      	movs	r0, r3
 80011aa:	f000 f915 	bl	80013d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689a      	ldr	r2, [r3, #8]
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	01db      	lsls	r3, r3, #7
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d102      	bne.n	80011c0 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c8:	217f      	movs	r1, #127	; 0x7f
 80011ca:	400a      	ands	r2, r1
 80011cc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011d6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d011      	beq.n	8001204 <HAL_DMA_Init+0x10c>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2b04      	cmp	r3, #4
 80011e6:	d80d      	bhi.n	8001204 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	0018      	movs	r0, r3
 80011ec:	f000 f93e 	bl	800146c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	e008      	b.n	8001216 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2225      	movs	r2, #37	; 0x25
 8001220:	2101      	movs	r1, #1
 8001222:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2224      	movs	r2, #36	; 0x24
 8001228:	2100      	movs	r1, #0
 800122a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	0018      	movs	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	b002      	add	sp, #8
 8001234:	bd80      	pop	{r7, pc}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	40020407 	.word	0x40020407
 800123c:	bffdfff8 	.word	0xbffdfff8
 8001240:	40020000 	.word	0x40020000
 8001244:	bffdfbf8 	.word	0xbffdfbf8
 8001248:	40020400 	.word	0x40020400
 800124c:	ffff800f 	.word	0xffff800f

08001250 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126c:	221c      	movs	r2, #28
 800126e:	4013      	ands	r3, r2
 8001270:	2204      	movs	r2, #4
 8001272:	409a      	lsls	r2, r3
 8001274:	0013      	movs	r3, r2
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	4013      	ands	r3, r2
 800127a:	d026      	beq.n	80012ca <HAL_DMA_IRQHandler+0x7a>
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	2204      	movs	r2, #4
 8001280:	4013      	ands	r3, r2
 8001282:	d022      	beq.n	80012ca <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2220      	movs	r2, #32
 800128c:	4013      	ands	r3, r2
 800128e:	d107      	bne.n	80012a0 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2104      	movs	r1, #4
 800129c:	438a      	bics	r2, r1
 800129e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a4:	221c      	movs	r2, #28
 80012a6:	401a      	ands	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	2104      	movs	r1, #4
 80012ae:	4091      	lsls	r1, r2
 80012b0:	000a      	movs	r2, r1
 80012b2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d100      	bne.n	80012be <HAL_DMA_IRQHandler+0x6e>
 80012bc:	e080      	b.n	80013c0 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	0010      	movs	r0, r2
 80012c6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80012c8:	e07a      	b.n	80013c0 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	221c      	movs	r2, #28
 80012d0:	4013      	ands	r3, r2
 80012d2:	2202      	movs	r2, #2
 80012d4:	409a      	lsls	r2, r3
 80012d6:	0013      	movs	r3, r2
 80012d8:	68fa      	ldr	r2, [r7, #12]
 80012da:	4013      	ands	r3, r2
 80012dc:	d03c      	beq.n	8001358 <HAL_DMA_IRQHandler+0x108>
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	2202      	movs	r2, #2
 80012e2:	4013      	ands	r3, r2
 80012e4:	d038      	beq.n	8001358 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2220      	movs	r2, #32
 80012ee:	4013      	ands	r3, r2
 80012f0:	d10b      	bne.n	800130a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	210a      	movs	r1, #10
 80012fe:	438a      	bics	r2, r1
 8001300:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2225      	movs	r2, #37	; 0x25
 8001306:	2101      	movs	r1, #1
 8001308:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	001a      	movs	r2, r3
 8001310:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <HAL_DMA_IRQHandler+0x17c>)
 8001312:	429a      	cmp	r2, r3
 8001314:	d909      	bls.n	800132a <HAL_DMA_IRQHandler+0xda>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	221c      	movs	r2, #28
 800131c:	401a      	ands	r2, r3
 800131e:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <HAL_DMA_IRQHandler+0x180>)
 8001320:	2102      	movs	r1, #2
 8001322:	4091      	lsls	r1, r2
 8001324:	000a      	movs	r2, r1
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	e008      	b.n	800133c <HAL_DMA_IRQHandler+0xec>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	221c      	movs	r2, #28
 8001330:	401a      	ands	r2, r3
 8001332:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <HAL_DMA_IRQHandler+0x184>)
 8001334:	2102      	movs	r1, #2
 8001336:	4091      	lsls	r1, r2
 8001338:	000a      	movs	r2, r1
 800133a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2224      	movs	r2, #36	; 0x24
 8001340:	2100      	movs	r1, #0
 8001342:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001348:	2b00      	cmp	r3, #0
 800134a:	d039      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	0010      	movs	r0, r2
 8001354:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001356:	e033      	b.n	80013c0 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135c:	221c      	movs	r2, #28
 800135e:	4013      	ands	r3, r2
 8001360:	2208      	movs	r2, #8
 8001362:	409a      	lsls	r2, r3
 8001364:	0013      	movs	r3, r2
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	4013      	ands	r3, r2
 800136a:	d02a      	beq.n	80013c2 <HAL_DMA_IRQHandler+0x172>
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	2208      	movs	r2, #8
 8001370:	4013      	ands	r3, r2
 8001372:	d026      	beq.n	80013c2 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	210e      	movs	r1, #14
 8001380:	438a      	bics	r2, r1
 8001382:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001388:	221c      	movs	r2, #28
 800138a:	401a      	ands	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	2101      	movs	r1, #1
 8001392:	4091      	lsls	r1, r2
 8001394:	000a      	movs	r2, r1
 8001396:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2225      	movs	r2, #37	; 0x25
 80013a2:	2101      	movs	r1, #1
 80013a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2224      	movs	r2, #36	; 0x24
 80013aa:	2100      	movs	r1, #0
 80013ac:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d005      	beq.n	80013c2 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	0010      	movs	r0, r2
 80013be:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80013c0:	46c0      	nop			; (mov r8, r8)
 80013c2:	46c0      	nop			; (mov r8, r8)
}
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b004      	add	sp, #16
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	40020080 	.word	0x40020080
 80013d0:	40020400 	.word	0x40020400
 80013d4:	40020000 	.word	0x40020000

080013d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	001a      	movs	r2, r3
 80013e6:	4b1d      	ldr	r3, [pc, #116]	; (800145c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d814      	bhi.n	8001416 <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4a1a      	ldr	r2, [pc, #104]	; (8001460 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80013f6:	189a      	adds	r2, r3, r2
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	001a      	movs	r2, r3
 8001402:	23ff      	movs	r3, #255	; 0xff
 8001404:	4013      	ands	r3, r2
 8001406:	3b08      	subs	r3, #8
 8001408:	2114      	movs	r1, #20
 800140a:	0018      	movs	r0, r3
 800140c:	f7fe fe80 	bl	8000110 <__udivsi3>
 8001410:	0003      	movs	r3, r0
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	e014      	b.n	8001440 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	089b      	lsrs	r3, r3, #2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4a11      	ldr	r2, [pc, #68]	; (8001464 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001420:	189a      	adds	r2, r3, r2
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	001a      	movs	r2, r3
 800142c:	23ff      	movs	r3, #255	; 0xff
 800142e:	4013      	ands	r3, r2
 8001430:	3b08      	subs	r3, #8
 8001432:	2114      	movs	r1, #20
 8001434:	0018      	movs	r0, r3
 8001436:	f7fe fe6b 	bl	8000110 <__udivsi3>
 800143a:	0003      	movs	r3, r0
 800143c:	3307      	adds	r3, #7
 800143e:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a09      	ldr	r2, [pc, #36]	; (8001468 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8001444:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	221f      	movs	r2, #31
 800144a:	4013      	ands	r3, r2
 800144c:	2201      	movs	r2, #1
 800144e:	409a      	lsls	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001454:	46c0      	nop			; (mov r8, r8)
 8001456:	46bd      	mov	sp, r7
 8001458:	b004      	add	sp, #16
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40020407 	.word	0x40020407
 8001460:	40020800 	.word	0x40020800
 8001464:	4002081c 	.word	0x4002081c
 8001468:	40020880 	.word	0x40020880

0800146c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	227f      	movs	r2, #127	; 0x7f
 800147a:	4013      	ands	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001482:	4694      	mov	ip, r2
 8001484:	4463      	add	r3, ip
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	001a      	movs	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001492:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	3b01      	subs	r3, #1
 8001498:	2203      	movs	r2, #3
 800149a:	4013      	ands	r3, r2
 800149c:	2201      	movs	r2, #1
 800149e:	409a      	lsls	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80014a4:	46c0      	nop			; (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b004      	add	sp, #16
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	1000823f 	.word	0x1000823f
 80014b0:	40020940 	.word	0x40020940

080014b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c2:	e14d      	b.n	8001760 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2101      	movs	r1, #1
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	4091      	lsls	r1, r2
 80014ce:	000a      	movs	r2, r1
 80014d0:	4013      	ands	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d100      	bne.n	80014dc <HAL_GPIO_Init+0x28>
 80014da:	e13e      	b.n	800175a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2203      	movs	r2, #3
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d005      	beq.n	80014f4 <HAL_GPIO_Init+0x40>
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2203      	movs	r2, #3
 80014ee:	4013      	ands	r3, r2
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d130      	bne.n	8001556 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	2203      	movs	r2, #3
 8001500:	409a      	lsls	r2, r3
 8001502:	0013      	movs	r3, r2
 8001504:	43da      	mvns	r2, r3
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	68da      	ldr	r2, [r3, #12]
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	409a      	lsls	r2, r3
 8001516:	0013      	movs	r3, r2
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4313      	orrs	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800152a:	2201      	movs	r2, #1
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	409a      	lsls	r2, r3
 8001530:	0013      	movs	r3, r2
 8001532:	43da      	mvns	r2, r3
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	091b      	lsrs	r3, r3, #4
 8001540:	2201      	movs	r2, #1
 8001542:	401a      	ands	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	409a      	lsls	r2, r3
 8001548:	0013      	movs	r3, r2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2203      	movs	r2, #3
 800155c:	4013      	ands	r3, r2
 800155e:	2b03      	cmp	r3, #3
 8001560:	d017      	beq.n	8001592 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	2203      	movs	r2, #3
 800156e:	409a      	lsls	r2, r3
 8001570:	0013      	movs	r3, r2
 8001572:	43da      	mvns	r2, r3
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	409a      	lsls	r2, r3
 8001584:	0013      	movs	r3, r2
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2203      	movs	r2, #3
 8001598:	4013      	ands	r3, r2
 800159a:	2b02      	cmp	r3, #2
 800159c:	d123      	bne.n	80015e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	08da      	lsrs	r2, r3, #3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3208      	adds	r2, #8
 80015a6:	0092      	lsls	r2, r2, #2
 80015a8:	58d3      	ldr	r3, [r2, r3]
 80015aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2207      	movs	r2, #7
 80015b0:	4013      	ands	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	220f      	movs	r2, #15
 80015b6:	409a      	lsls	r2, r3
 80015b8:	0013      	movs	r3, r2
 80015ba:	43da      	mvns	r2, r3
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	691a      	ldr	r2, [r3, #16]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	2107      	movs	r1, #7
 80015ca:	400b      	ands	r3, r1
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	409a      	lsls	r2, r3
 80015d0:	0013      	movs	r3, r2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	08da      	lsrs	r2, r3, #3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3208      	adds	r2, #8
 80015e0:	0092      	lsls	r2, r2, #2
 80015e2:	6939      	ldr	r1, [r7, #16]
 80015e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	2203      	movs	r2, #3
 80015f2:	409a      	lsls	r2, r3
 80015f4:	0013      	movs	r3, r2
 80015f6:	43da      	mvns	r2, r3
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2203      	movs	r2, #3
 8001604:	401a      	ands	r2, r3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	409a      	lsls	r2, r3
 800160c:	0013      	movs	r3, r2
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	23c0      	movs	r3, #192	; 0xc0
 8001620:	029b      	lsls	r3, r3, #10
 8001622:	4013      	ands	r3, r2
 8001624:	d100      	bne.n	8001628 <HAL_GPIO_Init+0x174>
 8001626:	e098      	b.n	800175a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001628:	4a53      	ldr	r2, [pc, #332]	; (8001778 <HAL_GPIO_Init+0x2c4>)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	089b      	lsrs	r3, r3, #2
 800162e:	3318      	adds	r3, #24
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	589b      	ldr	r3, [r3, r2]
 8001634:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	2203      	movs	r2, #3
 800163a:	4013      	ands	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	220f      	movs	r2, #15
 8001640:	409a      	lsls	r2, r3
 8001642:	0013      	movs	r3, r2
 8001644:	43da      	mvns	r2, r3
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	23a0      	movs	r3, #160	; 0xa0
 8001650:	05db      	lsls	r3, r3, #23
 8001652:	429a      	cmp	r2, r3
 8001654:	d019      	beq.n	800168a <HAL_GPIO_Init+0x1d6>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a48      	ldr	r2, [pc, #288]	; (800177c <HAL_GPIO_Init+0x2c8>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d013      	beq.n	8001686 <HAL_GPIO_Init+0x1d2>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a47      	ldr	r2, [pc, #284]	; (8001780 <HAL_GPIO_Init+0x2cc>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d00d      	beq.n	8001682 <HAL_GPIO_Init+0x1ce>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a46      	ldr	r2, [pc, #280]	; (8001784 <HAL_GPIO_Init+0x2d0>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d007      	beq.n	800167e <HAL_GPIO_Init+0x1ca>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a45      	ldr	r2, [pc, #276]	; (8001788 <HAL_GPIO_Init+0x2d4>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d101      	bne.n	800167a <HAL_GPIO_Init+0x1c6>
 8001676:	2304      	movs	r3, #4
 8001678:	e008      	b.n	800168c <HAL_GPIO_Init+0x1d8>
 800167a:	2305      	movs	r3, #5
 800167c:	e006      	b.n	800168c <HAL_GPIO_Init+0x1d8>
 800167e:	2303      	movs	r3, #3
 8001680:	e004      	b.n	800168c <HAL_GPIO_Init+0x1d8>
 8001682:	2302      	movs	r3, #2
 8001684:	e002      	b.n	800168c <HAL_GPIO_Init+0x1d8>
 8001686:	2301      	movs	r3, #1
 8001688:	e000      	b.n	800168c <HAL_GPIO_Init+0x1d8>
 800168a:	2300      	movs	r3, #0
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	2103      	movs	r1, #3
 8001690:	400a      	ands	r2, r1
 8001692:	00d2      	lsls	r2, r2, #3
 8001694:	4093      	lsls	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800169c:	4936      	ldr	r1, [pc, #216]	; (8001778 <HAL_GPIO_Init+0x2c4>)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	089b      	lsrs	r3, r3, #2
 80016a2:	3318      	adds	r3, #24
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016aa:	4b33      	ldr	r3, [pc, #204]	; (8001778 <HAL_GPIO_Init+0x2c4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	43da      	mvns	r2, r3
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	4013      	ands	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	035b      	lsls	r3, r3, #13
 80016c2:	4013      	ands	r3, r2
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016ce:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <HAL_GPIO_Init+0x2c4>)
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80016d4:	4b28      	ldr	r3, [pc, #160]	; (8001778 <HAL_GPIO_Init+0x2c4>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	43da      	mvns	r2, r3
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	039b      	lsls	r3, r3, #14
 80016ec:	4013      	ands	r3, r2
 80016ee:	d003      	beq.n	80016f8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016f8:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <HAL_GPIO_Init+0x2c4>)
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016fe:	4a1e      	ldr	r2, [pc, #120]	; (8001778 <HAL_GPIO_Init+0x2c4>)
 8001700:	2384      	movs	r3, #132	; 0x84
 8001702:	58d3      	ldr	r3, [r2, r3]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	43da      	mvns	r2, r3
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	029b      	lsls	r3, r3, #10
 8001718:	4013      	ands	r3, r2
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001724:	4914      	ldr	r1, [pc, #80]	; (8001778 <HAL_GPIO_Init+0x2c4>)
 8001726:	2284      	movs	r2, #132	; 0x84
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800172c:	4a12      	ldr	r2, [pc, #72]	; (8001778 <HAL_GPIO_Init+0x2c4>)
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	58d3      	ldr	r3, [r2, r3]
 8001732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	43da      	mvns	r2, r3
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	025b      	lsls	r3, r3, #9
 8001746:	4013      	ands	r3, r2
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001752:	4909      	ldr	r1, [pc, #36]	; (8001778 <HAL_GPIO_Init+0x2c4>)
 8001754:	2280      	movs	r2, #128	; 0x80
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3301      	adds	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	40da      	lsrs	r2, r3
 8001768:	1e13      	subs	r3, r2, #0
 800176a:	d000      	beq.n	800176e <HAL_GPIO_Init+0x2ba>
 800176c:	e6aa      	b.n	80014c4 <HAL_GPIO_Init+0x10>
  }
}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	46c0      	nop			; (mov r8, r8)
 8001772:	46bd      	mov	sp, r7
 8001774:	b006      	add	sp, #24
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40021800 	.word	0x40021800
 800177c:	50000400 	.word	0x50000400
 8001780:	50000800 	.word	0x50000800
 8001784:	50000c00 	.word	0x50000c00
 8001788:	50001000 	.word	0x50001000

0800178c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	0008      	movs	r0, r1
 8001796:	0011      	movs	r1, r2
 8001798:	1cbb      	adds	r3, r7, #2
 800179a:	1c02      	adds	r2, r0, #0
 800179c:	801a      	strh	r2, [r3, #0]
 800179e:	1c7b      	adds	r3, r7, #1
 80017a0:	1c0a      	adds	r2, r1, #0
 80017a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017a4:	1c7b      	adds	r3, r7, #1
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d004      	beq.n	80017b6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ac:	1cbb      	adds	r3, r7, #2
 80017ae:	881a      	ldrh	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017b4:	e003      	b.n	80017be <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017b6:	1cbb      	adds	r3, r7, #2
 80017b8:	881a      	ldrh	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b002      	add	sp, #8
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b084      	sub	sp, #16
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	000a      	movs	r2, r1
 80017d0:	1cbb      	adds	r3, r7, #2
 80017d2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017da:	1cbb      	adds	r3, r7, #2
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	4013      	ands	r3, r2
 80017e2:	041a      	lsls	r2, r3, #16
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	1cb9      	adds	r1, r7, #2
 80017ea:	8809      	ldrh	r1, [r1, #0]
 80017ec:	400b      	ands	r3, r1
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	619a      	str	r2, [r3, #24]
}
 80017f4:	46c0      	nop			; (mov r8, r8)
 80017f6:	46bd      	mov	sp, r7
 80017f8:	b004      	add	sp, #16
 80017fa:	bd80      	pop	{r7, pc}

080017fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	0002      	movs	r2, r0
 8001804:	1dbb      	adds	r3, r7, #6
 8001806:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001808:	4b10      	ldr	r3, [pc, #64]	; (800184c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	1dba      	adds	r2, r7, #6
 800180e:	8812      	ldrh	r2, [r2, #0]
 8001810:	4013      	ands	r3, r2
 8001812:	d008      	beq.n	8001826 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001814:	4b0d      	ldr	r3, [pc, #52]	; (800184c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001816:	1dba      	adds	r2, r7, #6
 8001818:	8812      	ldrh	r2, [r2, #0]
 800181a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800181c:	1dbb      	adds	r3, r7, #6
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	0018      	movs	r0, r3
 8001822:	f000 f815 	bl	8001850 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	1dba      	adds	r2, r7, #6
 800182c:	8812      	ldrh	r2, [r2, #0]
 800182e:	4013      	ands	r3, r2
 8001830:	d008      	beq.n	8001844 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001834:	1dba      	adds	r2, r7, #6
 8001836:	8812      	ldrh	r2, [r2, #0]
 8001838:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800183a:	1dbb      	adds	r3, r7, #6
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	0018      	movs	r0, r3
 8001840:	f000 f810 	bl	8001864 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001844:	46c0      	nop			; (mov r8, r8)
 8001846:	46bd      	mov	sp, r7
 8001848:	b002      	add	sp, #8
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40021800 	.word	0x40021800

08001850 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	0002      	movs	r2, r0
 8001858:	1dbb      	adds	r3, r7, #6
 800185a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800185c:	46c0      	nop			; (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	b002      	add	sp, #8
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	0002      	movs	r2, r0
 800186c:	1dbb      	adds	r3, r7, #6
 800186e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001870:	46c0      	nop			; (mov r8, r8)
 8001872:	46bd      	mov	sp, r7
 8001874:	b002      	add	sp, #8
 8001876:	bd80      	pop	{r7, pc}

08001878 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	000a      	movs	r2, r1
 8001882:	1cbb      	adds	r3, r7, #2
 8001884:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8001886:	230a      	movs	r3, #10
 8001888:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800188a:	e002      	b.n	8001892 <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	3b01      	subs	r3, #1
 8001890:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1f9      	bne.n	800188c <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8001898:	1cbb      	adds	r3, r7, #2
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <PCD_GET_EP_RX_CNT+0x40>)
 80018a0:	4694      	mov	ip, r2
 80018a2:	4463      	add	r3, ip
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	059b      	lsls	r3, r3, #22
 80018ac:	0d9b      	lsrs	r3, r3, #22
 80018ae:	b29b      	uxth	r3, r3
}
 80018b0:	0018      	movs	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b004      	add	sp, #16
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40009800 	.word	0x40009800

080018bc <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	000a      	movs	r2, r1
 80018c6:	1cbb      	adds	r3, r7, #2
 80018c8:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80018ca:	230a      	movs	r3, #10
 80018cc:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80018ce:	e002      	b.n	80018d6 <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f9      	bne.n	80018d0 <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 80018dc:	1cbb      	adds	r3, r7, #2
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	4a06      	ldr	r2, [pc, #24]	; (80018fc <PCD_GET_EP_DBUF0_CNT+0x40>)
 80018e4:	4694      	mov	ip, r2
 80018e6:	4463      	add	r3, ip
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	0c1b      	lsrs	r3, r3, #16
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	059b      	lsls	r3, r3, #22
 80018f0:	0d9b      	lsrs	r3, r3, #22
 80018f2:	b29b      	uxth	r3, r3
}
 80018f4:	0018      	movs	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	b004      	add	sp, #16
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40009800 	.word	0x40009800

08001900 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	000a      	movs	r2, r1
 800190a:	1cbb      	adds	r3, r7, #2
 800190c:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800190e:	230a      	movs	r3, #10
 8001910:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8001912:	e002      	b.n	800191a <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	3b01      	subs	r3, #1
 8001918:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1f9      	bne.n	8001914 <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8001920:	1cbb      	adds	r3, r7, #2
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	4a06      	ldr	r2, [pc, #24]	; (8001940 <PCD_GET_EP_DBUF1_CNT+0x40>)
 8001928:	4694      	mov	ip, r2
 800192a:	4463      	add	r3, ip
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	0c1b      	lsrs	r3, r3, #16
 8001930:	b29b      	uxth	r3, r3
 8001932:	059b      	lsls	r3, r3, #22
 8001934:	0d9b      	lsrs	r3, r3, #22
 8001936:	b29b      	uxth	r3, r3
}
 8001938:	0018      	movs	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	b004      	add	sp, #16
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40009800 	.word	0x40009800

08001944 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b087      	sub	sp, #28
 8001948:	af02      	add	r7, sp, #8
 800194a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e0ea      	b.n	8001b2c <HAL_PCD_Init+0x1e8>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a76      	ldr	r2, [pc, #472]	; (8001b34 <HAL_PCD_Init+0x1f0>)
 800195a:	5c9b      	ldrb	r3, [r3, r2]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d108      	bne.n	8001974 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	23a5      	movs	r3, #165	; 0xa5
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	2100      	movs	r1, #0
 800196a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	0018      	movs	r0, r3
 8001970:	f008 fc80 	bl	800a274 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a6f      	ldr	r2, [pc, #444]	; (8001b34 <HAL_PCD_Init+0x1f0>)
 8001978:	2103      	movs	r1, #3
 800197a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	0018      	movs	r0, r3
 8001982:	f004 f961 	bl	8005c48 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001986:	230f      	movs	r3, #15
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
 800198e:	e049      	b.n	8001a24 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001990:	200f      	movs	r0, #15
 8001992:	183b      	adds	r3, r7, r0
 8001994:	781a      	ldrb	r2, [r3, #0]
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	0013      	movs	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	189b      	adds	r3, r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	18cb      	adds	r3, r1, r3
 80019a2:	3315      	adds	r3, #21
 80019a4:	2201      	movs	r2, #1
 80019a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019a8:	183b      	adds	r3, r7, r0
 80019aa:	781a      	ldrb	r2, [r3, #0]
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	0013      	movs	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	189b      	adds	r3, r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	18cb      	adds	r3, r1, r3
 80019b8:	3314      	adds	r3, #20
 80019ba:	183a      	adds	r2, r7, r0
 80019bc:	7812      	ldrb	r2, [r2, #0]
 80019be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019c0:	183b      	adds	r3, r7, r0
 80019c2:	781a      	ldrb	r2, [r3, #0]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	0013      	movs	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	189b      	adds	r3, r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	18cb      	adds	r3, r1, r3
 80019d0:	3317      	adds	r3, #23
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019d6:	183b      	adds	r3, r7, r0
 80019d8:	781a      	ldrb	r2, [r3, #0]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	0013      	movs	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	189b      	adds	r3, r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	18cb      	adds	r3, r1, r3
 80019e6:	3324      	adds	r3, #36	; 0x24
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019ec:	183b      	adds	r3, r7, r0
 80019ee:	781a      	ldrb	r2, [r3, #0]
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	0013      	movs	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	189b      	adds	r3, r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	18cb      	adds	r3, r1, r3
 80019fc:	3328      	adds	r3, #40	; 0x28
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a02:	183b      	adds	r3, r7, r0
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	1c5a      	adds	r2, r3, #1
 8001a0a:	0013      	movs	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	189b      	adds	r3, r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	18cb      	adds	r3, r1, r3
 8001a14:	3304      	adds	r3, #4
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a1a:	183b      	adds	r3, r7, r0
 8001a1c:	781a      	ldrb	r2, [r3, #0]
 8001a1e:	183b      	adds	r3, r7, r0
 8001a20:	3201      	adds	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	791b      	ldrb	r3, [r3, #4]
 8001a28:	210f      	movs	r1, #15
 8001a2a:	187a      	adds	r2, r7, r1
 8001a2c:	7812      	ldrb	r2, [r2, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d3ae      	bcc.n	8001990 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a32:	187b      	adds	r3, r7, r1
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
 8001a38:	e056      	b.n	8001ae8 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a3a:	240f      	movs	r4, #15
 8001a3c:	193b      	adds	r3, r7, r4
 8001a3e:	781a      	ldrb	r2, [r3, #0]
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	2356      	movs	r3, #86	; 0x56
 8001a44:	33ff      	adds	r3, #255	; 0xff
 8001a46:	0019      	movs	r1, r3
 8001a48:	0013      	movs	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	189b      	adds	r3, r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	18c3      	adds	r3, r0, r3
 8001a52:	185b      	adds	r3, r3, r1
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a58:	193b      	adds	r3, r7, r4
 8001a5a:	781a      	ldrb	r2, [r3, #0]
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	23aa      	movs	r3, #170	; 0xaa
 8001a60:	0059      	lsls	r1, r3, #1
 8001a62:	0013      	movs	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	189b      	adds	r3, r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	18c3      	adds	r3, r0, r3
 8001a6c:	185b      	adds	r3, r3, r1
 8001a6e:	193a      	adds	r2, r7, r4
 8001a70:	7812      	ldrb	r2, [r2, #0]
 8001a72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a74:	193b      	adds	r3, r7, r4
 8001a76:	781a      	ldrb	r2, [r3, #0]
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	2358      	movs	r3, #88	; 0x58
 8001a7c:	33ff      	adds	r3, #255	; 0xff
 8001a7e:	0019      	movs	r1, r3
 8001a80:	0013      	movs	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	189b      	adds	r3, r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	18c3      	adds	r3, r0, r3
 8001a8a:	185b      	adds	r3, r3, r1
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a90:	193b      	adds	r3, r7, r4
 8001a92:	781a      	ldrb	r2, [r3, #0]
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	23b2      	movs	r3, #178	; 0xb2
 8001a98:	0059      	lsls	r1, r3, #1
 8001a9a:	0013      	movs	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	189b      	adds	r3, r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	18c3      	adds	r3, r0, r3
 8001aa4:	185b      	adds	r3, r3, r1
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001aaa:	193b      	adds	r3, r7, r4
 8001aac:	781a      	ldrb	r2, [r3, #0]
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	23b4      	movs	r3, #180	; 0xb4
 8001ab2:	0059      	lsls	r1, r3, #1
 8001ab4:	0013      	movs	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	189b      	adds	r3, r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	18c3      	adds	r3, r0, r3
 8001abe:	185b      	adds	r3, r3, r1
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ac4:	193b      	adds	r3, r7, r4
 8001ac6:	781a      	ldrb	r2, [r3, #0]
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	23b6      	movs	r3, #182	; 0xb6
 8001acc:	0059      	lsls	r1, r3, #1
 8001ace:	0013      	movs	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	189b      	adds	r3, r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	18c3      	adds	r3, r0, r3
 8001ad8:	185b      	adds	r3, r3, r1
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ade:	193b      	adds	r3, r7, r4
 8001ae0:	781a      	ldrb	r2, [r3, #0]
 8001ae2:	193b      	adds	r3, r7, r4
 8001ae4:	3201      	adds	r2, #1
 8001ae6:	701a      	strb	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	791b      	ldrb	r3, [r3, #4]
 8001aec:	220f      	movs	r2, #15
 8001aee:	18ba      	adds	r2, r7, r2
 8001af0:	7812      	ldrb	r2, [r2, #0]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d3a1      	bcc.n	8001a3a <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	466a      	mov	r2, sp
 8001afe:	7c19      	ldrb	r1, [r3, #16]
 8001b00:	7011      	strb	r1, [r2, #0]
 8001b02:	6859      	ldr	r1, [r3, #4]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	f004 f8d7 	bl	8005cba <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a07      	ldr	r2, [pc, #28]	; (8001b34 <HAL_PCD_Init+0x1f0>)
 8001b16:	2101      	movs	r1, #1
 8001b18:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	7b1b      	ldrb	r3, [r3, #12]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d103      	bne.n	8001b2a <HAL_PCD_Init+0x1e6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	0018      	movs	r0, r3
 8001b26:	f001 fbfb 	bl	8003320 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b005      	add	sp, #20
 8001b32:	bd90      	pop	{r4, r7, pc}
 8001b34:	00000295 	.word	0x00000295

08001b38 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	23a5      	movs	r3, #165	; 0xa5
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	5cd3      	ldrb	r3, [r2, r3]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_PCD_Start+0x18>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e014      	b.n	8001b7a <HAL_PCD_Start+0x42>
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	23a5      	movs	r3, #165	; 0xa5
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	2101      	movs	r1, #1
 8001b58:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f004 f85e 	bl	8005c20 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f005 fe68 	bl	800783e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	23a5      	movs	r3, #165	; 0xa5
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	2100      	movs	r1, #0
 8001b76:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b002      	add	sp, #8
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	0018      	movs	r0, r3
 8001b92:	f005 fe64 	bl	800785e <USB_ReadInterrupts>
 8001b96:	0003      	movs	r3, r0
 8001b98:	60fb      	str	r3, [r7, #12]

  /* check if this is an USB pending IT */
  if ((SYSCFG->IT_LINE_SR[8] & (0x1U << 2)) == 0U)
 8001b9a:	4a7c      	ldr	r2, [pc, #496]	; (8001d8c <HAL_PCD_IRQHandler+0x208>)
 8001b9c:	23a0      	movs	r3, #160	; 0xa0
 8001b9e:	58d3      	ldr	r3, [r2, r3]
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d100      	bne.n	8001ba8 <HAL_PCD_IRQHandler+0x24>
 8001ba6:	e0ed      	b.n	8001d84 <HAL_PCD_IRQHandler+0x200>
  {
    return;
  }

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	2380      	movs	r3, #128	; 0x80
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d004      	beq.n	8001bbc <HAL_PCD_IRQHandler+0x38>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f000 fb35 	bl	8002224 <PCD_EP_ISR_Handler>

    return;
 8001bba:	e0e4      	b.n	8001d86 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d011      	beq.n	8001bea <HAL_PCD_IRQHandler+0x66>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	496f      	ldr	r1, [pc, #444]	; (8001d90 <HAL_PCD_IRQHandler+0x20c>)
 8001bd2:	400a      	ands	r2, r1
 8001bd4:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f008 fbee 	bl	800a3ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2100      	movs	r1, #0
 8001be2:	0018      	movs	r0, r3
 8001be4:	f000 f8e4 	bl	8001db0 <HAL_PCD_SetAddress>

    return;
 8001be8:	e0cd      	b.n	8001d86 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	01db      	lsls	r3, r3, #7
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d008      	beq.n	8001c06 <HAL_PCD_IRQHandler+0x82>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4965      	ldr	r1, [pc, #404]	; (8001d94 <HAL_PCD_IRQHandler+0x210>)
 8001c00:	400a      	ands	r2, r1
 8001c02:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 8001c04:	e0bf      	b.n	8001d86 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	019b      	lsls	r3, r3, #6
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d008      	beq.n	8001c22 <HAL_PCD_IRQHandler+0x9e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	495f      	ldr	r1, [pc, #380]	; (8001d98 <HAL_PCD_IRQHandler+0x214>)
 8001c1c:	400a      	ands	r2, r1
 8001c1e:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 8001c20:	e0b1      	b.n	8001d86 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	015b      	lsls	r3, r3, #5
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d02c      	beq.n	8001c86 <HAL_PCD_IRQHandler+0x102>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2104      	movs	r1, #4
 8001c38:	438a      	bics	r2, r1
 8001c3a:	641a      	str	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2108      	movs	r1, #8
 8001c48:	438a      	bics	r2, r1
 8001c4a:	641a      	str	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	23b3      	movs	r3, #179	; 0xb3
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	5cd3      	ldrb	r3, [r2, r3]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d109      	bne.n	8001c6c <HAL_PCD_IRQHandler+0xe8>
    {
      hpcd->LPM_State = LPM_L0;
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	23b3      	movs	r3, #179	; 0xb3
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	2100      	movs	r1, #0
 8001c60:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2100      	movs	r1, #0
 8001c66:	0018      	movs	r0, r3
 8001c68:	f008 fe26 	bl	800a8b8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f008 fbe4 	bl	800a43c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4947      	ldr	r1, [pc, #284]	; (8001d9c <HAL_PCD_IRQHandler+0x218>)
 8001c80:	400a      	ands	r2, r1
 8001c82:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 8001c84:	e07f      	b.n	8001d86 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d01c      	beq.n	8001cca <HAL_PCD_IRQHandler+0x146>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2108      	movs	r1, #8
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	493d      	ldr	r1, [pc, #244]	; (8001da0 <HAL_PCD_IRQHandler+0x21c>)
 8001cac:	400a      	ands	r2, r1
 8001cae:	645a      	str	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2104      	movs	r1, #4
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f008 fb9e 	bl	800a404 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001cc8:	e05d      	b.n	8001d86 <HAL_PCD_IRQHandler+0x202>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2280      	movs	r2, #128	; 0x80
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d038      	beq.n	8001d44 <HAL_PCD_IRQHandler+0x1c0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4931      	ldr	r1, [pc, #196]	; (8001da4 <HAL_PCD_IRQHandler+0x220>)
 8001cde:	400a      	ands	r2, r1
 8001ce0:	645a      	str	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	23b3      	movs	r3, #179	; 0xb3
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	5cd3      	ldrb	r3, [r2, r3]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d125      	bne.n	8001d3a <HAL_PCD_IRQHandler+0x1b6>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2104      	movs	r1, #4
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	641a      	str	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2108      	movs	r1, #8
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	23b3      	movs	r3, #179	; 0xb3
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	2101      	movs	r1, #1
 8001d16:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1e:	089b      	lsrs	r3, r3, #2
 8001d20:	223c      	movs	r2, #60	; 0x3c
 8001d22:	4013      	ands	r3, r2
 8001d24:	0019      	movs	r1, r3
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	23b4      	movs	r3, #180	; 0xb4
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2101      	movs	r1, #1
 8001d32:	0018      	movs	r0, r3
 8001d34:	f008 fdc0 	bl	800a8b8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001d38:	e025      	b.n	8001d86 <HAL_PCD_IRQHandler+0x202>
      HAL_PCD_SuspendCallback(hpcd);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f008 fb61 	bl	800a404 <HAL_PCD_SuspendCallback>
    return;
 8001d42:	e020      	b.n	8001d86 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	2380      	movs	r3, #128	; 0x80
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d00c      	beq.n	8001d68 <HAL_PCD_IRQHandler+0x1e4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4913      	ldr	r1, [pc, #76]	; (8001da8 <HAL_PCD_IRQHandler+0x224>)
 8001d5a:	400a      	ands	r2, r1
 8001d5c:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	0018      	movs	r0, r3
 8001d62:	f008 fb1b 	bl	800a39c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001d66:	e00e      	b.n	8001d86 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	2380      	movs	r3, #128	; 0x80
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d009      	beq.n	8001d86 <HAL_PCD_IRQHandler+0x202>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	490b      	ldr	r1, [pc, #44]	; (8001dac <HAL_PCD_IRQHandler+0x228>)
 8001d7e:	400a      	ands	r2, r1
 8001d80:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 8001d82:	e000      	b.n	8001d86 <HAL_PCD_IRQHandler+0x202>
    return;
 8001d84:	46c0      	nop			; (mov r8, r8)
  }
}
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b004      	add	sp, #16
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40010000 	.word	0x40010000
 8001d90:	0000fbff 	.word	0x0000fbff
 8001d94:	0000bfff 	.word	0x0000bfff
 8001d98:	0000dfff 	.word	0x0000dfff
 8001d9c:	0000efff 	.word	0x0000efff
 8001da0:	0000f7ff 	.word	0x0000f7ff
 8001da4:	0000ff7f 	.word	0x0000ff7f
 8001da8:	0000fdff 	.word	0x0000fdff
 8001dac:	0000feff 	.word	0x0000feff

08001db0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	000a      	movs	r2, r1
 8001dba:	1cfb      	adds	r3, r7, #3
 8001dbc:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	23a5      	movs	r3, #165	; 0xa5
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	5cd3      	ldrb	r3, [r2, r3]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d101      	bne.n	8001dce <HAL_PCD_SetAddress+0x1e>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e016      	b.n	8001dfc <HAL_PCD_SetAddress+0x4c>
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	23a5      	movs	r3, #165	; 0xa5
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	1cfa      	adds	r2, r7, #3
 8001ddc:	7812      	ldrb	r2, [r2, #0]
 8001dde:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	1cfb      	adds	r3, r7, #3
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	0019      	movs	r1, r3
 8001dea:	0010      	movs	r0, r2
 8001dec:	f005 fd14 	bl	8007818 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	23a5      	movs	r3, #165	; 0xa5
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	2100      	movs	r1, #0
 8001df8:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b002      	add	sp, #8
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e04:	b590      	push	{r4, r7, lr}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	000c      	movs	r4, r1
 8001e0e:	0010      	movs	r0, r2
 8001e10:	0019      	movs	r1, r3
 8001e12:	1cfb      	adds	r3, r7, #3
 8001e14:	1c22      	adds	r2, r4, #0
 8001e16:	701a      	strb	r2, [r3, #0]
 8001e18:	003b      	movs	r3, r7
 8001e1a:	1c02      	adds	r2, r0, #0
 8001e1c:	801a      	strh	r2, [r3, #0]
 8001e1e:	1cbb      	adds	r3, r7, #2
 8001e20:	1c0a      	adds	r2, r1, #0
 8001e22:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e24:	230b      	movs	r3, #11
 8001e26:	18fb      	adds	r3, r7, r3
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e2c:	1cfb      	adds	r3, r7, #3
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	b25b      	sxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	da10      	bge.n	8001e58 <HAL_PCD_EP_Open+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e36:	1cfb      	adds	r3, r7, #3
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2207      	movs	r2, #7
 8001e3c:	401a      	ands	r2, r3
 8001e3e:	0013      	movs	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	189b      	adds	r3, r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	3310      	adds	r3, #16
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	18d3      	adds	r3, r2, r3
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2201      	movs	r2, #1
 8001e54:	705a      	strb	r2, [r3, #1]
 8001e56:	e010      	b.n	8001e7a <HAL_PCD_EP_Open+0x76>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e58:	1cfb      	adds	r3, r7, #3
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	401a      	ands	r2, r3
 8001e60:	0013      	movs	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	189b      	adds	r3, r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	3351      	adds	r3, #81	; 0x51
 8001e6a:	33ff      	adds	r3, #255	; 0xff
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	18d3      	adds	r3, r2, r3
 8001e70:	3304      	adds	r3, #4
 8001e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e7a:	1cfb      	adds	r3, r7, #3
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2207      	movs	r2, #7
 8001e80:	4013      	ands	r3, r2
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e88:	003b      	movs	r3, r7
 8001e8a:	881a      	ldrh	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1cba      	adds	r2, r7, #2
 8001e94:	7812      	ldrb	r2, [r2, #0]
 8001e96:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e98:	1cbb      	adds	r3, r7, #2
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d102      	bne.n	8001ea6 <HAL_PCD_EP_Open+0xa2>
  {
    ep->data_pid_start = 0U;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	23a5      	movs	r3, #165	; 0xa5
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	5cd3      	ldrb	r3, [r2, r3]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d101      	bne.n	8001eb6 <HAL_PCD_EP_Open+0xb2>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e013      	b.n	8001ede <HAL_PCD_EP_Open+0xda>
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	23a5      	movs	r3, #165	; 0xa5
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	0011      	movs	r1, r2
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f003 ff21 	bl	8005d10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	23a5      	movs	r3, #165	; 0xa5
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	54d1      	strb	r1, [r2, r3]

  return ret;
 8001ed8:	230b      	movs	r3, #11
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	781b      	ldrb	r3, [r3, #0]
}
 8001ede:	0018      	movs	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	b005      	add	sp, #20
 8001ee4:	bd90      	pop	{r4, r7, pc}

08001ee6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b084      	sub	sp, #16
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	000a      	movs	r2, r1
 8001ef0:	1cfb      	adds	r3, r7, #3
 8001ef2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ef4:	1cfb      	adds	r3, r7, #3
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	b25b      	sxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	da10      	bge.n	8001f20 <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001efe:	1cfb      	adds	r3, r7, #3
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2207      	movs	r2, #7
 8001f04:	401a      	ands	r2, r3
 8001f06:	0013      	movs	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	189b      	adds	r3, r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	3310      	adds	r3, #16
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	18d3      	adds	r3, r2, r3
 8001f14:	3304      	adds	r3, #4
 8001f16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	705a      	strb	r2, [r3, #1]
 8001f1e:	e010      	b.n	8001f42 <HAL_PCD_EP_Close+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f20:	1cfb      	adds	r3, r7, #3
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2207      	movs	r2, #7
 8001f26:	401a      	ands	r2, r3
 8001f28:	0013      	movs	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	189b      	adds	r3, r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	3351      	adds	r3, #81	; 0x51
 8001f32:	33ff      	adds	r3, #255	; 0xff
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	18d3      	adds	r3, r2, r3
 8001f38:	3304      	adds	r3, #4
 8001f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f42:	1cfb      	adds	r3, r7, #3
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2207      	movs	r2, #7
 8001f48:	4013      	ands	r3, r2
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	23a5      	movs	r3, #165	; 0xa5
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	5cd3      	ldrb	r3, [r2, r3]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_PCD_EP_Close+0x7a>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e011      	b.n	8001f84 <HAL_PCD_EP_Close+0x9e>
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	23a5      	movs	r3, #165	; 0xa5
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	2101      	movs	r1, #1
 8001f68:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	0011      	movs	r1, r2
 8001f72:	0018      	movs	r0, r3
 8001f74:	f004 fa00 	bl	8006378 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	23a5      	movs	r3, #165	; 0xa5
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	2100      	movs	r1, #0
 8001f80:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	0018      	movs	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b004      	add	sp, #16
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	200b      	movs	r0, #11
 8001f9a:	183b      	adds	r3, r7, r0
 8001f9c:	1c0a      	adds	r2, r1, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fa0:	0001      	movs	r1, r0
 8001fa2:	187b      	adds	r3, r7, r1
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2207      	movs	r2, #7
 8001fa8:	401a      	ands	r2, r3
 8001faa:	0013      	movs	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	189b      	adds	r3, r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	3351      	adds	r3, #81	; 0x51
 8001fb4:	33ff      	adds	r3, #255	; 0xff
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	18d3      	adds	r3, r2, r3
 8001fba:	3304      	adds	r3, #4
 8001fbc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fd6:	187b      	adds	r3, r7, r1
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2207      	movs	r2, #7
 8001fdc:	4013      	ands	r3, r2
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	0011      	movs	r1, r2
 8001fec:	0018      	movs	r0, r3
 8001fee:	f004 fb29 	bl	8006644 <USB_EPStartXfer>

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	b006      	add	sp, #24
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	000a      	movs	r2, r1
 8002006:	1cfb      	adds	r3, r7, #3
 8002008:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800200a:	1cfb      	adds	r3, r7, #3
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2207      	movs	r2, #7
 8002010:	401a      	ands	r2, r3
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	23b8      	movs	r3, #184	; 0xb8
 8002016:	0059      	lsls	r1, r3, #1
 8002018:	0013      	movs	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	189b      	adds	r3, r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	18c3      	adds	r3, r0, r3
 8002022:	185b      	adds	r3, r3, r1
 8002024:	681b      	ldr	r3, [r3, #0]
}
 8002026:	0018      	movs	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	b002      	add	sp, #8
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b086      	sub	sp, #24
 8002032:	af00      	add	r7, sp, #0
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	603b      	str	r3, [r7, #0]
 800203a:	200b      	movs	r0, #11
 800203c:	183b      	adds	r3, r7, r0
 800203e:	1c0a      	adds	r2, r1, #0
 8002040:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002042:	183b      	adds	r3, r7, r0
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2207      	movs	r2, #7
 8002048:	401a      	ands	r2, r3
 800204a:	0013      	movs	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	189b      	adds	r3, r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	3310      	adds	r3, #16
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	18d3      	adds	r3, r2, r3
 8002058:	3304      	adds	r3, #4
 800205a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2224      	movs	r2, #36	; 0x24
 800206c:	2101      	movs	r1, #1
 800206e:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	2200      	movs	r2, #0
 800207a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2201      	movs	r2, #1
 8002080:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002082:	183b      	adds	r3, r7, r0
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2207      	movs	r2, #7
 8002088:	4013      	ands	r3, r2
 800208a:	b2da      	uxtb	r2, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	0011      	movs	r1, r2
 8002098:	0018      	movs	r0, r3
 800209a:	f004 fad3 	bl	8006644 <USB_EPStartXfer>

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	0018      	movs	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b006      	add	sp, #24
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	000a      	movs	r2, r1
 80020b2:	1cfb      	adds	r3, r7, #3
 80020b4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020b6:	1cfb      	adds	r3, r7, #3
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2207      	movs	r2, #7
 80020bc:	4013      	ands	r3, r2
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	7912      	ldrb	r2, [r2, #4]
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e048      	b.n	800215c <HAL_PCD_EP_SetStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020ca:	1cfb      	adds	r3, r7, #3
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	b25b      	sxtb	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	da10      	bge.n	80020f6 <HAL_PCD_EP_SetStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d4:	1cfb      	adds	r3, r7, #3
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2207      	movs	r2, #7
 80020da:	401a      	ands	r2, r3
 80020dc:	0013      	movs	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	189b      	adds	r3, r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	3310      	adds	r3, #16
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	18d3      	adds	r3, r2, r3
 80020ea:	3304      	adds	r3, #4
 80020ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2201      	movs	r2, #1
 80020f2:	705a      	strb	r2, [r3, #1]
 80020f4:	e00e      	b.n	8002114 <HAL_PCD_EP_SetStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020f6:	1cfb      	adds	r3, r7, #3
 80020f8:	781a      	ldrb	r2, [r3, #0]
 80020fa:	0013      	movs	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	189b      	adds	r3, r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	3351      	adds	r3, #81	; 0x51
 8002104:	33ff      	adds	r3, #255	; 0xff
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	18d3      	adds	r3, r2, r3
 800210a:	3304      	adds	r3, #4
 800210c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2201      	movs	r2, #1
 8002118:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800211a:	1cfb      	adds	r3, r7, #3
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2207      	movs	r2, #7
 8002120:	4013      	ands	r3, r2
 8002122:	b2da      	uxtb	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	23a5      	movs	r3, #165	; 0xa5
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	5cd3      	ldrb	r3, [r2, r3]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <HAL_PCD_EP_SetStall+0x90>
 8002134:	2302      	movs	r3, #2
 8002136:	e011      	b.n	800215c <HAL_PCD_EP_SetStall+0xb4>
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	23a5      	movs	r3, #165	; 0xa5
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	2101      	movs	r1, #1
 8002140:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	0011      	movs	r1, r2
 800214a:	0018      	movs	r0, r3
 800214c:	f005 fa90 	bl	8007670 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	23a5      	movs	r3, #165	; 0xa5
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	2100      	movs	r1, #0
 8002158:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	0018      	movs	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	b004      	add	sp, #16
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	000a      	movs	r2, r1
 800216e:	1cfb      	adds	r3, r7, #3
 8002170:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002172:	1cfb      	adds	r3, r7, #3
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	220f      	movs	r2, #15
 8002178:	4013      	ands	r3, r2
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	7912      	ldrb	r2, [r2, #4]
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e04a      	b.n	800221c <HAL_PCD_EP_ClrStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002186:	1cfb      	adds	r3, r7, #3
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	b25b      	sxtb	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	da10      	bge.n	80021b2 <HAL_PCD_EP_ClrStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002190:	1cfb      	adds	r3, r7, #3
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2207      	movs	r2, #7
 8002196:	401a      	ands	r2, r3
 8002198:	0013      	movs	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	189b      	adds	r3, r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	3310      	adds	r3, #16
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	18d3      	adds	r3, r2, r3
 80021a6:	3304      	adds	r3, #4
 80021a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2201      	movs	r2, #1
 80021ae:	705a      	strb	r2, [r3, #1]
 80021b0:	e010      	b.n	80021d4 <HAL_PCD_EP_ClrStall+0x70>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021b2:	1cfb      	adds	r3, r7, #3
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2207      	movs	r2, #7
 80021b8:	401a      	ands	r2, r3
 80021ba:	0013      	movs	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	189b      	adds	r3, r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	3351      	adds	r3, #81	; 0x51
 80021c4:	33ff      	adds	r3, #255	; 0xff
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	18d3      	adds	r3, r2, r3
 80021ca:	3304      	adds	r3, #4
 80021cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021da:	1cfb      	adds	r3, r7, #3
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2207      	movs	r2, #7
 80021e0:	4013      	ands	r3, r2
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	23a5      	movs	r3, #165	; 0xa5
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	5cd3      	ldrb	r3, [r2, r3]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_PCD_EP_ClrStall+0x94>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e011      	b.n	800221c <HAL_PCD_EP_ClrStall+0xb8>
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	23a5      	movs	r3, #165	; 0xa5
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	2101      	movs	r1, #1
 8002200:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	0011      	movs	r1, r2
 800220a:	0018      	movs	r0, r3
 800220c:	f005 fa72 	bl	80076f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	23a5      	movs	r3, #165	; 0xa5
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	2100      	movs	r1, #0
 8002218:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	0018      	movs	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	b004      	add	sp, #16
 8002222:	bd80      	pop	{r7, pc}

08002224 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002224:	b5b0      	push	{r4, r5, r7, lr}
 8002226:	b08e      	sub	sp, #56	; 0x38
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800222c:	e362      	b.n	80028f4 <PCD_EP_ISR_Handler+0x6d0>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002234:	2022      	movs	r0, #34	; 0x22
 8002236:	183b      	adds	r3, r7, r0
 8002238:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 800223a:	183b      	adds	r3, r7, r0
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	b2da      	uxtb	r2, r3
 8002240:	2421      	movs	r4, #33	; 0x21
 8002242:	193b      	adds	r3, r7, r4
 8002244:	210f      	movs	r1, #15
 8002246:	400a      	ands	r2, r1
 8002248:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800224a:	193b      	adds	r3, r7, r4
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d000      	beq.n	8002254 <PCD_EP_ISR_Handler+0x30>
 8002252:	e12d      	b.n	80024b0 <PCD_EP_ISR_Handler+0x28c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002254:	183b      	adds	r3, r7, r0
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	2210      	movs	r2, #16
 800225a:	4013      	ands	r3, r2
 800225c:	d140      	bne.n	80022e0 <PCD_EP_ISR_Handler+0xbc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4ac6      	ldr	r2, [pc, #792]	; (8002580 <PCD_EP_ISR_Handler+0x35c>)
 8002266:	4013      	ands	r3, r2
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	2180      	movs	r1, #128	; 0x80
 8002272:	0209      	lsls	r1, r1, #8
 8002274:	430a      	orrs	r2, r1
 8002276:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3314      	adds	r3, #20
 800227c:	637b      	str	r3, [r7, #52]	; 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800227e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4abf      	ldr	r2, [pc, #764]	; (8002584 <PCD_EP_ISR_Handler+0x360>)
 8002286:	4694      	mov	ip, r2
 8002288:	4463      	add	r3, ip
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0c1b      	lsrs	r3, r3, #16
 800228e:	059b      	lsls	r3, r3, #22
 8002290:	0d9a      	lsrs	r2, r3, #22
 8002292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002294:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002298:	695a      	ldr	r2, [r3, #20]
 800229a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	18d2      	adds	r2, r2, r3
 80022a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2100      	movs	r1, #0
 80022a8:	0018      	movs	r0, r3
 80022aa:	f008 f859 	bl	800a360 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	7c5b      	ldrb	r3, [r3, #17]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d100      	bne.n	80022ba <PCD_EP_ISR_Handler+0x96>
 80022b8:	e31c      	b.n	80028f4 <PCD_EP_ISR_Handler+0x6d0>
 80022ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d000      	beq.n	80022c4 <PCD_EP_ISR_Handler+0xa0>
 80022c2:	e317      	b.n	80028f4 <PCD_EP_ISR_Handler+0x6d0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	7c5b      	ldrb	r3, [r3, #17]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2280      	movs	r2, #128	; 0x80
 80022cc:	4252      	negs	r2, r2
 80022ce:	4313      	orrs	r3, r2
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	64da      	str	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	745a      	strb	r2, [r3, #17]
 80022de:	e309      	b.n	80028f4 <PCD_EP_ISR_Handler+0x6d0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3355      	adds	r3, #85	; 0x55
 80022e4:	33ff      	adds	r3, #255	; 0xff
 80022e6:	637b      	str	r3, [r7, #52]	; 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	2132      	movs	r1, #50	; 0x32
 80022f0:	187b      	adds	r3, r7, r1
 80022f2:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80022f4:	187b      	adds	r3, r7, r1
 80022f6:	881a      	ldrh	r2, [r3, #0]
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	4013      	ands	r3, r2
 80022fe:	d02a      	beq.n	8002356 <PCD_EP_ISR_Handler+0x132>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	b29b      	uxth	r3, r3
 800230a:	0019      	movs	r1, r3
 800230c:	0010      	movs	r0, r2
 800230e:	f7ff fab3 	bl	8001878 <PCD_GET_EP_RX_CNT>
 8002312:	0003      	movs	r3, r0
 8002314:	001a      	movs	r2, r3
 8002316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002318:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	22a7      	movs	r2, #167	; 0xa7
 8002322:	0092      	lsls	r2, r2, #2
 8002324:	1899      	adds	r1, r3, r2
 8002326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002328:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800232a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800232c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800232e:	b29b      	uxth	r3, r3
 8002330:	f005 fb18 	bl	8007964 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a93      	ldr	r2, [pc, #588]	; (8002588 <PCD_EP_ISR_Handler+0x364>)
 800233c:	4013      	ands	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	2180      	movs	r1, #128	; 0x80
 8002348:	430a      	orrs	r2, r1
 800234a:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	0018      	movs	r0, r3
 8002350:	f007 ffd0 	bl	800a2f4 <HAL_PCD_SetupStageCallback>
 8002354:	e2ce      	b.n	80028f4 <PCD_EP_ISR_Handler+0x6d0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8002356:	2332      	movs	r3, #50	; 0x32
 8002358:	18fb      	adds	r3, r7, r3
 800235a:	2200      	movs	r2, #0
 800235c:	5e9b      	ldrsh	r3, [r3, r2]
 800235e:	2b00      	cmp	r3, #0
 8002360:	db00      	blt.n	8002364 <PCD_EP_ISR_Handler+0x140>
 8002362:	e2c7      	b.n	80028f4 <PCD_EP_ISR_Handler+0x6d0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a87      	ldr	r2, [pc, #540]	; (8002588 <PCD_EP_ISR_Handler+0x364>)
 800236c:	4013      	ands	r3, r2
 800236e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002376:	2180      	movs	r1, #128	; 0x80
 8002378:	430a      	orrs	r2, r1
 800237a:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	b29b      	uxth	r3, r3
 8002386:	0019      	movs	r1, r3
 8002388:	0010      	movs	r0, r2
 800238a:	f7ff fa75 	bl	8001878 <PCD_GET_EP_RX_CNT>
 800238e:	0003      	movs	r3, r0
 8002390:	001a      	movs	r2, r3
 8002392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002394:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d01a      	beq.n	80023d4 <PCD_EP_ISR_Handler+0x1b0>
 800239e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d016      	beq.n	80023d4 <PCD_EP_ISR_Handler+0x1b0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ac:	6959      	ldr	r1, [r3, #20]
 80023ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023b0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80023b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023b4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	f005 fad4 	bl	8007964 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80023bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023be:	695a      	ldr	r2, [r3, #20]
 80023c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	18d2      	adds	r2, r2, r3
 80023c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2100      	movs	r1, #0
 80023ce:	0018      	movs	r0, r3
 80023d0:	f007 ffa5 	bl	800a31e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	2132      	movs	r1, #50	; 0x32
 80023dc:	187b      	adds	r3, r7, r1
 80023de:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80023e0:	187b      	adds	r3, r7, r1
 80023e2:	881a      	ldrh	r2, [r3, #0]
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	4013      	ands	r3, r2
 80023ea:	d000      	beq.n	80023ee <PCD_EP_ISR_Handler+0x1ca>
 80023ec:	e282      	b.n	80028f4 <PCD_EP_ISR_Handler+0x6d0>
 80023ee:	187b      	adds	r3, r7, r1
 80023f0:	881a      	ldrh	r2, [r3, #0]
 80023f2:	23c0      	movs	r3, #192	; 0xc0
 80023f4:	019b      	lsls	r3, r3, #6
 80023f6:	401a      	ands	r2, r3
 80023f8:	23c0      	movs	r3, #192	; 0xc0
 80023fa:	019b      	lsls	r3, r3, #6
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d100      	bne.n	8002402 <PCD_EP_ISR_Handler+0x1de>
 8002400:	e278      	b.n	80028f4 <PCD_EP_ISR_Handler+0x6d0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002402:	4b60      	ldr	r3, [pc, #384]	; (8002584 <PCD_EP_ISR_Handler+0x360>)
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	4b5f      	ldr	r3, [pc, #380]	; (8002584 <PCD_EP_ISR_Handler+0x360>)
 8002408:	0192      	lsls	r2, r2, #6
 800240a:	0992      	lsrs	r2, r2, #6
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	2b3e      	cmp	r3, #62	; 0x3e
 8002414:	d916      	bls.n	8002444 <PCD_EP_ISR_Handler+0x220>
 8002416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	221f      	movs	r2, #31
 8002424:	4013      	ands	r3, r2
 8002426:	d102      	bne.n	800242e <PCD_EP_ISR_Handler+0x20a>
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	3b01      	subs	r3, #1
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	4b55      	ldr	r3, [pc, #340]	; (8002584 <PCD_EP_ISR_Handler+0x360>)
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	069b      	lsls	r3, r3, #26
 8002436:	431a      	orrs	r2, r3
 8002438:	4b52      	ldr	r3, [pc, #328]	; (8002584 <PCD_EP_ISR_Handler+0x360>)
 800243a:	2180      	movs	r1, #128	; 0x80
 800243c:	0609      	lsls	r1, r1, #24
 800243e:	430a      	orrs	r2, r1
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	e01e      	b.n	8002482 <PCD_EP_ISR_Handler+0x25e>
 8002444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d107      	bne.n	800245c <PCD_EP_ISR_Handler+0x238>
 800244c:	4b4d      	ldr	r3, [pc, #308]	; (8002584 <PCD_EP_ISR_Handler+0x360>)
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	4b4c      	ldr	r3, [pc, #304]	; (8002584 <PCD_EP_ISR_Handler+0x360>)
 8002452:	2180      	movs	r1, #128	; 0x80
 8002454:	0609      	lsls	r1, r1, #24
 8002456:	430a      	orrs	r2, r1
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	e012      	b.n	8002482 <PCD_EP_ISR_Handler+0x25e>
 800245c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	085b      	lsrs	r3, r3, #1
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	2201      	movs	r2, #1
 800246a:	4013      	ands	r3, r2
 800246c:	d002      	beq.n	8002474 <PCD_EP_ISR_Handler+0x250>
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	3301      	adds	r3, #1
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	4b43      	ldr	r3, [pc, #268]	; (8002584 <PCD_EP_ISR_Handler+0x360>)
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	069a      	lsls	r2, r3, #26
 800247c:	4b41      	ldr	r3, [pc, #260]	; (8002584 <PCD_EP_ISR_Handler+0x360>)
 800247e:	430a      	orrs	r2, r1
 8002480:	605a      	str	r2, [r3, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a40      	ldr	r2, [pc, #256]	; (800258c <PCD_EP_ISR_Handler+0x368>)
 800248a:	4013      	ands	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	0152      	lsls	r2, r2, #5
 8002494:	4053      	eors	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	2280      	movs	r2, #128	; 0x80
 800249c:	0192      	lsls	r2, r2, #6
 800249e:	4053      	eors	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4939      	ldr	r1, [pc, #228]	; (8002590 <PCD_EP_ISR_Handler+0x36c>)
 80024aa:	430a      	orrs	r2, r1
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	e221      	b.n	80028f4 <PCD_EP_ISR_Handler+0x6d0>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	001a      	movs	r2, r3
 80024b6:	2121      	movs	r1, #33	; 0x21
 80024b8:	187b      	adds	r3, r7, r1
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	18d3      	adds	r3, r2, r3
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	2032      	movs	r0, #50	; 0x32
 80024c4:	183b      	adds	r3, r7, r0
 80024c6:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 80024c8:	183b      	adds	r3, r7, r0
 80024ca:	2200      	movs	r2, #0
 80024cc:	5e9b      	ldrsh	r3, [r3, r2]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	db00      	blt.n	80024d4 <PCD_EP_ISR_Handler+0x2b0>
 80024d2:	e0e2      	b.n	800269a <PCD_EP_ISR_Handler+0x476>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	001a      	movs	r2, r3
 80024da:	187b      	adds	r3, r7, r1
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	18d3      	adds	r3, r2, r3
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a28      	ldr	r2, [pc, #160]	; (8002588 <PCD_EP_ISR_Handler+0x364>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	61fb      	str	r3, [r7, #28]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	001a      	movs	r2, r3
 80024f0:	0008      	movs	r0, r1
 80024f2:	187b      	adds	r3, r7, r1
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	18d3      	adds	r3, r2, r3
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	2180      	movs	r1, #128	; 0x80
 80024fe:	430a      	orrs	r2, r1
 8002500:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002502:	183b      	adds	r3, r7, r0
 8002504:	781a      	ldrb	r2, [r3, #0]
 8002506:	0013      	movs	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	189b      	adds	r3, r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	3351      	adds	r3, #81	; 0x51
 8002510:	33ff      	adds	r3, #255	; 0xff
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	18d3      	adds	r3, r2, r3
 8002516:	3304      	adds	r3, #4
 8002518:	637b      	str	r3, [r7, #52]	; 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800251a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251c:	7b1b      	ldrb	r3, [r3, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d11d      	bne.n	800255e <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	b29b      	uxth	r3, r3
 800252c:	2524      	movs	r5, #36	; 0x24
 800252e:	197c      	adds	r4, r7, r5
 8002530:	0019      	movs	r1, r3
 8002532:	0010      	movs	r0, r2
 8002534:	f7ff f9a0 	bl	8001878 <PCD_GET_EP_RX_CNT>
 8002538:	0003      	movs	r3, r0
 800253a:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 800253c:	002c      	movs	r4, r5
 800253e:	193b      	adds	r3, r7, r4
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d100      	bne.n	8002548 <PCD_EP_ISR_Handler+0x324>
 8002546:	e080      	b.n	800264a <PCD_EP_ISR_Handler+0x426>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800254e:	6959      	ldr	r1, [r3, #20]
 8002550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002552:	88da      	ldrh	r2, [r3, #6]
 8002554:	193b      	adds	r3, r7, r4
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	f005 fa04 	bl	8007964 <USB_ReadPMA>
 800255c:	e075      	b.n	800264a <PCD_EP_ISR_Handler+0x426>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800255e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002560:	78db      	ldrb	r3, [r3, #3]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d116      	bne.n	8002594 <PCD_EP_ISR_Handler+0x370>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002566:	2324      	movs	r3, #36	; 0x24
 8002568:	18fc      	adds	r4, r7, r3
 800256a:	2332      	movs	r3, #50	; 0x32
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	881a      	ldrh	r2, [r3, #0]
 8002570:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	0018      	movs	r0, r3
 8002576:	f000 f9cb 	bl	8002910 <HAL_PCD_EP_DB_Receive>
 800257a:	0003      	movs	r3, r0
 800257c:	8023      	strh	r3, [r4, #0]
 800257e:	e064      	b.n	800264a <PCD_EP_ISR_Handler+0x426>
 8002580:	07ff8f0f 	.word	0x07ff8f0f
 8002584:	40009800 	.word	0x40009800
 8002588:	07ff0f8f 	.word	0x07ff0f8f
 800258c:	07ffbf8f 	.word	0x07ffbf8f
 8002590:	00008080 	.word	0x00008080
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	001a      	movs	r2, r3
 800259a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	18d3      	adds	r3, r2, r3
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4acb      	ldr	r2, [pc, #812]	; (80028d4 <PCD_EP_ISR_Handler+0x6b0>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	001a      	movs	r2, r3
 80025b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	18d3      	adds	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	49c7      	ldr	r1, [pc, #796]	; (80028d8 <PCD_EP_ISR_Handler+0x6b4>)
 80025bc:	430a      	orrs	r2, r1
 80025be:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	001a      	movs	r2, r3
 80025c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	18d3      	adds	r3, r2, r3
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	01db      	lsls	r3, r3, #7
 80025d4:	4013      	ands	r3, r2
 80025d6:	d01c      	beq.n	8002612 <PCD_EP_ISR_Handler+0x3ee>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	2524      	movs	r5, #36	; 0x24
 80025e4:	197c      	adds	r4, r7, r5
 80025e6:	0019      	movs	r1, r3
 80025e8:	0010      	movs	r0, r2
 80025ea:	f7ff f967 	bl	80018bc <PCD_GET_EP_DBUF0_CNT>
 80025ee:	0003      	movs	r3, r0
 80025f0:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 80025f2:	002c      	movs	r4, r5
 80025f4:	193b      	adds	r3, r7, r4
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d026      	beq.n	800264a <PCD_EP_ISR_Handler+0x426>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6818      	ldr	r0, [r3, #0]
 8002600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002602:	6959      	ldr	r1, [r3, #20]
 8002604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002606:	891a      	ldrh	r2, [r3, #8]
 8002608:	193b      	adds	r3, r7, r4
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	f005 f9aa 	bl	8007964 <USB_ReadPMA>
 8002610:	e01b      	b.n	800264a <PCD_EP_ISR_Handler+0x426>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	b29b      	uxth	r3, r3
 800261c:	2524      	movs	r5, #36	; 0x24
 800261e:	197c      	adds	r4, r7, r5
 8002620:	0019      	movs	r1, r3
 8002622:	0010      	movs	r0, r2
 8002624:	f7ff f96c 	bl	8001900 <PCD_GET_EP_DBUF1_CNT>
 8002628:	0003      	movs	r3, r0
 800262a:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 800262c:	002c      	movs	r4, r5
 800262e:	193b      	adds	r3, r7, r4
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d009      	beq.n	800264a <PCD_EP_ISR_Handler+0x426>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6818      	ldr	r0, [r3, #0]
 800263a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263c:	6959      	ldr	r1, [r3, #20]
 800263e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002640:	895a      	ldrh	r2, [r3, #10]
 8002642:	193b      	adds	r3, r7, r4
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	f005 f98d 	bl	8007964 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800264a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264c:	69da      	ldr	r2, [r3, #28]
 800264e:	2124      	movs	r1, #36	; 0x24
 8002650:	187b      	adds	r3, r7, r1
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	18d2      	adds	r2, r2, r3
 8002656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002658:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800265a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800265c:	695a      	ldr	r2, [r3, #20]
 800265e:	187b      	adds	r3, r7, r1
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	18d2      	adds	r2, r2, r3
 8002664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002666:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <PCD_EP_ISR_Handler+0x458>
 8002670:	187b      	adds	r3, r7, r1
 8002672:	881a      	ldrh	r2, [r3, #0]
 8002674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	429a      	cmp	r2, r3
 800267a:	d207      	bcs.n	800268c <PCD_EP_ISR_Handler+0x468>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800267c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267e:	781a      	ldrb	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	0011      	movs	r1, r2
 8002684:	0018      	movs	r0, r3
 8002686:	f007 fe4a 	bl	800a31e <HAL_PCD_DataOutStageCallback>
 800268a:	e006      	b.n	800269a <PCD_EP_ISR_Handler+0x476>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002692:	0011      	movs	r1, r2
 8002694:	0018      	movs	r0, r3
 8002696:	f003 ffd5 	bl	8006644 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 800269a:	2032      	movs	r0, #50	; 0x32
 800269c:	183b      	adds	r3, r7, r0
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	2280      	movs	r2, #128	; 0x80
 80026a2:	4013      	ands	r3, r2
 80026a4:	d100      	bne.n	80026a8 <PCD_EP_ISR_Handler+0x484>
 80026a6:	e125      	b.n	80028f4 <PCD_EP_ISR_Handler+0x6d0>
      {
        ep = &hpcd->IN_ep[epindex];
 80026a8:	2121      	movs	r1, #33	; 0x21
 80026aa:	187b      	adds	r3, r7, r1
 80026ac:	781a      	ldrb	r2, [r3, #0]
 80026ae:	0013      	movs	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	189b      	adds	r3, r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	3310      	adds	r3, #16
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	18d3      	adds	r3, r2, r3
 80026bc:	3304      	adds	r3, #4
 80026be:	637b      	str	r3, [r7, #52]	; 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	001a      	movs	r2, r3
 80026c6:	187b      	adds	r3, r7, r1
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	18d3      	adds	r3, r2, r3
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a82      	ldr	r2, [pc, #520]	; (80028dc <PCD_EP_ISR_Handler+0x6b8>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	001a      	movs	r2, r3
 80026dc:	187b      	adds	r3, r7, r1
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	18d3      	adds	r3, r2, r3
 80026e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026e6:	2180      	movs	r1, #128	; 0x80
 80026e8:	0209      	lsls	r1, r1, #8
 80026ea:	430a      	orrs	r2, r1
 80026ec:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80026ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f0:	78db      	ldrb	r3, [r3, #3]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d000      	beq.n	80026f8 <PCD_EP_ISR_Handler+0x4d4>
 80026f6:	e0a3      	b.n	8002840 <PCD_EP_ISR_Handler+0x61c>
        {
          ep->xfer_len = 0U;
 80026f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fa:	2200      	movs	r2, #0
 80026fc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80026fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002700:	7b1b      	ldrb	r3, [r3, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d100      	bne.n	8002708 <PCD_EP_ISR_Handler+0x4e4>
 8002706:	e093      	b.n	8002830 <PCD_EP_ISR_Handler+0x60c>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002708:	183b      	adds	r3, r7, r0
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	2240      	movs	r2, #64	; 0x40
 800270e:	4013      	ands	r3, r2
 8002710:	d047      	beq.n	80027a2 <PCD_EP_ISR_Handler+0x57e>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002714:	785b      	ldrb	r3, [r3, #1]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d121      	bne.n	800275e <PCD_EP_ISR_Handler+0x53a>
 800271a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4a6f      	ldr	r2, [pc, #444]	; (80028e0 <PCD_EP_ISR_Handler+0x6bc>)
 8002722:	4694      	mov	ip, r2
 8002724:	4463      	add	r3, ip
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	496c      	ldr	r1, [pc, #432]	; (80028e0 <PCD_EP_ISR_Handler+0x6bc>)
 8002730:	468c      	mov	ip, r1
 8002732:	4463      	add	r3, ip
 8002734:	0192      	lsls	r2, r2, #6
 8002736:	0992      	lsrs	r2, r2, #6
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4a67      	ldr	r2, [pc, #412]	; (80028e0 <PCD_EP_ISR_Handler+0x6bc>)
 8002742:	4694      	mov	ip, r2
 8002744:	4463      	add	r3, ip
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4964      	ldr	r1, [pc, #400]	; (80028e0 <PCD_EP_ISR_Handler+0x6bc>)
 8002750:	468c      	mov	ip, r1
 8002752:	4463      	add	r3, ip
 8002754:	2180      	movs	r1, #128	; 0x80
 8002756:	0609      	lsls	r1, r1, #24
 8002758:	430a      	orrs	r2, r1
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	e068      	b.n	8002830 <PCD_EP_ISR_Handler+0x60c>
 800275e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002760:	785b      	ldrb	r3, [r3, #1]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d164      	bne.n	8002830 <PCD_EP_ISR_Handler+0x60c>
 8002766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4a5c      	ldr	r2, [pc, #368]	; (80028e0 <PCD_EP_ISR_Handler+0x6bc>)
 800276e:	4694      	mov	ip, r2
 8002770:	4463      	add	r3, ip
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4959      	ldr	r1, [pc, #356]	; (80028e0 <PCD_EP_ISR_Handler+0x6bc>)
 800277c:	468c      	mov	ip, r1
 800277e:	4463      	add	r3, ip
 8002780:	0412      	lsls	r2, r2, #16
 8002782:	0c12      	lsrs	r2, r2, #16
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4a54      	ldr	r2, [pc, #336]	; (80028e0 <PCD_EP_ISR_Handler+0x6bc>)
 800278e:	189a      	adds	r2, r3, r2
 8002790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4952      	ldr	r1, [pc, #328]	; (80028e0 <PCD_EP_ISR_Handler+0x6bc>)
 8002798:	468c      	mov	ip, r1
 800279a:	4463      	add	r3, ip
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	e046      	b.n	8002830 <PCD_EP_ISR_Handler+0x60c>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a4:	785b      	ldrb	r3, [r3, #1]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d121      	bne.n	80027ee <PCD_EP_ISR_Handler+0x5ca>
 80027aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4a4b      	ldr	r2, [pc, #300]	; (80028e0 <PCD_EP_ISR_Handler+0x6bc>)
 80027b2:	4694      	mov	ip, r2
 80027b4:	4463      	add	r3, ip
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4948      	ldr	r1, [pc, #288]	; (80028e0 <PCD_EP_ISR_Handler+0x6bc>)
 80027c0:	468c      	mov	ip, r1
 80027c2:	4463      	add	r3, ip
 80027c4:	0192      	lsls	r2, r2, #6
 80027c6:	0992      	lsrs	r2, r2, #6
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4a43      	ldr	r2, [pc, #268]	; (80028e0 <PCD_EP_ISR_Handler+0x6bc>)
 80027d2:	4694      	mov	ip, r2
 80027d4:	4463      	add	r3, ip
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4940      	ldr	r1, [pc, #256]	; (80028e0 <PCD_EP_ISR_Handler+0x6bc>)
 80027e0:	468c      	mov	ip, r1
 80027e2:	4463      	add	r3, ip
 80027e4:	2180      	movs	r1, #128	; 0x80
 80027e6:	0609      	lsls	r1, r1, #24
 80027e8:	430a      	orrs	r2, r1
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	e020      	b.n	8002830 <PCD_EP_ISR_Handler+0x60c>
 80027ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f0:	785b      	ldrb	r3, [r3, #1]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d11c      	bne.n	8002830 <PCD_EP_ISR_Handler+0x60c>
 80027f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4a38      	ldr	r2, [pc, #224]	; (80028e0 <PCD_EP_ISR_Handler+0x6bc>)
 80027fe:	4694      	mov	ip, r2
 8002800:	4463      	add	r3, ip
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4935      	ldr	r1, [pc, #212]	; (80028e0 <PCD_EP_ISR_Handler+0x6bc>)
 800280c:	468c      	mov	ip, r1
 800280e:	4463      	add	r3, ip
 8002810:	0412      	lsls	r2, r2, #16
 8002812:	0c12      	lsrs	r2, r2, #16
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4a30      	ldr	r2, [pc, #192]	; (80028e0 <PCD_EP_ISR_Handler+0x6bc>)
 800281e:	189a      	adds	r2, r3, r2
 8002820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	492e      	ldr	r1, [pc, #184]	; (80028e0 <PCD_EP_ISR_Handler+0x6bc>)
 8002828:	468c      	mov	ip, r1
 800282a:	4463      	add	r3, ip
 800282c:	6852      	ldr	r2, [r2, #4]
 800282e:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002832:	781a      	ldrb	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	0011      	movs	r1, r2
 8002838:	0018      	movs	r0, r3
 800283a:	f007 fd91 	bl	800a360 <HAL_PCD_DataInStageCallback>
 800283e:	e059      	b.n	80028f4 <PCD_EP_ISR_Handler+0x6d0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002840:	2332      	movs	r3, #50	; 0x32
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	881a      	ldrh	r2, [r3, #0]
 8002846:	2380      	movs	r3, #128	; 0x80
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4013      	ands	r3, r2
 800284c:	d14a      	bne.n	80028e4 <PCD_EP_ISR_Handler+0x6c0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800284e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4a22      	ldr	r2, [pc, #136]	; (80028e0 <PCD_EP_ISR_Handler+0x6bc>)
 8002856:	4694      	mov	ip, r2
 8002858:	4463      	add	r3, ip
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	0c1b      	lsrs	r3, r3, #16
 800285e:	b29a      	uxth	r2, r3
 8002860:	2126      	movs	r1, #38	; 0x26
 8002862:	187b      	adds	r3, r7, r1
 8002864:	0592      	lsls	r2, r2, #22
 8002866:	0d92      	lsrs	r2, r2, #22
 8002868:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800286a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	187b      	adds	r3, r7, r1
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d907      	bls.n	8002886 <PCD_EP_ISR_Handler+0x662>
            {
              ep->xfer_len -= TxPctSize;
 8002876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	187b      	adds	r3, r7, r1
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	1ad2      	subs	r2, r2, r3
 8002880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002882:	619a      	str	r2, [r3, #24]
 8002884:	e002      	b.n	800288c <PCD_EP_ISR_Handler+0x668>
            }
            else
            {
              ep->xfer_len = 0U;
 8002886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002888:	2200      	movs	r2, #0
 800288a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800288c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d107      	bne.n	80028a4 <PCD_EP_ISR_Handler+0x680>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002896:	781a      	ldrb	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	0011      	movs	r1, r2
 800289c:	0018      	movs	r0, r3
 800289e:	f007 fd5f 	bl	800a360 <HAL_PCD_DataInStageCallback>
 80028a2:	e027      	b.n	80028f4 <PCD_EP_ISR_Handler+0x6d0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80028a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a6:	695a      	ldr	r2, [r3, #20]
 80028a8:	2126      	movs	r1, #38	; 0x26
 80028aa:	187b      	adds	r3, r7, r1
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	18d2      	adds	r2, r2, r3
 80028b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80028b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b6:	69da      	ldr	r2, [r3, #28]
 80028b8:	187b      	adds	r3, r7, r1
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	18d2      	adds	r2, r2, r3
 80028be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028c8:	0011      	movs	r1, r2
 80028ca:	0018      	movs	r0, r3
 80028cc:	f003 feba 	bl	8006644 <USB_EPStartXfer>
 80028d0:	e010      	b.n	80028f4 <PCD_EP_ISR_Handler+0x6d0>
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	07ff8f8f 	.word	0x07ff8f8f
 80028d8:	000080c0 	.word	0x000080c0
 80028dc:	07ff8f0f 	.word	0x07ff8f0f
 80028e0:	40009800 	.word	0x40009800
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80028e4:	2332      	movs	r3, #50	; 0x32
 80028e6:	18fb      	adds	r3, r7, r3
 80028e8:	881a      	ldrh	r2, [r3, #0]
 80028ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	0018      	movs	r0, r3
 80028f0:	f000 f8fa 	bl	8002ae8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028fa:	2380      	movs	r3, #128	; 0x80
 80028fc:	021b      	lsls	r3, r3, #8
 80028fe:	4013      	ands	r3, r2
 8002900:	d000      	beq.n	8002904 <PCD_EP_ISR_Handler+0x6e0>
 8002902:	e494      	b.n	800222e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	0018      	movs	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	b00e      	add	sp, #56	; 0x38
 800290c:	bdb0      	pop	{r4, r5, r7, pc}
 800290e:	46c0      	nop			; (mov r8, r8)

08002910 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002910:	b5b0      	push	{r4, r5, r7, lr}
 8002912:	b08a      	sub	sp, #40	; 0x28
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	1dbb      	adds	r3, r7, #6
 800291c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800291e:	1dbb      	adds	r3, r7, #6
 8002920:	881a      	ldrh	r2, [r3, #0]
 8002922:	2380      	movs	r3, #128	; 0x80
 8002924:	01db      	lsls	r3, r3, #7
 8002926:	4013      	ands	r3, r2
 8002928:	d068      	beq.n	80029fc <HAL_PCD_EP_DB_Receive+0xec>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	b29b      	uxth	r3, r3
 8002934:	251e      	movs	r5, #30
 8002936:	197c      	adds	r4, r7, r5
 8002938:	0019      	movs	r1, r3
 800293a:	0010      	movs	r0, r2
 800293c:	f7fe ffbe 	bl	80018bc <PCD_GET_EP_DBUF0_CNT>
 8002940:	0003      	movs	r3, r0
 8002942:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	699a      	ldr	r2, [r3, #24]
 8002948:	197b      	adds	r3, r7, r5
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d307      	bcc.n	8002960 <HAL_PCD_EP_DB_Receive+0x50>
    {
      ep->xfer_len -= count;
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	699a      	ldr	r2, [r3, #24]
 8002954:	197b      	adds	r3, r7, r5
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	1ad2      	subs	r2, r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	619a      	str	r2, [r3, #24]
 800295e:	e002      	b.n	8002966 <HAL_PCD_EP_DB_Receive+0x56>
    }
    else
    {
      ep->xfer_len = 0U;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2200      	movs	r2, #0
 8002964:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d11a      	bne.n	80029a4 <HAL_PCD_EP_DB_Receive+0x94>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	001a      	movs	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	18d3      	adds	r3, r2, r3
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a56      	ldr	r2, [pc, #344]	; (8002ad8 <HAL_PCD_EP_DB_Receive+0x1c8>)
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	2280      	movs	r2, #128	; 0x80
 8002988:	0192      	lsls	r2, r2, #6
 800298a:	4053      	eors	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	001a      	movs	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	18d3      	adds	r3, r2, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	494f      	ldr	r1, [pc, #316]	; (8002adc <HAL_PCD_EP_DB_Receive+0x1cc>)
 80029a0:	430a      	orrs	r2, r1
 80029a2:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029a4:	1dbb      	adds	r3, r7, #6
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	2240      	movs	r2, #64	; 0x40
 80029aa:	4013      	ands	r3, r2
 80029ac:	d015      	beq.n	80029da <HAL_PCD_EP_DB_Receive+0xca>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	001a      	movs	r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	18d3      	adds	r3, r2, r3
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a48      	ldr	r2, [pc, #288]	; (8002ae0 <HAL_PCD_EP_DB_Receive+0x1d0>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	001a      	movs	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	18d3      	adds	r3, r2, r3
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4943      	ldr	r1, [pc, #268]	; (8002ae4 <HAL_PCD_EP_DB_Receive+0x1d4>)
 80029d6:	430a      	orrs	r2, r1
 80029d8:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 80029da:	241e      	movs	r4, #30
 80029dc:	193b      	adds	r3, r7, r4
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d100      	bne.n	80029e6 <HAL_PCD_EP_DB_Receive+0xd6>
 80029e4:	e071      	b.n	8002aca <HAL_PCD_EP_DB_Receive+0x1ba>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6818      	ldr	r0, [r3, #0]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	6959      	ldr	r1, [r3, #20]
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	891a      	ldrh	r2, [r3, #8]
 80029f2:	193b      	adds	r3, r7, r4
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	f004 ffb5 	bl	8007964 <USB_ReadPMA>
 80029fa:	e066      	b.n	8002aca <HAL_PCD_EP_DB_Receive+0x1ba>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	251e      	movs	r5, #30
 8002a08:	197c      	adds	r4, r7, r5
 8002a0a:	0019      	movs	r1, r3
 8002a0c:	0010      	movs	r0, r2
 8002a0e:	f7fe ff77 	bl	8001900 <PCD_GET_EP_DBUF1_CNT>
 8002a12:	0003      	movs	r3, r0
 8002a14:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	699a      	ldr	r2, [r3, #24]
 8002a1a:	197b      	adds	r3, r7, r5
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d307      	bcc.n	8002a32 <HAL_PCD_EP_DB_Receive+0x122>
    {
      ep->xfer_len -= count;
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	699a      	ldr	r2, [r3, #24]
 8002a26:	197b      	adds	r3, r7, r5
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	1ad2      	subs	r2, r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	619a      	str	r2, [r3, #24]
 8002a30:	e002      	b.n	8002a38 <HAL_PCD_EP_DB_Receive+0x128>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2200      	movs	r2, #0
 8002a36:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d11a      	bne.n	8002a76 <HAL_PCD_EP_DB_Receive+0x166>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	001a      	movs	r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	18d3      	adds	r3, r2, r3
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a21      	ldr	r2, [pc, #132]	; (8002ad8 <HAL_PCD_EP_DB_Receive+0x1c8>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	2280      	movs	r2, #128	; 0x80
 8002a5a:	0192      	lsls	r2, r2, #6
 8002a5c:	4053      	eors	r3, r2
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	001a      	movs	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	18d3      	adds	r3, r2, r3
 8002a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a70:	491a      	ldr	r1, [pc, #104]	; (8002adc <HAL_PCD_EP_DB_Receive+0x1cc>)
 8002a72:	430a      	orrs	r2, r1
 8002a74:	601a      	str	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002a76:	1dbb      	adds	r3, r7, #6
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	2240      	movs	r2, #64	; 0x40
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d115      	bne.n	8002aac <HAL_PCD_EP_DB_Receive+0x19c>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	001a      	movs	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	18d3      	adds	r3, r2, r3
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a13      	ldr	r2, [pc, #76]	; (8002ae0 <HAL_PCD_EP_DB_Receive+0x1d0>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	623b      	str	r3, [r7, #32]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	001a      	movs	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	18d3      	adds	r3, r2, r3
 8002aa4:	6a3a      	ldr	r2, [r7, #32]
 8002aa6:	490f      	ldr	r1, [pc, #60]	; (8002ae4 <HAL_PCD_EP_DB_Receive+0x1d4>)
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8002aac:	241e      	movs	r4, #30
 8002aae:	193b      	adds	r3, r7, r4
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d009      	beq.n	8002aca <HAL_PCD_EP_DB_Receive+0x1ba>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6818      	ldr	r0, [r3, #0]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	6959      	ldr	r1, [r3, #20]
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	895a      	ldrh	r2, [r3, #10]
 8002ac2:	193b      	adds	r3, r7, r4
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	f004 ff4d 	bl	8007964 <USB_ReadPMA>
    }
  }

  return count;
 8002aca:	231e      	movs	r3, #30
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	881b      	ldrh	r3, [r3, #0]
}
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	b00a      	add	sp, #40	; 0x28
 8002ad6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ad8:	07ffbf8f 	.word	0x07ffbf8f
 8002adc:	00008080 	.word	0x00008080
 8002ae0:	07ff8f8f 	.word	0x07ff8f8f
 8002ae4:	000080c0 	.word	0x000080c0

08002ae8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ae8:	b5b0      	push	{r4, r5, r7, lr}
 8002aea:	b08e      	sub	sp, #56	; 0x38
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	1dbb      	adds	r3, r7, #6
 8002af4:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002af6:	1dbb      	adds	r3, r7, #6
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	2240      	movs	r2, #64	; 0x40
 8002afc:	4013      	ands	r3, r2
 8002afe:	d100      	bne.n	8002b02 <HAL_PCD_EP_DB_Transmit+0x1a>
 8002b00:	e1c4      	b.n	8002e8c <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	251e      	movs	r5, #30
 8002b0e:	197c      	adds	r4, r7, r5
 8002b10:	0019      	movs	r1, r3
 8002b12:	0010      	movs	r0, r2
 8002b14:	f7fe fed2 	bl	80018bc <PCD_GET_EP_DBUF0_CNT>
 8002b18:	0003      	movs	r3, r0
 8002b1a:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	699a      	ldr	r2, [r3, #24]
 8002b20:	197b      	adds	r3, r7, r5
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d907      	bls.n	8002b38 <HAL_PCD_EP_DB_Transmit+0x50>
    {
      ep->xfer_len -= TxPctSize;
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	699a      	ldr	r2, [r3, #24]
 8002b2c:	197b      	adds	r3, r7, r5
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	1ad2      	subs	r2, r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	619a      	str	r2, [r3, #24]
 8002b36:	e002      	b.n	8002b3e <HAL_PCD_EP_DB_Transmit+0x56>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d000      	beq.n	8002b48 <HAL_PCD_EP_DB_Transmit+0x60>
 8002b46:	e0b2      	b.n	8002cae <HAL_PCD_EP_DB_Transmit+0x1c6>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	785b      	ldrb	r3, [r3, #1]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d121      	bne.n	8002b94 <HAL_PCD_EP_DB_Transmit+0xac>
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4adb      	ldr	r2, [pc, #876]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002b58:	4694      	mov	ip, r2
 8002b5a:	4463      	add	r3, ip
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	49d7      	ldr	r1, [pc, #860]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002b66:	468c      	mov	ip, r1
 8002b68:	4463      	add	r3, ip
 8002b6a:	0192      	lsls	r2, r2, #6
 8002b6c:	0992      	lsrs	r2, r2, #6
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4ad3      	ldr	r2, [pc, #844]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002b78:	4694      	mov	ip, r2
 8002b7a:	4463      	add	r3, ip
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	49cf      	ldr	r1, [pc, #828]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002b86:	468c      	mov	ip, r1
 8002b88:	4463      	add	r3, ip
 8002b8a:	2180      	movs	r1, #128	; 0x80
 8002b8c:	0609      	lsls	r1, r1, #24
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	e020      	b.n	8002bd6 <HAL_PCD_EP_DB_Transmit+0xee>
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	785b      	ldrb	r3, [r3, #1]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d11c      	bne.n	8002bd6 <HAL_PCD_EP_DB_Transmit+0xee>
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4ac8      	ldr	r2, [pc, #800]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002ba4:	4694      	mov	ip, r2
 8002ba6:	4463      	add	r3, ip
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	49c4      	ldr	r1, [pc, #784]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002bb2:	468c      	mov	ip, r1
 8002bb4:	4463      	add	r3, ip
 8002bb6:	0412      	lsls	r2, r2, #16
 8002bb8:	0c12      	lsrs	r2, r2, #16
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	4ac0      	ldr	r2, [pc, #768]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002bc4:	189a      	adds	r2, r3, r2
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	49bd      	ldr	r1, [pc, #756]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002bce:	468c      	mov	ip, r1
 8002bd0:	4463      	add	r3, ip
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	785b      	ldrb	r3, [r3, #1]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d121      	bne.n	8002c22 <HAL_PCD_EP_DB_Transmit+0x13a>
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4ab7      	ldr	r2, [pc, #732]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002be6:	4694      	mov	ip, r2
 8002be8:	4463      	add	r3, ip
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	49b4      	ldr	r1, [pc, #720]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002bf4:	468c      	mov	ip, r1
 8002bf6:	4463      	add	r3, ip
 8002bf8:	0192      	lsls	r2, r2, #6
 8002bfa:	0992      	lsrs	r2, r2, #6
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4aaf      	ldr	r2, [pc, #700]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002c06:	4694      	mov	ip, r2
 8002c08:	4463      	add	r3, ip
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	49ac      	ldr	r1, [pc, #688]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002c14:	468c      	mov	ip, r1
 8002c16:	4463      	add	r3, ip
 8002c18:	2180      	movs	r1, #128	; 0x80
 8002c1a:	0609      	lsls	r1, r1, #24
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	605a      	str	r2, [r3, #4]
 8002c20:	e020      	b.n	8002c64 <HAL_PCD_EP_DB_Transmit+0x17c>
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	785b      	ldrb	r3, [r3, #1]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d11c      	bne.n	8002c64 <HAL_PCD_EP_DB_Transmit+0x17c>
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4aa4      	ldr	r2, [pc, #656]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002c32:	4694      	mov	ip, r2
 8002c34:	4463      	add	r3, ip
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	49a1      	ldr	r1, [pc, #644]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002c40:	468c      	mov	ip, r1
 8002c42:	4463      	add	r3, ip
 8002c44:	0412      	lsls	r2, r2, #16
 8002c46:	0c12      	lsrs	r2, r2, #16
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4a9c      	ldr	r2, [pc, #624]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002c52:	189a      	adds	r2, r3, r2
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	499a      	ldr	r1, [pc, #616]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002c5c:	468c      	mov	ip, r1
 8002c5e:	4463      	add	r3, ip
 8002c60:	6852      	ldr	r2, [r2, #4]
 8002c62:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	781a      	ldrb	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	0011      	movs	r1, r2
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f007 fb77 	bl	800a360 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c72:	1dbb      	adds	r3, r7, #6
 8002c74:	881a      	ldrh	r2, [r3, #0]
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	01db      	lsls	r3, r3, #7
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d100      	bne.n	8002c80 <HAL_PCD_EP_DB_Transmit+0x198>
 8002c7e:	e2d6      	b.n	800322e <HAL_PCD_EP_DB_Transmit+0x746>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	001a      	movs	r2, r3
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	18d3      	adds	r3, r2, r3
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a8d      	ldr	r2, [pc, #564]	; (8002ec8 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	637b      	str	r3, [r7, #52]	; 0x34
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	001a      	movs	r2, r3
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	18d3      	adds	r3, r2, r3
 8002ca4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ca6:	4989      	ldr	r1, [pc, #548]	; (8002ecc <HAL_PCD_EP_DB_Transmit+0x3e4>)
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	e2bf      	b.n	800322e <HAL_PCD_EP_DB_Transmit+0x746>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cae:	1dbb      	adds	r3, r7, #6
 8002cb0:	881a      	ldrh	r2, [r3, #0]
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	01db      	lsls	r3, r3, #7
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d015      	beq.n	8002ce6 <HAL_PCD_EP_DB_Transmit+0x1fe>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	001a      	movs	r2, r3
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	18d3      	adds	r3, r2, r3
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a7f      	ldr	r2, [pc, #508]	; (8002ec8 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	001a      	movs	r2, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	18d3      	adds	r3, r2, r3
 8002cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ce0:	497a      	ldr	r1, [pc, #488]	; (8002ecc <HAL_PCD_EP_DB_Transmit+0x3e4>)
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2224      	movs	r2, #36	; 0x24
 8002cea:	5c9b      	ldrb	r3, [r3, r2]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d000      	beq.n	8002cf2 <HAL_PCD_EP_DB_Transmit+0x20a>
 8002cf0:	e29d      	b.n	800322e <HAL_PCD_EP_DB_Transmit+0x746>
      {
        ep->xfer_buff += TxPctSize;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	695a      	ldr	r2, [r3, #20]
 8002cf6:	211e      	movs	r1, #30
 8002cf8:	187b      	adds	r3, r7, r1
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	18d2      	adds	r2, r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	69da      	ldr	r2, [r3, #28]
 8002d06:	187b      	adds	r3, r7, r1
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	18d2      	adds	r2, r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	6a1a      	ldr	r2, [r3, #32]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d309      	bcc.n	8002d30 <HAL_PCD_EP_DB_Transmit+0x248>
        {
          len = ep->maxpacket;
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_len_db -= len;
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	6a1a      	ldr	r2, [r3, #32]
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	1ad2      	subs	r2, r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	621a      	str	r2, [r3, #32]
 8002d2e:	e016      	b.n	8002d5e <HAL_PCD_EP_DB_Transmit+0x276>
        }
        else if (ep->xfer_len_db == 0U)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d108      	bne.n	8002d4a <HAL_PCD_EP_DB_Transmit+0x262>
        {
          len = TxPctSize;
 8002d38:	231e      	movs	r3, #30
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_fill_db = 0U;
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2224      	movs	r2, #36	; 0x24
 8002d44:	2100      	movs	r1, #0
 8002d46:	5499      	strb	r1, [r3, r2]
 8002d48:	e009      	b.n	8002d5e <HAL_PCD_EP_DB_Transmit+0x276>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2224      	movs	r2, #36	; 0x24
 8002d4e:	2100      	movs	r1, #0
 8002d50:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_len_db = 0U;
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	785b      	ldrb	r3, [r3, #1]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d162      	bne.n	8002e2c <HAL_PCD_EP_DB_Transmit+0x344>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4a55      	ldr	r2, [pc, #340]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002d6e:	4694      	mov	ip, r2
 8002d70:	4463      	add	r3, ip
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4952      	ldr	r1, [pc, #328]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002d7c:	468c      	mov	ip, r1
 8002d7e:	4463      	add	r3, ip
 8002d80:	0192      	lsls	r2, r2, #6
 8002d82:	0992      	lsrs	r2, r2, #6
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	2b3e      	cmp	r3, #62	; 0x3e
 8002d8a:	d91e      	bls.n	8002dca <HAL_PCD_EP_DB_Transmit+0x2e2>
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	221f      	movs	r2, #31
 8002d96:	4013      	ands	r3, r2
 8002d98:	d102      	bne.n	8002da0 <HAL_PCD_EP_DB_Transmit+0x2b8>
 8002d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	4a47      	ldr	r2, [pc, #284]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002da8:	4694      	mov	ip, r2
 8002daa:	4463      	add	r3, ip
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db0:	069b      	lsls	r3, r3, #26
 8002db2:	431a      	orrs	r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	4942      	ldr	r1, [pc, #264]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002dbc:	468c      	mov	ip, r1
 8002dbe:	4463      	add	r3, ip
 8002dc0:	2180      	movs	r1, #128	; 0x80
 8002dc2:	0609      	lsls	r1, r1, #24
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	e055      	b.n	8002e76 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d111      	bne.n	8002df4 <HAL_PCD_EP_DB_Transmit+0x30c>
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4a3b      	ldr	r2, [pc, #236]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002dd8:	4694      	mov	ip, r2
 8002dda:	4463      	add	r3, ip
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4937      	ldr	r1, [pc, #220]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002de6:	468c      	mov	ip, r1
 8002de8:	4463      	add	r3, ip
 8002dea:	2180      	movs	r1, #128	; 0x80
 8002dec:	0609      	lsls	r1, r1, #24
 8002dee:	430a      	orrs	r2, r1
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	e040      	b.n	8002e76 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	085b      	lsrs	r3, r3, #1
 8002df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d002      	beq.n	8002e08 <HAL_PCD_EP_DB_Transmit+0x320>
 8002e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e04:	3301      	adds	r3, #1
 8002e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	4a2d      	ldr	r2, [pc, #180]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002e10:	4694      	mov	ip, r2
 8002e12:	4463      	add	r3, ip
 8002e14:	6819      	ldr	r1, [r3, #0]
 8002e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e18:	069a      	lsls	r2, r3, #26
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4828      	ldr	r0, [pc, #160]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002e22:	4684      	mov	ip, r0
 8002e24:	4463      	add	r3, ip
 8002e26:	430a      	orrs	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	e024      	b.n	8002e76 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	785b      	ldrb	r3, [r3, #1]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d120      	bne.n	8002e76 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4a22      	ldr	r2, [pc, #136]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002e3c:	4694      	mov	ip, r2
 8002e3e:	4463      	add	r3, ip
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	491e      	ldr	r1, [pc, #120]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002e4a:	468c      	mov	ip, r1
 8002e4c:	4463      	add	r3, ip
 8002e4e:	0412      	lsls	r2, r2, #16
 8002e50:	0c12      	lsrs	r2, r2, #16
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4a1a      	ldr	r2, [pc, #104]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002e5c:	4694      	mov	ip, r2
 8002e5e:	4463      	add	r3, ip
 8002e60:	6819      	ldr	r1, [r3, #0]
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	041a      	lsls	r2, r3, #16
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	4815      	ldr	r0, [pc, #84]	; (8002ec4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8002e6e:	4684      	mov	ip, r0
 8002e70:	4463      	add	r3, ip
 8002e72:	430a      	orrs	r2, r1
 8002e74:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	6959      	ldr	r1, [r3, #20]
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	891a      	ldrh	r2, [r3, #8]
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	f004 fcf7 	bl	8007878 <USB_WritePMA>
 8002e8a:	e1d0      	b.n	800322e <HAL_PCD_EP_DB_Transmit+0x746>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	251e      	movs	r5, #30
 8002e98:	197c      	adds	r4, r7, r5
 8002e9a:	0019      	movs	r1, r3
 8002e9c:	0010      	movs	r0, r2
 8002e9e:	f7fe fd2f 	bl	8001900 <PCD_GET_EP_DBUF1_CNT>
 8002ea2:	0003      	movs	r3, r0
 8002ea4:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	197b      	adds	r3, r7, r5
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d30e      	bcc.n	8002ed0 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	699a      	ldr	r2, [r3, #24]
 8002eb6:	197b      	adds	r3, r7, r5
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	1ad2      	subs	r2, r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	619a      	str	r2, [r3, #24]
 8002ec0:	e009      	b.n	8002ed6 <HAL_PCD_EP_DB_Transmit+0x3ee>
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	40009800 	.word	0x40009800
 8002ec8:	07ff8f8f 	.word	0x07ff8f8f
 8002ecc:	0000c080 	.word	0x0000c080
    }
    else
    {
      ep->xfer_len = 0U;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d000      	beq.n	8002ee0 <HAL_PCD_EP_DB_Transmit+0x3f8>
 8002ede:	e0b2      	b.n	8003046 <HAL_PCD_EP_DB_Transmit+0x55e>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	785b      	ldrb	r3, [r3, #1]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d121      	bne.n	8002f2c <HAL_PCD_EP_DB_Transmit+0x444>
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4ab5      	ldr	r2, [pc, #724]	; (80031c4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8002ef0:	4694      	mov	ip, r2
 8002ef2:	4463      	add	r3, ip
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	49b1      	ldr	r1, [pc, #708]	; (80031c4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8002efe:	468c      	mov	ip, r1
 8002f00:	4463      	add	r3, ip
 8002f02:	0192      	lsls	r2, r2, #6
 8002f04:	0992      	lsrs	r2, r2, #6
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4aad      	ldr	r2, [pc, #692]	; (80031c4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8002f10:	4694      	mov	ip, r2
 8002f12:	4463      	add	r3, ip
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	49a9      	ldr	r1, [pc, #676]	; (80031c4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8002f1e:	468c      	mov	ip, r1
 8002f20:	4463      	add	r3, ip
 8002f22:	2180      	movs	r1, #128	; 0x80
 8002f24:	0609      	lsls	r1, r1, #24
 8002f26:	430a      	orrs	r2, r1
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	e020      	b.n	8002f6e <HAL_PCD_EP_DB_Transmit+0x486>
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	785b      	ldrb	r3, [r3, #1]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d11c      	bne.n	8002f6e <HAL_PCD_EP_DB_Transmit+0x486>
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4aa2      	ldr	r2, [pc, #648]	; (80031c4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8002f3c:	4694      	mov	ip, r2
 8002f3e:	4463      	add	r3, ip
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	499e      	ldr	r1, [pc, #632]	; (80031c4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8002f4a:	468c      	mov	ip, r1
 8002f4c:	4463      	add	r3, ip
 8002f4e:	0412      	lsls	r2, r2, #16
 8002f50:	0c12      	lsrs	r2, r2, #16
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	4a9a      	ldr	r2, [pc, #616]	; (80031c4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8002f5c:	189a      	adds	r2, r3, r2
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4997      	ldr	r1, [pc, #604]	; (80031c4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8002f66:	468c      	mov	ip, r1
 8002f68:	4463      	add	r3, ip
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	785b      	ldrb	r3, [r3, #1]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d121      	bne.n	8002fba <HAL_PCD_EP_DB_Transmit+0x4d2>
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4a91      	ldr	r2, [pc, #580]	; (80031c4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8002f7e:	4694      	mov	ip, r2
 8002f80:	4463      	add	r3, ip
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	498e      	ldr	r1, [pc, #568]	; (80031c4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8002f8c:	468c      	mov	ip, r1
 8002f8e:	4463      	add	r3, ip
 8002f90:	0192      	lsls	r2, r2, #6
 8002f92:	0992      	lsrs	r2, r2, #6
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4a89      	ldr	r2, [pc, #548]	; (80031c4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8002f9e:	4694      	mov	ip, r2
 8002fa0:	4463      	add	r3, ip
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	4986      	ldr	r1, [pc, #536]	; (80031c4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8002fac:	468c      	mov	ip, r1
 8002fae:	4463      	add	r3, ip
 8002fb0:	2180      	movs	r1, #128	; 0x80
 8002fb2:	0609      	lsls	r1, r1, #24
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	605a      	str	r2, [r3, #4]
 8002fb8:	e020      	b.n	8002ffc <HAL_PCD_EP_DB_Transmit+0x514>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	785b      	ldrb	r3, [r3, #1]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d11c      	bne.n	8002ffc <HAL_PCD_EP_DB_Transmit+0x514>
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4a7e      	ldr	r2, [pc, #504]	; (80031c4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8002fca:	4694      	mov	ip, r2
 8002fcc:	4463      	add	r3, ip
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	497b      	ldr	r1, [pc, #492]	; (80031c4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8002fd8:	468c      	mov	ip, r1
 8002fda:	4463      	add	r3, ip
 8002fdc:	0412      	lsls	r2, r2, #16
 8002fde:	0c12      	lsrs	r2, r2, #16
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4a76      	ldr	r2, [pc, #472]	; (80031c4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8002fea:	189a      	adds	r2, r3, r2
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4974      	ldr	r1, [pc, #464]	; (80031c4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8002ff4:	468c      	mov	ip, r1
 8002ff6:	4463      	add	r3, ip
 8002ff8:	6852      	ldr	r2, [r2, #4]
 8002ffa:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	781a      	ldrb	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	0011      	movs	r1, r2
 8003004:	0018      	movs	r0, r3
 8003006:	f007 f9ab 	bl	800a360 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800300a:	1dbb      	adds	r3, r7, #6
 800300c:	881a      	ldrh	r2, [r3, #0]
 800300e:	2380      	movs	r3, #128	; 0x80
 8003010:	01db      	lsls	r3, r3, #7
 8003012:	4013      	ands	r3, r2
 8003014:	d000      	beq.n	8003018 <HAL_PCD_EP_DB_Transmit+0x530>
 8003016:	e10a      	b.n	800322e <HAL_PCD_EP_DB_Transmit+0x746>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	001a      	movs	r2, r3
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	18d3      	adds	r3, r2, r3
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a67      	ldr	r2, [pc, #412]	; (80031c8 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 800302a:	4013      	ands	r3, r2
 800302c:	623b      	str	r3, [r7, #32]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	001a      	movs	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	18d3      	adds	r3, r2, r3
 800303c:	6a3a      	ldr	r2, [r7, #32]
 800303e:	4963      	ldr	r1, [pc, #396]	; (80031cc <HAL_PCD_EP_DB_Transmit+0x6e4>)
 8003040:	430a      	orrs	r2, r1
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	e0f3      	b.n	800322e <HAL_PCD_EP_DB_Transmit+0x746>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003046:	1dbb      	adds	r3, r7, #6
 8003048:	881a      	ldrh	r2, [r3, #0]
 800304a:	2380      	movs	r3, #128	; 0x80
 800304c:	01db      	lsls	r3, r3, #7
 800304e:	4013      	ands	r3, r2
 8003050:	d115      	bne.n	800307e <HAL_PCD_EP_DB_Transmit+0x596>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	001a      	movs	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	18d3      	adds	r3, r2, r3
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a59      	ldr	r2, [pc, #356]	; (80031c8 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 8003064:	4013      	ands	r3, r2
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	001a      	movs	r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	18d3      	adds	r3, r2, r3
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4954      	ldr	r1, [pc, #336]	; (80031cc <HAL_PCD_EP_DB_Transmit+0x6e4>)
 800307a:	430a      	orrs	r2, r1
 800307c:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2224      	movs	r2, #36	; 0x24
 8003082:	5c9b      	ldrb	r3, [r3, r2]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d000      	beq.n	800308a <HAL_PCD_EP_DB_Transmit+0x5a2>
 8003088:	e0d1      	b.n	800322e <HAL_PCD_EP_DB_Transmit+0x746>
      {
        ep->xfer_buff += TxPctSize;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	695a      	ldr	r2, [r3, #20]
 800308e:	211e      	movs	r1, #30
 8003090:	187b      	adds	r3, r7, r1
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	18d2      	adds	r2, r2, r3
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	69da      	ldr	r2, [r3, #28]
 800309e:	187b      	adds	r3, r7, r1
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	18d2      	adds	r2, r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	6a1a      	ldr	r2, [r3, #32]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d309      	bcc.n	80030c8 <HAL_PCD_EP_DB_Transmit+0x5e0>
        {
          len = ep->maxpacket;
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_len_db -= len;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	6a1a      	ldr	r2, [r3, #32]
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	1ad2      	subs	r2, r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	621a      	str	r2, [r3, #32]
 80030c6:	e016      	b.n	80030f6 <HAL_PCD_EP_DB_Transmit+0x60e>
        }
        else if (ep->xfer_len_db == 0U)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d108      	bne.n	80030e2 <HAL_PCD_EP_DB_Transmit+0x5fa>
        {
          len = TxPctSize;
 80030d0:	231e      	movs	r3, #30
 80030d2:	18fb      	adds	r3, r7, r3
 80030d4:	881b      	ldrh	r3, [r3, #0]
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_fill_db = 0U;
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2224      	movs	r2, #36	; 0x24
 80030dc:	2100      	movs	r1, #0
 80030de:	5499      	strb	r1, [r3, r2]
 80030e0:	e009      	b.n	80030f6 <HAL_PCD_EP_DB_Transmit+0x60e>
        }
        else
        {
          len = ep->xfer_len_db;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_len_db = 0U;
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2200      	movs	r2, #0
 80030ec:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2224      	movs	r2, #36	; 0x24
 80030f2:	2100      	movs	r1, #0
 80030f4:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	785b      	ldrb	r3, [r3, #1]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d168      	bne.n	80031d0 <HAL_PCD_EP_DB_Transmit+0x6e8>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4a2f      	ldr	r2, [pc, #188]	; (80031c4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8003106:	4694      	mov	ip, r2
 8003108:	4463      	add	r3, ip
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	492c      	ldr	r1, [pc, #176]	; (80031c4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8003114:	468c      	mov	ip, r1
 8003116:	4463      	add	r3, ip
 8003118:	0192      	lsls	r2, r2, #6
 800311a:	0992      	lsrs	r2, r2, #6
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	2b3e      	cmp	r3, #62	; 0x3e
 8003122:	d91e      	bls.n	8003162 <HAL_PCD_EP_DB_Transmit+0x67a>
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	61bb      	str	r3, [r7, #24]
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	221f      	movs	r2, #31
 800312e:	4013      	ands	r3, r2
 8003130:	d102      	bne.n	8003138 <HAL_PCD_EP_DB_Transmit+0x650>
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	3b01      	subs	r3, #1
 8003136:	61bb      	str	r3, [r7, #24]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4a21      	ldr	r2, [pc, #132]	; (80031c4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8003140:	4694      	mov	ip, r2
 8003142:	4463      	add	r3, ip
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	069b      	lsls	r3, r3, #26
 800314a:	431a      	orrs	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	491c      	ldr	r1, [pc, #112]	; (80031c4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8003154:	468c      	mov	ip, r1
 8003156:	4463      	add	r3, ip
 8003158:	2180      	movs	r1, #128	; 0x80
 800315a:	0609      	lsls	r1, r1, #24
 800315c:	430a      	orrs	r2, r1
 800315e:	605a      	str	r2, [r3, #4]
 8003160:	e05b      	b.n	800321a <HAL_PCD_EP_DB_Transmit+0x732>
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	2b00      	cmp	r3, #0
 8003166:	d111      	bne.n	800318c <HAL_PCD_EP_DB_Transmit+0x6a4>
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4a15      	ldr	r2, [pc, #84]	; (80031c4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8003170:	4694      	mov	ip, r2
 8003172:	4463      	add	r3, ip
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4911      	ldr	r1, [pc, #68]	; (80031c4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800317e:	468c      	mov	ip, r1
 8003180:	4463      	add	r3, ip
 8003182:	2180      	movs	r1, #128	; 0x80
 8003184:	0609      	lsls	r1, r1, #24
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	e046      	b.n	800321a <HAL_PCD_EP_DB_Transmit+0x732>
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	085b      	lsrs	r3, r3, #1
 8003190:	61bb      	str	r3, [r7, #24]
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	2201      	movs	r2, #1
 8003196:	4013      	ands	r3, r2
 8003198:	d002      	beq.n	80031a0 <HAL_PCD_EP_DB_Transmit+0x6b8>
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	3301      	adds	r3, #1
 800319e:	61bb      	str	r3, [r7, #24]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	4a07      	ldr	r2, [pc, #28]	; (80031c4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 80031a8:	4694      	mov	ip, r2
 80031aa:	4463      	add	r3, ip
 80031ac:	6859      	ldr	r1, [r3, #4]
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	069a      	lsls	r2, r3, #26
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4802      	ldr	r0, [pc, #8]	; (80031c4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 80031ba:	4684      	mov	ip, r0
 80031bc:	4463      	add	r3, ip
 80031be:	430a      	orrs	r2, r1
 80031c0:	605a      	str	r2, [r3, #4]
 80031c2:	e02a      	b.n	800321a <HAL_PCD_EP_DB_Transmit+0x732>
 80031c4:	40009800 	.word	0x40009800
 80031c8:	07ff8f8f 	.word	0x07ff8f8f
 80031cc:	0000c080 	.word	0x0000c080
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	785b      	ldrb	r3, [r3, #1]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d120      	bne.n	800321a <HAL_PCD_EP_DB_Transmit+0x732>
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	4a25      	ldr	r2, [pc, #148]	; (8003274 <HAL_PCD_EP_DB_Transmit+0x78c>)
 80031e0:	4694      	mov	ip, r2
 80031e2:	4463      	add	r3, ip
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4921      	ldr	r1, [pc, #132]	; (8003274 <HAL_PCD_EP_DB_Transmit+0x78c>)
 80031ee:	468c      	mov	ip, r1
 80031f0:	4463      	add	r3, ip
 80031f2:	0412      	lsls	r2, r2, #16
 80031f4:	0c12      	lsrs	r2, r2, #16
 80031f6:	605a      	str	r2, [r3, #4]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4a1d      	ldr	r2, [pc, #116]	; (8003274 <HAL_PCD_EP_DB_Transmit+0x78c>)
 8003200:	4694      	mov	ip, r2
 8003202:	4463      	add	r3, ip
 8003204:	6859      	ldr	r1, [r3, #4]
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	041a      	lsls	r2, r3, #16
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	4818      	ldr	r0, [pc, #96]	; (8003274 <HAL_PCD_EP_DB_Transmit+0x78c>)
 8003212:	4684      	mov	ip, r0
 8003214:	4463      	add	r3, ip
 8003216:	430a      	orrs	r2, r1
 8003218:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	6959      	ldr	r1, [r3, #20]
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	895a      	ldrh	r2, [r3, #10]
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	b29b      	uxth	r3, r3
 800322a:	f004 fb25 	bl	8007878 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	001a      	movs	r2, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	18d3      	adds	r3, r2, r3
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a0e      	ldr	r2, [pc, #56]	; (8003278 <HAL_PCD_EP_DB_Transmit+0x790>)
 8003240:	4013      	ands	r3, r2
 8003242:	633b      	str	r3, [r7, #48]	; 0x30
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	2210      	movs	r2, #16
 8003248:	4053      	eors	r3, r2
 800324a:	633b      	str	r3, [r7, #48]	; 0x30
 800324c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324e:	2220      	movs	r2, #32
 8003250:	4053      	eors	r3, r2
 8003252:	633b      	str	r3, [r7, #48]	; 0x30
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	001a      	movs	r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	18d3      	adds	r3, r2, r3
 8003262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003264:	4905      	ldr	r1, [pc, #20]	; (800327c <HAL_PCD_EP_DB_Transmit+0x794>)
 8003266:	430a      	orrs	r2, r1
 8003268:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	0018      	movs	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	b00e      	add	sp, #56	; 0x38
 8003272:	bdb0      	pop	{r4, r5, r7, pc}
 8003274:	40009800 	.word	0x40009800
 8003278:	07ff8fbf 	.word	0x07ff8fbf
 800327c:	00008080 	.word	0x00008080

08003280 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003280:	b590      	push	{r4, r7, lr}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	0008      	movs	r0, r1
 800328a:	0011      	movs	r1, r2
 800328c:	607b      	str	r3, [r7, #4]
 800328e:	240a      	movs	r4, #10
 8003290:	193b      	adds	r3, r7, r4
 8003292:	1c02      	adds	r2, r0, #0
 8003294:	801a      	strh	r2, [r3, #0]
 8003296:	2308      	movs	r3, #8
 8003298:	18fb      	adds	r3, r7, r3
 800329a:	1c0a      	adds	r2, r1, #0
 800329c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800329e:	0021      	movs	r1, r4
 80032a0:	187b      	adds	r3, r7, r1
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	2280      	movs	r2, #128	; 0x80
 80032a6:	4013      	ands	r3, r2
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00d      	beq.n	80032ca <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ae:	187b      	adds	r3, r7, r1
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	2207      	movs	r2, #7
 80032b4:	401a      	ands	r2, r3
 80032b6:	0013      	movs	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	189b      	adds	r3, r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	3310      	adds	r3, #16
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	18d3      	adds	r3, r2, r3
 80032c4:	3304      	adds	r3, #4
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	e00c      	b.n	80032e4 <HAL_PCDEx_PMAConfig+0x64>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032ca:	230a      	movs	r3, #10
 80032cc:	18fb      	adds	r3, r7, r3
 80032ce:	881a      	ldrh	r2, [r3, #0]
 80032d0:	0013      	movs	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	189b      	adds	r3, r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	3351      	adds	r3, #81	; 0x51
 80032da:	33ff      	adds	r3, #255	; 0xff
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	18d3      	adds	r3, r2, r3
 80032e0:	3304      	adds	r3, #4
 80032e2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80032e4:	2308      	movs	r3, #8
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d107      	bne.n	80032fe <HAL_PCDEx_PMAConfig+0x7e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	2200      	movs	r2, #0
 80032f2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	80da      	strh	r2, [r3, #6]
 80032fc:	e00b      	b.n	8003316 <HAL_PCDEx_PMAConfig+0x96>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2201      	movs	r2, #1
 8003302:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	b29a      	uxth	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	0c1b      	lsrs	r3, r3, #16
 8003310:	b29a      	uxth	r2, r3
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	0018      	movs	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	b007      	add	sp, #28
 800331e:	bd90      	pop	{r4, r7, pc}

08003320 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	23b5      	movs	r3, #181	; 0xb5
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	2101      	movs	r1, #1
 8003336:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	23b3      	movs	r3, #179	; 0xb3
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	2100      	movs	r1, #0
 8003340:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003346:	2201      	movs	r2, #1
 8003348:	431a      	orrs	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003352:	2202      	movs	r2, #2
 8003354:	431a      	orrs	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	0018      	movs	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	b004      	add	sp, #16
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800336c:	4b19      	ldr	r3, [pc, #100]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a19      	ldr	r2, [pc, #100]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003372:	4013      	ands	r3, r2
 8003374:	0019      	movs	r1, r3
 8003376:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	430a      	orrs	r2, r1
 800337c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	2380      	movs	r3, #128	; 0x80
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	429a      	cmp	r2, r3
 8003386:	d11f      	bne.n	80033c8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003388:	4b14      	ldr	r3, [pc, #80]	; (80033dc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	0013      	movs	r3, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	189b      	adds	r3, r3, r2
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	4912      	ldr	r1, [pc, #72]	; (80033e0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003396:	0018      	movs	r0, r3
 8003398:	f7fc feba 	bl	8000110 <__udivsi3>
 800339c:	0003      	movs	r3, r0
 800339e:	3301      	adds	r3, #1
 80033a0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033a2:	e008      	b.n	80033b6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	e001      	b.n	80033b6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e009      	b.n	80033ca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033b6:	4b07      	ldr	r3, [pc, #28]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80033b8:	695a      	ldr	r2, [r3, #20]
 80033ba:	2380      	movs	r3, #128	; 0x80
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	401a      	ands	r2, r3
 80033c0:	2380      	movs	r3, #128	; 0x80
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d0ed      	beq.n	80033a4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	0018      	movs	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b004      	add	sp, #16
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	40007000 	.word	0x40007000
 80033d8:	fffff9ff 	.word	0xfffff9ff
 80033dc:	20000004 	.word	0x20000004
 80033e0:	000f4240 	.word	0x000f4240

080033e4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80033e8:	4b03      	ldr	r3, [pc, #12]	; (80033f8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	23e0      	movs	r3, #224	; 0xe0
 80033ee:	01db      	lsls	r3, r3, #7
 80033f0:	4013      	ands	r3, r2
}
 80033f2:	0018      	movs	r0, r3
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40021000 	.word	0x40021000

080033fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e2fe      	b.n	8003a0c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2201      	movs	r2, #1
 8003414:	4013      	ands	r3, r2
 8003416:	d100      	bne.n	800341a <HAL_RCC_OscConfig+0x1e>
 8003418:	e07c      	b.n	8003514 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800341a:	4bc3      	ldr	r3, [pc, #780]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	2238      	movs	r2, #56	; 0x38
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003424:	4bc0      	ldr	r3, [pc, #768]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	2203      	movs	r2, #3
 800342a:	4013      	ands	r3, r2
 800342c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	2b10      	cmp	r3, #16
 8003432:	d102      	bne.n	800343a <HAL_RCC_OscConfig+0x3e>
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2b03      	cmp	r3, #3
 8003438:	d002      	beq.n	8003440 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	2b08      	cmp	r3, #8
 800343e:	d10b      	bne.n	8003458 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003440:	4bb9      	ldr	r3, [pc, #740]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	2380      	movs	r3, #128	; 0x80
 8003446:	029b      	lsls	r3, r3, #10
 8003448:	4013      	ands	r3, r2
 800344a:	d062      	beq.n	8003512 <HAL_RCC_OscConfig+0x116>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d15e      	bne.n	8003512 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e2d9      	b.n	8003a0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	2380      	movs	r3, #128	; 0x80
 800345e:	025b      	lsls	r3, r3, #9
 8003460:	429a      	cmp	r2, r3
 8003462:	d107      	bne.n	8003474 <HAL_RCC_OscConfig+0x78>
 8003464:	4bb0      	ldr	r3, [pc, #704]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	4baf      	ldr	r3, [pc, #700]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 800346a:	2180      	movs	r1, #128	; 0x80
 800346c:	0249      	lsls	r1, r1, #9
 800346e:	430a      	orrs	r2, r1
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	e020      	b.n	80034b6 <HAL_RCC_OscConfig+0xba>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	23a0      	movs	r3, #160	; 0xa0
 800347a:	02db      	lsls	r3, r3, #11
 800347c:	429a      	cmp	r2, r3
 800347e:	d10e      	bne.n	800349e <HAL_RCC_OscConfig+0xa2>
 8003480:	4ba9      	ldr	r3, [pc, #676]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	4ba8      	ldr	r3, [pc, #672]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 8003486:	2180      	movs	r1, #128	; 0x80
 8003488:	02c9      	lsls	r1, r1, #11
 800348a:	430a      	orrs	r2, r1
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	4ba6      	ldr	r3, [pc, #664]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	4ba5      	ldr	r3, [pc, #660]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 8003494:	2180      	movs	r1, #128	; 0x80
 8003496:	0249      	lsls	r1, r1, #9
 8003498:	430a      	orrs	r2, r1
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	e00b      	b.n	80034b6 <HAL_RCC_OscConfig+0xba>
 800349e:	4ba2      	ldr	r3, [pc, #648]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	4ba1      	ldr	r3, [pc, #644]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 80034a4:	49a1      	ldr	r1, [pc, #644]	; (800372c <HAL_RCC_OscConfig+0x330>)
 80034a6:	400a      	ands	r2, r1
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	4b9f      	ldr	r3, [pc, #636]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	4b9e      	ldr	r3, [pc, #632]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 80034b0:	499f      	ldr	r1, [pc, #636]	; (8003730 <HAL_RCC_OscConfig+0x334>)
 80034b2:	400a      	ands	r2, r1
 80034b4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d014      	beq.n	80034e8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034be:	f7fd fcf9 	bl	8000eb4 <HAL_GetTick>
 80034c2:	0003      	movs	r3, r0
 80034c4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c8:	f7fd fcf4 	bl	8000eb4 <HAL_GetTick>
 80034cc:	0002      	movs	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b64      	cmp	r3, #100	; 0x64
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e298      	b.n	8003a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034da:	4b93      	ldr	r3, [pc, #588]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	2380      	movs	r3, #128	; 0x80
 80034e0:	029b      	lsls	r3, r3, #10
 80034e2:	4013      	ands	r3, r2
 80034e4:	d0f0      	beq.n	80034c8 <HAL_RCC_OscConfig+0xcc>
 80034e6:	e015      	b.n	8003514 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e8:	f7fd fce4 	bl	8000eb4 <HAL_GetTick>
 80034ec:	0003      	movs	r3, r0
 80034ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f2:	f7fd fcdf 	bl	8000eb4 <HAL_GetTick>
 80034f6:	0002      	movs	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b64      	cmp	r3, #100	; 0x64
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e283      	b.n	8003a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003504:	4b88      	ldr	r3, [pc, #544]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	2380      	movs	r3, #128	; 0x80
 800350a:	029b      	lsls	r3, r3, #10
 800350c:	4013      	ands	r3, r2
 800350e:	d1f0      	bne.n	80034f2 <HAL_RCC_OscConfig+0xf6>
 8003510:	e000      	b.n	8003514 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003512:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2202      	movs	r2, #2
 800351a:	4013      	ands	r3, r2
 800351c:	d100      	bne.n	8003520 <HAL_RCC_OscConfig+0x124>
 800351e:	e099      	b.n	8003654 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003520:	4b81      	ldr	r3, [pc, #516]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2238      	movs	r2, #56	; 0x38
 8003526:	4013      	ands	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800352a:	4b7f      	ldr	r3, [pc, #508]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	2203      	movs	r2, #3
 8003530:	4013      	ands	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	2b10      	cmp	r3, #16
 8003538:	d102      	bne.n	8003540 <HAL_RCC_OscConfig+0x144>
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2b02      	cmp	r3, #2
 800353e:	d002      	beq.n	8003546 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d135      	bne.n	80035b2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003546:	4b78      	ldr	r3, [pc, #480]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	2380      	movs	r3, #128	; 0x80
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	4013      	ands	r3, r2
 8003550:	d005      	beq.n	800355e <HAL_RCC_OscConfig+0x162>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e256      	b.n	8003a0c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800355e:	4b72      	ldr	r3, [pc, #456]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	4a74      	ldr	r2, [pc, #464]	; (8003734 <HAL_RCC_OscConfig+0x338>)
 8003564:	4013      	ands	r3, r2
 8003566:	0019      	movs	r1, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	021a      	lsls	r2, r3, #8
 800356e:	4b6e      	ldr	r3, [pc, #440]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 8003570:	430a      	orrs	r2, r1
 8003572:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d112      	bne.n	80035a0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800357a:	4b6b      	ldr	r3, [pc, #428]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a6e      	ldr	r2, [pc, #440]	; (8003738 <HAL_RCC_OscConfig+0x33c>)
 8003580:	4013      	ands	r3, r2
 8003582:	0019      	movs	r1, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	4b67      	ldr	r3, [pc, #412]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 800358a:	430a      	orrs	r2, r1
 800358c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800358e:	4b66      	ldr	r3, [pc, #408]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	0adb      	lsrs	r3, r3, #11
 8003594:	2207      	movs	r2, #7
 8003596:	4013      	ands	r3, r2
 8003598:	4a68      	ldr	r2, [pc, #416]	; (800373c <HAL_RCC_OscConfig+0x340>)
 800359a:	40da      	lsrs	r2, r3
 800359c:	4b68      	ldr	r3, [pc, #416]	; (8003740 <HAL_RCC_OscConfig+0x344>)
 800359e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035a0:	4b68      	ldr	r3, [pc, #416]	; (8003744 <HAL_RCC_OscConfig+0x348>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	0018      	movs	r0, r3
 80035a6:	f7fd fc29 	bl	8000dfc <HAL_InitTick>
 80035aa:	1e03      	subs	r3, r0, #0
 80035ac:	d051      	beq.n	8003652 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e22c      	b.n	8003a0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d030      	beq.n	800361c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80035ba:	4b5b      	ldr	r3, [pc, #364]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a5e      	ldr	r2, [pc, #376]	; (8003738 <HAL_RCC_OscConfig+0x33c>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	0019      	movs	r1, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	4b57      	ldr	r3, [pc, #348]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 80035ca:	430a      	orrs	r2, r1
 80035cc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80035ce:	4b56      	ldr	r3, [pc, #344]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	4b55      	ldr	r3, [pc, #340]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 80035d4:	2180      	movs	r1, #128	; 0x80
 80035d6:	0049      	lsls	r1, r1, #1
 80035d8:	430a      	orrs	r2, r1
 80035da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035dc:	f7fd fc6a 	bl	8000eb4 <HAL_GetTick>
 80035e0:	0003      	movs	r3, r0
 80035e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035e6:	f7fd fc65 	bl	8000eb4 <HAL_GetTick>
 80035ea:	0002      	movs	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e209      	b.n	8003a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035f8:	4b4b      	ldr	r3, [pc, #300]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	2380      	movs	r3, #128	; 0x80
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4013      	ands	r3, r2
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003604:	4b48      	ldr	r3, [pc, #288]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	4a4a      	ldr	r2, [pc, #296]	; (8003734 <HAL_RCC_OscConfig+0x338>)
 800360a:	4013      	ands	r3, r2
 800360c:	0019      	movs	r1, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	021a      	lsls	r2, r3, #8
 8003614:	4b44      	ldr	r3, [pc, #272]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 8003616:	430a      	orrs	r2, r1
 8003618:	605a      	str	r2, [r3, #4]
 800361a:	e01b      	b.n	8003654 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800361c:	4b42      	ldr	r3, [pc, #264]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4b41      	ldr	r3, [pc, #260]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 8003622:	4949      	ldr	r1, [pc, #292]	; (8003748 <HAL_RCC_OscConfig+0x34c>)
 8003624:	400a      	ands	r2, r1
 8003626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003628:	f7fd fc44 	bl	8000eb4 <HAL_GetTick>
 800362c:	0003      	movs	r3, r0
 800362e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003632:	f7fd fc3f 	bl	8000eb4 <HAL_GetTick>
 8003636:	0002      	movs	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e1e3      	b.n	8003a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003644:	4b38      	ldr	r3, [pc, #224]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	2380      	movs	r3, #128	; 0x80
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4013      	ands	r3, r2
 800364e:	d1f0      	bne.n	8003632 <HAL_RCC_OscConfig+0x236>
 8003650:	e000      	b.n	8003654 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003652:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2208      	movs	r2, #8
 800365a:	4013      	ands	r3, r2
 800365c:	d047      	beq.n	80036ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800365e:	4b32      	ldr	r3, [pc, #200]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2238      	movs	r2, #56	; 0x38
 8003664:	4013      	ands	r3, r2
 8003666:	2b18      	cmp	r3, #24
 8003668:	d10a      	bne.n	8003680 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800366a:	4b2f      	ldr	r3, [pc, #188]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 800366c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800366e:	2202      	movs	r2, #2
 8003670:	4013      	ands	r3, r2
 8003672:	d03c      	beq.n	80036ee <HAL_RCC_OscConfig+0x2f2>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d138      	bne.n	80036ee <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e1c5      	b.n	8003a0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d019      	beq.n	80036bc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003688:	4b27      	ldr	r3, [pc, #156]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 800368a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800368c:	4b26      	ldr	r3, [pc, #152]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 800368e:	2101      	movs	r1, #1
 8003690:	430a      	orrs	r2, r1
 8003692:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003694:	f7fd fc0e 	bl	8000eb4 <HAL_GetTick>
 8003698:	0003      	movs	r3, r0
 800369a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800369e:	f7fd fc09 	bl	8000eb4 <HAL_GetTick>
 80036a2:	0002      	movs	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e1ad      	b.n	8003a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036b0:	4b1d      	ldr	r3, [pc, #116]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 80036b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b4:	2202      	movs	r2, #2
 80036b6:	4013      	ands	r3, r2
 80036b8:	d0f1      	beq.n	800369e <HAL_RCC_OscConfig+0x2a2>
 80036ba:	e018      	b.n	80036ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80036bc:	4b1a      	ldr	r3, [pc, #104]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 80036be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036c0:	4b19      	ldr	r3, [pc, #100]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 80036c2:	2101      	movs	r1, #1
 80036c4:	438a      	bics	r2, r1
 80036c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fd fbf4 	bl	8000eb4 <HAL_GetTick>
 80036cc:	0003      	movs	r3, r0
 80036ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d2:	f7fd fbef 	bl	8000eb4 <HAL_GetTick>
 80036d6:	0002      	movs	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e193      	b.n	8003a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036e4:	4b10      	ldr	r3, [pc, #64]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 80036e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e8:	2202      	movs	r2, #2
 80036ea:	4013      	ands	r3, r2
 80036ec:	d1f1      	bne.n	80036d2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2204      	movs	r2, #4
 80036f4:	4013      	ands	r3, r2
 80036f6:	d100      	bne.n	80036fa <HAL_RCC_OscConfig+0x2fe>
 80036f8:	e0c6      	b.n	8003888 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036fa:	231f      	movs	r3, #31
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	2200      	movs	r2, #0
 8003700:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003702:	4b09      	ldr	r3, [pc, #36]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2238      	movs	r2, #56	; 0x38
 8003708:	4013      	ands	r3, r2
 800370a:	2b20      	cmp	r3, #32
 800370c:	d11e      	bne.n	800374c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800370e:	4b06      	ldr	r3, [pc, #24]	; (8003728 <HAL_RCC_OscConfig+0x32c>)
 8003710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003712:	2202      	movs	r2, #2
 8003714:	4013      	ands	r3, r2
 8003716:	d100      	bne.n	800371a <HAL_RCC_OscConfig+0x31e>
 8003718:	e0b6      	b.n	8003888 <HAL_RCC_OscConfig+0x48c>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d000      	beq.n	8003724 <HAL_RCC_OscConfig+0x328>
 8003722:	e0b1      	b.n	8003888 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e171      	b.n	8003a0c <HAL_RCC_OscConfig+0x610>
 8003728:	40021000 	.word	0x40021000
 800372c:	fffeffff 	.word	0xfffeffff
 8003730:	fffbffff 	.word	0xfffbffff
 8003734:	ffff80ff 	.word	0xffff80ff
 8003738:	ffffc7ff 	.word	0xffffc7ff
 800373c:	00f42400 	.word	0x00f42400
 8003740:	20000004 	.word	0x20000004
 8003744:	20000008 	.word	0x20000008
 8003748:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800374c:	4bb1      	ldr	r3, [pc, #708]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 800374e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003750:	2380      	movs	r3, #128	; 0x80
 8003752:	055b      	lsls	r3, r3, #21
 8003754:	4013      	ands	r3, r2
 8003756:	d101      	bne.n	800375c <HAL_RCC_OscConfig+0x360>
 8003758:	2301      	movs	r3, #1
 800375a:	e000      	b.n	800375e <HAL_RCC_OscConfig+0x362>
 800375c:	2300      	movs	r3, #0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d011      	beq.n	8003786 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003762:	4bac      	ldr	r3, [pc, #688]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 8003764:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003766:	4bab      	ldr	r3, [pc, #684]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 8003768:	2180      	movs	r1, #128	; 0x80
 800376a:	0549      	lsls	r1, r1, #21
 800376c:	430a      	orrs	r2, r1
 800376e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003770:	4ba8      	ldr	r3, [pc, #672]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 8003772:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003774:	2380      	movs	r3, #128	; 0x80
 8003776:	055b      	lsls	r3, r3, #21
 8003778:	4013      	ands	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800377e:	231f      	movs	r3, #31
 8003780:	18fb      	adds	r3, r7, r3
 8003782:	2201      	movs	r2, #1
 8003784:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003786:	4ba4      	ldr	r3, [pc, #656]	; (8003a18 <HAL_RCC_OscConfig+0x61c>)
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	2380      	movs	r3, #128	; 0x80
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	4013      	ands	r3, r2
 8003790:	d11a      	bne.n	80037c8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003792:	4ba1      	ldr	r3, [pc, #644]	; (8003a18 <HAL_RCC_OscConfig+0x61c>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	4ba0      	ldr	r3, [pc, #640]	; (8003a18 <HAL_RCC_OscConfig+0x61c>)
 8003798:	2180      	movs	r1, #128	; 0x80
 800379a:	0049      	lsls	r1, r1, #1
 800379c:	430a      	orrs	r2, r1
 800379e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80037a0:	f7fd fb88 	bl	8000eb4 <HAL_GetTick>
 80037a4:	0003      	movs	r3, r0
 80037a6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037aa:	f7fd fb83 	bl	8000eb4 <HAL_GetTick>
 80037ae:	0002      	movs	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e127      	b.n	8003a0c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037bc:	4b96      	ldr	r3, [pc, #600]	; (8003a18 <HAL_RCC_OscConfig+0x61c>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	2380      	movs	r3, #128	; 0x80
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	4013      	ands	r3, r2
 80037c6:	d0f0      	beq.n	80037aa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d106      	bne.n	80037de <HAL_RCC_OscConfig+0x3e2>
 80037d0:	4b90      	ldr	r3, [pc, #576]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 80037d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80037d4:	4b8f      	ldr	r3, [pc, #572]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 80037d6:	2101      	movs	r1, #1
 80037d8:	430a      	orrs	r2, r1
 80037da:	65da      	str	r2, [r3, #92]	; 0x5c
 80037dc:	e01c      	b.n	8003818 <HAL_RCC_OscConfig+0x41c>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b05      	cmp	r3, #5
 80037e4:	d10c      	bne.n	8003800 <HAL_RCC_OscConfig+0x404>
 80037e6:	4b8b      	ldr	r3, [pc, #556]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 80037e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80037ea:	4b8a      	ldr	r3, [pc, #552]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 80037ec:	2104      	movs	r1, #4
 80037ee:	430a      	orrs	r2, r1
 80037f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80037f2:	4b88      	ldr	r3, [pc, #544]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 80037f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80037f6:	4b87      	ldr	r3, [pc, #540]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 80037f8:	2101      	movs	r1, #1
 80037fa:	430a      	orrs	r2, r1
 80037fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80037fe:	e00b      	b.n	8003818 <HAL_RCC_OscConfig+0x41c>
 8003800:	4b84      	ldr	r3, [pc, #528]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 8003802:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003804:	4b83      	ldr	r3, [pc, #524]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 8003806:	2101      	movs	r1, #1
 8003808:	438a      	bics	r2, r1
 800380a:	65da      	str	r2, [r3, #92]	; 0x5c
 800380c:	4b81      	ldr	r3, [pc, #516]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 800380e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003810:	4b80      	ldr	r3, [pc, #512]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 8003812:	2104      	movs	r1, #4
 8003814:	438a      	bics	r2, r1
 8003816:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d014      	beq.n	800384a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003820:	f7fd fb48 	bl	8000eb4 <HAL_GetTick>
 8003824:	0003      	movs	r3, r0
 8003826:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003828:	e009      	b.n	800383e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382a:	f7fd fb43 	bl	8000eb4 <HAL_GetTick>
 800382e:	0002      	movs	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	4a79      	ldr	r2, [pc, #484]	; (8003a1c <HAL_RCC_OscConfig+0x620>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e0e6      	b.n	8003a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800383e:	4b75      	ldr	r3, [pc, #468]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 8003840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003842:	2202      	movs	r2, #2
 8003844:	4013      	ands	r3, r2
 8003846:	d0f0      	beq.n	800382a <HAL_RCC_OscConfig+0x42e>
 8003848:	e013      	b.n	8003872 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384a:	f7fd fb33 	bl	8000eb4 <HAL_GetTick>
 800384e:	0003      	movs	r3, r0
 8003850:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003852:	e009      	b.n	8003868 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003854:	f7fd fb2e 	bl	8000eb4 <HAL_GetTick>
 8003858:	0002      	movs	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	4a6f      	ldr	r2, [pc, #444]	; (8003a1c <HAL_RCC_OscConfig+0x620>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e0d1      	b.n	8003a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003868:	4b6a      	ldr	r3, [pc, #424]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 800386a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386c:	2202      	movs	r2, #2
 800386e:	4013      	ands	r3, r2
 8003870:	d1f0      	bne.n	8003854 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003872:	231f      	movs	r3, #31
 8003874:	18fb      	adds	r3, r7, r3
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d105      	bne.n	8003888 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800387c:	4b65      	ldr	r3, [pc, #404]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 800387e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003880:	4b64      	ldr	r3, [pc, #400]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 8003882:	4967      	ldr	r1, [pc, #412]	; (8003a20 <HAL_RCC_OscConfig+0x624>)
 8003884:	400a      	ands	r2, r1
 8003886:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d100      	bne.n	8003892 <HAL_RCC_OscConfig+0x496>
 8003890:	e0bb      	b.n	8003a0a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003892:	4b60      	ldr	r3, [pc, #384]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2238      	movs	r2, #56	; 0x38
 8003898:	4013      	ands	r3, r2
 800389a:	2b10      	cmp	r3, #16
 800389c:	d100      	bne.n	80038a0 <HAL_RCC_OscConfig+0x4a4>
 800389e:	e07b      	b.n	8003998 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d156      	bne.n	8003956 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a8:	4b5a      	ldr	r3, [pc, #360]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	4b59      	ldr	r3, [pc, #356]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 80038ae:	495d      	ldr	r1, [pc, #372]	; (8003a24 <HAL_RCC_OscConfig+0x628>)
 80038b0:	400a      	ands	r2, r1
 80038b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fd fafe 	bl	8000eb4 <HAL_GetTick>
 80038b8:	0003      	movs	r3, r0
 80038ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038be:	f7fd faf9 	bl	8000eb4 <HAL_GetTick>
 80038c2:	0002      	movs	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e09d      	b.n	8003a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038d0:	4b50      	ldr	r3, [pc, #320]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	2380      	movs	r3, #128	; 0x80
 80038d6:	049b      	lsls	r3, r3, #18
 80038d8:	4013      	ands	r3, r2
 80038da:	d1f0      	bne.n	80038be <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038dc:	4b4d      	ldr	r3, [pc, #308]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	4a51      	ldr	r2, [pc, #324]	; (8003a28 <HAL_RCC_OscConfig+0x62c>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	0019      	movs	r1, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1a      	ldr	r2, [r3, #32]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003908:	431a      	orrs	r2, r3
 800390a:	4b42      	ldr	r3, [pc, #264]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 800390c:	430a      	orrs	r2, r1
 800390e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003910:	4b40      	ldr	r3, [pc, #256]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	4b3f      	ldr	r3, [pc, #252]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 8003916:	2180      	movs	r1, #128	; 0x80
 8003918:	0449      	lsls	r1, r1, #17
 800391a:	430a      	orrs	r2, r1
 800391c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800391e:	4b3d      	ldr	r3, [pc, #244]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	4b3c      	ldr	r3, [pc, #240]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 8003924:	2180      	movs	r1, #128	; 0x80
 8003926:	0549      	lsls	r1, r1, #21
 8003928:	430a      	orrs	r2, r1
 800392a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392c:	f7fd fac2 	bl	8000eb4 <HAL_GetTick>
 8003930:	0003      	movs	r3, r0
 8003932:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003936:	f7fd fabd 	bl	8000eb4 <HAL_GetTick>
 800393a:	0002      	movs	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e061      	b.n	8003a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003948:	4b32      	ldr	r3, [pc, #200]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	2380      	movs	r3, #128	; 0x80
 800394e:	049b      	lsls	r3, r3, #18
 8003950:	4013      	ands	r3, r2
 8003952:	d0f0      	beq.n	8003936 <HAL_RCC_OscConfig+0x53a>
 8003954:	e059      	b.n	8003a0a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003956:	4b2f      	ldr	r3, [pc, #188]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	4b2e      	ldr	r3, [pc, #184]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 800395c:	4931      	ldr	r1, [pc, #196]	; (8003a24 <HAL_RCC_OscConfig+0x628>)
 800395e:	400a      	ands	r2, r1
 8003960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003962:	f7fd faa7 	bl	8000eb4 <HAL_GetTick>
 8003966:	0003      	movs	r3, r0
 8003968:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800396c:	f7fd faa2 	bl	8000eb4 <HAL_GetTick>
 8003970:	0002      	movs	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e046      	b.n	8003a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800397e:	4b25      	ldr	r3, [pc, #148]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	2380      	movs	r3, #128	; 0x80
 8003984:	049b      	lsls	r3, r3, #18
 8003986:	4013      	ands	r3, r2
 8003988:	d1f0      	bne.n	800396c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800398a:	4b22      	ldr	r3, [pc, #136]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	4b21      	ldr	r3, [pc, #132]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 8003990:	4926      	ldr	r1, [pc, #152]	; (8003a2c <HAL_RCC_OscConfig+0x630>)
 8003992:	400a      	ands	r2, r1
 8003994:	60da      	str	r2, [r3, #12]
 8003996:	e038      	b.n	8003a0a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e033      	b.n	8003a0c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80039a4:	4b1b      	ldr	r3, [pc, #108]	; (8003a14 <HAL_RCC_OscConfig+0x618>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2203      	movs	r2, #3
 80039ae:	401a      	ands	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d126      	bne.n	8003a06 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2270      	movs	r2, #112	; 0x70
 80039bc:	401a      	ands	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d11f      	bne.n	8003a06 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	23fe      	movs	r3, #254	; 0xfe
 80039ca:	01db      	lsls	r3, r3, #7
 80039cc:	401a      	ands	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d116      	bne.n	8003a06 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	23f8      	movs	r3, #248	; 0xf8
 80039dc:	039b      	lsls	r3, r3, #14
 80039de:	401a      	ands	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d10e      	bne.n	8003a06 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	23e0      	movs	r3, #224	; 0xe0
 80039ec:	051b      	lsls	r3, r3, #20
 80039ee:	401a      	ands	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d106      	bne.n	8003a06 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	0f5b      	lsrs	r3, r3, #29
 80039fc:	075a      	lsls	r2, r3, #29
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d001      	beq.n	8003a0a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b008      	add	sp, #32
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40007000 	.word	0x40007000
 8003a1c:	00001388 	.word	0x00001388
 8003a20:	efffffff 	.word	0xefffffff
 8003a24:	feffffff 	.word	0xfeffffff
 8003a28:	11c1808c 	.word	0x11c1808c
 8003a2c:	eefefffc 	.word	0xeefefffc

08003a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0e9      	b.n	8003c18 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a44:	4b76      	ldr	r3, [pc, #472]	; (8003c20 <HAL_RCC_ClockConfig+0x1f0>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2207      	movs	r2, #7
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d91e      	bls.n	8003a90 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a52:	4b73      	ldr	r3, [pc, #460]	; (8003c20 <HAL_RCC_ClockConfig+0x1f0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2207      	movs	r2, #7
 8003a58:	4393      	bics	r3, r2
 8003a5a:	0019      	movs	r1, r3
 8003a5c:	4b70      	ldr	r3, [pc, #448]	; (8003c20 <HAL_RCC_ClockConfig+0x1f0>)
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a64:	f7fd fa26 	bl	8000eb4 <HAL_GetTick>
 8003a68:	0003      	movs	r3, r0
 8003a6a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a6c:	e009      	b.n	8003a82 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a6e:	f7fd fa21 	bl	8000eb4 <HAL_GetTick>
 8003a72:	0002      	movs	r2, r0
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	4a6a      	ldr	r2, [pc, #424]	; (8003c24 <HAL_RCC_ClockConfig+0x1f4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e0ca      	b.n	8003c18 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a82:	4b67      	ldr	r3, [pc, #412]	; (8003c20 <HAL_RCC_ClockConfig+0x1f0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2207      	movs	r2, #7
 8003a88:	4013      	ands	r3, r2
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d1ee      	bne.n	8003a6e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2202      	movs	r2, #2
 8003a96:	4013      	ands	r3, r2
 8003a98:	d015      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2204      	movs	r2, #4
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d006      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003aa4:	4b60      	ldr	r3, [pc, #384]	; (8003c28 <HAL_RCC_ClockConfig+0x1f8>)
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	4b5f      	ldr	r3, [pc, #380]	; (8003c28 <HAL_RCC_ClockConfig+0x1f8>)
 8003aaa:	21e0      	movs	r1, #224	; 0xe0
 8003aac:	01c9      	lsls	r1, r1, #7
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab2:	4b5d      	ldr	r3, [pc, #372]	; (8003c28 <HAL_RCC_ClockConfig+0x1f8>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	4a5d      	ldr	r2, [pc, #372]	; (8003c2c <HAL_RCC_ClockConfig+0x1fc>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	0019      	movs	r1, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	4b59      	ldr	r3, [pc, #356]	; (8003c28 <HAL_RCC_ClockConfig+0x1f8>)
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2201      	movs	r2, #1
 8003acc:	4013      	ands	r3, r2
 8003ace:	d057      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d107      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ad8:	4b53      	ldr	r3, [pc, #332]	; (8003c28 <HAL_RCC_ClockConfig+0x1f8>)
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	2380      	movs	r3, #128	; 0x80
 8003ade:	029b      	lsls	r3, r3, #10
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d12b      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e097      	b.n	8003c18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d107      	bne.n	8003b00 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003af0:	4b4d      	ldr	r3, [pc, #308]	; (8003c28 <HAL_RCC_ClockConfig+0x1f8>)
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	2380      	movs	r3, #128	; 0x80
 8003af6:	049b      	lsls	r3, r3, #18
 8003af8:	4013      	ands	r3, r2
 8003afa:	d11f      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e08b      	b.n	8003c18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d107      	bne.n	8003b18 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b08:	4b47      	ldr	r3, [pc, #284]	; (8003c28 <HAL_RCC_ClockConfig+0x1f8>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	2380      	movs	r3, #128	; 0x80
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	4013      	ands	r3, r2
 8003b12:	d113      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e07f      	b.n	8003c18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d106      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b20:	4b41      	ldr	r3, [pc, #260]	; (8003c28 <HAL_RCC_ClockConfig+0x1f8>)
 8003b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b24:	2202      	movs	r2, #2
 8003b26:	4013      	ands	r3, r2
 8003b28:	d108      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e074      	b.n	8003c18 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b2e:	4b3e      	ldr	r3, [pc, #248]	; (8003c28 <HAL_RCC_ClockConfig+0x1f8>)
 8003b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b32:	2202      	movs	r2, #2
 8003b34:	4013      	ands	r3, r2
 8003b36:	d101      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e06d      	b.n	8003c18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b3c:	4b3a      	ldr	r3, [pc, #232]	; (8003c28 <HAL_RCC_ClockConfig+0x1f8>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2207      	movs	r2, #7
 8003b42:	4393      	bics	r3, r2
 8003b44:	0019      	movs	r1, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	4b37      	ldr	r3, [pc, #220]	; (8003c28 <HAL_RCC_ClockConfig+0x1f8>)
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b50:	f7fd f9b0 	bl	8000eb4 <HAL_GetTick>
 8003b54:	0003      	movs	r3, r0
 8003b56:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b58:	e009      	b.n	8003b6e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b5a:	f7fd f9ab 	bl	8000eb4 <HAL_GetTick>
 8003b5e:	0002      	movs	r2, r0
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	4a2f      	ldr	r2, [pc, #188]	; (8003c24 <HAL_RCC_ClockConfig+0x1f4>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e054      	b.n	8003c18 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6e:	4b2e      	ldr	r3, [pc, #184]	; (8003c28 <HAL_RCC_ClockConfig+0x1f8>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	2238      	movs	r2, #56	; 0x38
 8003b74:	401a      	ands	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d1ec      	bne.n	8003b5a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b80:	4b27      	ldr	r3, [pc, #156]	; (8003c20 <HAL_RCC_ClockConfig+0x1f0>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2207      	movs	r2, #7
 8003b86:	4013      	ands	r3, r2
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d21e      	bcs.n	8003bcc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8e:	4b24      	ldr	r3, [pc, #144]	; (8003c20 <HAL_RCC_ClockConfig+0x1f0>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2207      	movs	r2, #7
 8003b94:	4393      	bics	r3, r2
 8003b96:	0019      	movs	r1, r3
 8003b98:	4b21      	ldr	r3, [pc, #132]	; (8003c20 <HAL_RCC_ClockConfig+0x1f0>)
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ba0:	f7fd f988 	bl	8000eb4 <HAL_GetTick>
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ba8:	e009      	b.n	8003bbe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003baa:	f7fd f983 	bl	8000eb4 <HAL_GetTick>
 8003bae:	0002      	movs	r2, r0
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	4a1b      	ldr	r2, [pc, #108]	; (8003c24 <HAL_RCC_ClockConfig+0x1f4>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e02c      	b.n	8003c18 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003bbe:	4b18      	ldr	r3, [pc, #96]	; (8003c20 <HAL_RCC_ClockConfig+0x1f0>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2207      	movs	r2, #7
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d1ee      	bne.n	8003baa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2204      	movs	r2, #4
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d009      	beq.n	8003bea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd6:	4b14      	ldr	r3, [pc, #80]	; (8003c28 <HAL_RCC_ClockConfig+0x1f8>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <HAL_RCC_ClockConfig+0x200>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	0019      	movs	r1, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	4b10      	ldr	r3, [pc, #64]	; (8003c28 <HAL_RCC_ClockConfig+0x1f8>)
 8003be6:	430a      	orrs	r2, r1
 8003be8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003bea:	f000 f829 	bl	8003c40 <HAL_RCC_GetSysClockFreq>
 8003bee:	0001      	movs	r1, r0
 8003bf0:	4b0d      	ldr	r3, [pc, #52]	; (8003c28 <HAL_RCC_ClockConfig+0x1f8>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	0a1b      	lsrs	r3, r3, #8
 8003bf6:	220f      	movs	r2, #15
 8003bf8:	401a      	ands	r2, r3
 8003bfa:	4b0e      	ldr	r3, [pc, #56]	; (8003c34 <HAL_RCC_ClockConfig+0x204>)
 8003bfc:	0092      	lsls	r2, r2, #2
 8003bfe:	58d3      	ldr	r3, [r2, r3]
 8003c00:	221f      	movs	r2, #31
 8003c02:	4013      	ands	r3, r2
 8003c04:	000a      	movs	r2, r1
 8003c06:	40da      	lsrs	r2, r3
 8003c08:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <HAL_RCC_ClockConfig+0x208>)
 8003c0a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c0c:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <HAL_RCC_ClockConfig+0x20c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	0018      	movs	r0, r3
 8003c12:	f7fd f8f3 	bl	8000dfc <HAL_InitTick>
 8003c16:	0003      	movs	r3, r0
}
 8003c18:	0018      	movs	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	b004      	add	sp, #16
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40022000 	.word	0x40022000
 8003c24:	00001388 	.word	0x00001388
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	fffff0ff 	.word	0xfffff0ff
 8003c30:	ffff8fff 	.word	0xffff8fff
 8003c34:	0800aaa0 	.word	0x0800aaa0
 8003c38:	20000004 	.word	0x20000004
 8003c3c:	20000008 	.word	0x20000008

08003c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c46:	4b3c      	ldr	r3, [pc, #240]	; (8003d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2238      	movs	r2, #56	; 0x38
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d10f      	bne.n	8003c70 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003c50:	4b39      	ldr	r3, [pc, #228]	; (8003d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	0adb      	lsrs	r3, r3, #11
 8003c56:	2207      	movs	r2, #7
 8003c58:	4013      	ands	r3, r2
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	409a      	lsls	r2, r3
 8003c5e:	0013      	movs	r3, r2
 8003c60:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003c62:	6839      	ldr	r1, [r7, #0]
 8003c64:	4835      	ldr	r0, [pc, #212]	; (8003d3c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003c66:	f7fc fa53 	bl	8000110 <__udivsi3>
 8003c6a:	0003      	movs	r3, r0
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	e05d      	b.n	8003d2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c70:	4b31      	ldr	r3, [pc, #196]	; (8003d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2238      	movs	r2, #56	; 0x38
 8003c76:	4013      	ands	r3, r2
 8003c78:	2b08      	cmp	r3, #8
 8003c7a:	d102      	bne.n	8003c82 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c7c:	4b30      	ldr	r3, [pc, #192]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x100>)
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	e054      	b.n	8003d2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c82:	4b2d      	ldr	r3, [pc, #180]	; (8003d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2238      	movs	r2, #56	; 0x38
 8003c88:	4013      	ands	r3, r2
 8003c8a:	2b10      	cmp	r3, #16
 8003c8c:	d138      	bne.n	8003d00 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003c8e:	4b2a      	ldr	r3, [pc, #168]	; (8003d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	2203      	movs	r2, #3
 8003c94:	4013      	ands	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c98:	4b27      	ldr	r3, [pc, #156]	; (8003d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	2207      	movs	r2, #7
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2b03      	cmp	r3, #3
 8003caa:	d10d      	bne.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cac:	68b9      	ldr	r1, [r7, #8]
 8003cae:	4824      	ldr	r0, [pc, #144]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x100>)
 8003cb0:	f7fc fa2e 	bl	8000110 <__udivsi3>
 8003cb4:	0003      	movs	r3, r0
 8003cb6:	0019      	movs	r1, r3
 8003cb8:	4b1f      	ldr	r3, [pc, #124]	; (8003d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	0a1b      	lsrs	r3, r3, #8
 8003cbe:	227f      	movs	r2, #127	; 0x7f
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	434b      	muls	r3, r1
 8003cc4:	617b      	str	r3, [r7, #20]
        break;
 8003cc6:	e00d      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	481c      	ldr	r0, [pc, #112]	; (8003d3c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003ccc:	f7fc fa20 	bl	8000110 <__udivsi3>
 8003cd0:	0003      	movs	r3, r0
 8003cd2:	0019      	movs	r1, r3
 8003cd4:	4b18      	ldr	r3, [pc, #96]	; (8003d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	0a1b      	lsrs	r3, r3, #8
 8003cda:	227f      	movs	r2, #127	; 0x7f
 8003cdc:	4013      	ands	r3, r2
 8003cde:	434b      	muls	r3, r1
 8003ce0:	617b      	str	r3, [r7, #20]
        break;
 8003ce2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003ce4:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	0f5b      	lsrs	r3, r3, #29
 8003cea:	2207      	movs	r2, #7
 8003cec:	4013      	ands	r3, r2
 8003cee:	3301      	adds	r3, #1
 8003cf0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	6978      	ldr	r0, [r7, #20]
 8003cf6:	f7fc fa0b 	bl	8000110 <__udivsi3>
 8003cfa:	0003      	movs	r3, r0
 8003cfc:	613b      	str	r3, [r7, #16]
 8003cfe:	e015      	b.n	8003d2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003d00:	4b0d      	ldr	r3, [pc, #52]	; (8003d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2238      	movs	r2, #56	; 0x38
 8003d06:	4013      	ands	r3, r2
 8003d08:	2b20      	cmp	r3, #32
 8003d0a:	d103      	bne.n	8003d14 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003d0c:	2380      	movs	r3, #128	; 0x80
 8003d0e:	021b      	lsls	r3, r3, #8
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	e00b      	b.n	8003d2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003d14:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	2238      	movs	r2, #56	; 0x38
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	2b18      	cmp	r3, #24
 8003d1e:	d103      	bne.n	8003d28 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003d20:	23fa      	movs	r3, #250	; 0xfa
 8003d22:	01db      	lsls	r3, r3, #7
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	e001      	b.n	8003d2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d2c:	693b      	ldr	r3, [r7, #16]
}
 8003d2e:	0018      	movs	r0, r3
 8003d30:	46bd      	mov	sp, r7
 8003d32:	b006      	add	sp, #24
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	00f42400 	.word	0x00f42400
 8003d40:	02dc6c00 	.word	0x02dc6c00

08003d44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d48:	4b02      	ldr	r3, [pc, #8]	; (8003d54 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
}
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	20000004 	.word	0x20000004

08003d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d58:	b5b0      	push	{r4, r5, r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003d5c:	f7ff fff2 	bl	8003d44 <HAL_RCC_GetHCLKFreq>
 8003d60:	0004      	movs	r4, r0
 8003d62:	f7ff fb3f 	bl	80033e4 <LL_RCC_GetAPB1Prescaler>
 8003d66:	0003      	movs	r3, r0
 8003d68:	0b1a      	lsrs	r2, r3, #12
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d6c:	0092      	lsls	r2, r2, #2
 8003d6e:	58d3      	ldr	r3, [r2, r3]
 8003d70:	221f      	movs	r2, #31
 8003d72:	4013      	ands	r3, r2
 8003d74:	40dc      	lsrs	r4, r3
 8003d76:	0023      	movs	r3, r4
}
 8003d78:	0018      	movs	r0, r3
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	0800aae0 	.word	0x0800aae0

08003d84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003d8c:	2313      	movs	r3, #19
 8003d8e:	18fb      	adds	r3, r7, r3
 8003d90:	2200      	movs	r2, #0
 8003d92:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d94:	2312      	movs	r3, #18
 8003d96:	18fb      	adds	r3, r7, r3
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	2380      	movs	r3, #128	; 0x80
 8003da2:	029b      	lsls	r3, r3, #10
 8003da4:	4013      	ands	r3, r2
 8003da6:	d100      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003da8:	e0a3      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003daa:	2011      	movs	r0, #17
 8003dac:	183b      	adds	r3, r7, r0
 8003dae:	2200      	movs	r2, #0
 8003db0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003db2:	4bb0      	ldr	r3, [pc, #704]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003db4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003db6:	2380      	movs	r3, #128	; 0x80
 8003db8:	055b      	lsls	r3, r3, #21
 8003dba:	4013      	ands	r3, r2
 8003dbc:	d110      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dbe:	4bad      	ldr	r3, [pc, #692]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003dc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dc2:	4bac      	ldr	r3, [pc, #688]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003dc4:	2180      	movs	r1, #128	; 0x80
 8003dc6:	0549      	lsls	r1, r1, #21
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	63da      	str	r2, [r3, #60]	; 0x3c
 8003dcc:	4ba9      	ldr	r3, [pc, #676]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003dce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dd0:	2380      	movs	r3, #128	; 0x80
 8003dd2:	055b      	lsls	r3, r3, #21
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dda:	183b      	adds	r3, r7, r0
 8003ddc:	2201      	movs	r2, #1
 8003dde:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003de0:	4ba5      	ldr	r3, [pc, #660]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	4ba4      	ldr	r3, [pc, #656]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003de6:	2180      	movs	r1, #128	; 0x80
 8003de8:	0049      	lsls	r1, r1, #1
 8003dea:	430a      	orrs	r2, r1
 8003dec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dee:	f7fd f861 	bl	8000eb4 <HAL_GetTick>
 8003df2:	0003      	movs	r3, r0
 8003df4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003df6:	e00b      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df8:	f7fd f85c 	bl	8000eb4 <HAL_GetTick>
 8003dfc:	0002      	movs	r2, r0
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d904      	bls.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003e06:	2313      	movs	r3, #19
 8003e08:	18fb      	adds	r3, r7, r3
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	701a      	strb	r2, [r3, #0]
        break;
 8003e0e:	e005      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e10:	4b99      	ldr	r3, [pc, #612]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	2380      	movs	r3, #128	; 0x80
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d0ed      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003e1c:	2313      	movs	r3, #19
 8003e1e:	18fb      	adds	r3, r7, r3
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d154      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e26:	4b93      	ldr	r3, [pc, #588]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e2a:	23c0      	movs	r3, #192	; 0xc0
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4013      	ands	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d019      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d014      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e42:	4b8c      	ldr	r3, [pc, #560]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e46:	4a8d      	ldr	r2, [pc, #564]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003e48:	4013      	ands	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e4c:	4b89      	ldr	r3, [pc, #548]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e50:	4b88      	ldr	r3, [pc, #544]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e52:	2180      	movs	r1, #128	; 0x80
 8003e54:	0249      	lsls	r1, r1, #9
 8003e56:	430a      	orrs	r2, r1
 8003e58:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e5a:	4b86      	ldr	r3, [pc, #536]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e5e:	4b85      	ldr	r3, [pc, #532]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e60:	4987      	ldr	r1, [pc, #540]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003e62:	400a      	ands	r2, r1
 8003e64:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e66:	4b83      	ldr	r3, [pc, #524]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	4013      	ands	r3, r2
 8003e72:	d016      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e74:	f7fd f81e 	bl	8000eb4 <HAL_GetTick>
 8003e78:	0003      	movs	r3, r0
 8003e7a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e7c:	e00c      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7e:	f7fd f819 	bl	8000eb4 <HAL_GetTick>
 8003e82:	0002      	movs	r2, r0
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	4a7e      	ldr	r2, [pc, #504]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d904      	bls.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003e8e:	2313      	movs	r3, #19
 8003e90:	18fb      	adds	r3, r7, r3
 8003e92:	2203      	movs	r2, #3
 8003e94:	701a      	strb	r2, [r3, #0]
            break;
 8003e96:	e004      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e98:	4b76      	ldr	r3, [pc, #472]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	d0ed      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003ea2:	2313      	movs	r3, #19
 8003ea4:	18fb      	adds	r3, r7, r3
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10a      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eac:	4b71      	ldr	r3, [pc, #452]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb0:	4a72      	ldr	r2, [pc, #456]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	0019      	movs	r1, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003eba:	4b6e      	ldr	r3, [pc, #440]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ec0:	e00c      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ec2:	2312      	movs	r3, #18
 8003ec4:	18fb      	adds	r3, r7, r3
 8003ec6:	2213      	movs	r2, #19
 8003ec8:	18ba      	adds	r2, r7, r2
 8003eca:	7812      	ldrb	r2, [r2, #0]
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	e005      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed0:	2312      	movs	r3, #18
 8003ed2:	18fb      	adds	r3, r7, r3
 8003ed4:	2213      	movs	r2, #19
 8003ed6:	18ba      	adds	r2, r7, r2
 8003ed8:	7812      	ldrb	r2, [r2, #0]
 8003eda:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003edc:	2311      	movs	r3, #17
 8003ede:	18fb      	adds	r3, r7, r3
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d105      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ee6:	4b63      	ldr	r3, [pc, #396]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ee8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eea:	4b62      	ldr	r3, [pc, #392]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003eec:	4966      	ldr	r1, [pc, #408]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003eee:	400a      	ands	r2, r1
 8003ef0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	4013      	ands	r3, r2
 8003efa:	d009      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003efc:	4b5d      	ldr	r3, [pc, #372]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f00:	2203      	movs	r2, #3
 8003f02:	4393      	bics	r3, r2
 8003f04:	0019      	movs	r1, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	4b5a      	ldr	r3, [pc, #360]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2202      	movs	r2, #2
 8003f16:	4013      	ands	r3, r2
 8003f18:	d009      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f1a:	4b56      	ldr	r3, [pc, #344]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1e:	220c      	movs	r2, #12
 8003f20:	4393      	bics	r3, r2
 8003f22:	0019      	movs	r1, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	4b52      	ldr	r3, [pc, #328]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2204      	movs	r2, #4
 8003f34:	4013      	ands	r3, r2
 8003f36:	d009      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f38:	4b4e      	ldr	r3, [pc, #312]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3c:	2230      	movs	r2, #48	; 0x30
 8003f3e:	4393      	bics	r3, r2
 8003f40:	0019      	movs	r1, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	4b4b      	ldr	r3, [pc, #300]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2220      	movs	r2, #32
 8003f52:	4013      	ands	r3, r2
 8003f54:	d009      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f56:	4b47      	ldr	r3, [pc, #284]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5a:	4a4c      	ldr	r2, [pc, #304]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	0019      	movs	r1, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	4b43      	ldr	r3, [pc, #268]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f66:	430a      	orrs	r2, r1
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2240      	movs	r2, #64	; 0x40
 8003f70:	4013      	ands	r3, r2
 8003f72:	d009      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f74:	4b3f      	ldr	r3, [pc, #252]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f78:	4a45      	ldr	r2, [pc, #276]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	0019      	movs	r1, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695a      	ldr	r2, [r3, #20]
 8003f82:	4b3c      	ldr	r3, [pc, #240]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f84:	430a      	orrs	r2, r1
 8003f86:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	2380      	movs	r3, #128	; 0x80
 8003f8e:	01db      	lsls	r3, r3, #7
 8003f90:	4013      	ands	r3, r2
 8003f92:	d015      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f94:	4b37      	ldr	r3, [pc, #220]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	0899      	lsrs	r1, r3, #2
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1a      	ldr	r2, [r3, #32]
 8003fa0:	4b34      	ldr	r3, [pc, #208]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1a      	ldr	r2, [r3, #32]
 8003faa:	2380      	movs	r3, #128	; 0x80
 8003fac:	05db      	lsls	r3, r3, #23
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d106      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003fb2:	4b30      	ldr	r3, [pc, #192]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	4b2f      	ldr	r3, [pc, #188]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003fb8:	2180      	movs	r1, #128	; 0x80
 8003fba:	0249      	lsls	r1, r1, #9
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	2380      	movs	r3, #128	; 0x80
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	4013      	ands	r3, r2
 8003fca:	d014      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003fcc:	4b29      	ldr	r3, [pc, #164]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	4393      	bics	r3, r2
 8003fd4:	0019      	movs	r1, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699a      	ldr	r2, [r3, #24]
 8003fda:	4b26      	ldr	r3, [pc, #152]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d106      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003fe8:	4b22      	ldr	r3, [pc, #136]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	4b21      	ldr	r3, [pc, #132]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003fee:	2180      	movs	r1, #128	; 0x80
 8003ff0:	0249      	lsls	r1, r1, #9
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	2380      	movs	r3, #128	; 0x80
 8003ffc:	019b      	lsls	r3, r3, #6
 8003ffe:	4013      	ands	r3, r2
 8004000:	d014      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004002:	4b1c      	ldr	r3, [pc, #112]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004006:	220c      	movs	r2, #12
 8004008:	4393      	bics	r3, r2
 800400a:	0019      	movs	r1, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69da      	ldr	r2, [r3, #28]
 8004010:	4b18      	ldr	r3, [pc, #96]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004012:	430a      	orrs	r2, r1
 8004014:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	2b04      	cmp	r3, #4
 800401c:	d106      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800401e:	4b15      	ldr	r3, [pc, #84]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	4b14      	ldr	r3, [pc, #80]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004024:	2180      	movs	r1, #128	; 0x80
 8004026:	0249      	lsls	r1, r1, #9
 8004028:	430a      	orrs	r2, r1
 800402a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	2380      	movs	r3, #128	; 0x80
 8004032:	045b      	lsls	r3, r3, #17
 8004034:	4013      	ands	r3, r2
 8004036:	d016      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004038:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800403a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403c:	4a13      	ldr	r2, [pc, #76]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800403e:	4013      	ands	r3, r2
 8004040:	0019      	movs	r1, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004046:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004048:	430a      	orrs	r2, r1
 800404a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004050:	2380      	movs	r3, #128	; 0x80
 8004052:	019b      	lsls	r3, r3, #6
 8004054:	429a      	cmp	r2, r3
 8004056:	d106      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004058:	4b06      	ldr	r3, [pc, #24]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	4b05      	ldr	r3, [pc, #20]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800405e:	2180      	movs	r1, #128	; 0x80
 8004060:	0449      	lsls	r1, r1, #17
 8004062:	430a      	orrs	r2, r1
 8004064:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004066:	2312      	movs	r3, #18
 8004068:	18fb      	adds	r3, r7, r3
 800406a:	781b      	ldrb	r3, [r3, #0]
}
 800406c:	0018      	movs	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	b006      	add	sp, #24
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40021000 	.word	0x40021000
 8004078:	40007000 	.word	0x40007000
 800407c:	fffffcff 	.word	0xfffffcff
 8004080:	fffeffff 	.word	0xfffeffff
 8004084:	00001388 	.word	0x00001388
 8004088:	efffffff 	.word	0xefffffff
 800408c:	ffffcfff 	.word	0xffffcfff
 8004090:	ffff3fff 	.word	0xffff3fff

08004094 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e0a8      	b.n	80041f8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d109      	bne.n	80040c2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	2382      	movs	r3, #130	; 0x82
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d009      	beq.n	80040ce <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	61da      	str	r2, [r3, #28]
 80040c0:	e005      	b.n	80040ce <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	225d      	movs	r2, #93	; 0x5d
 80040d8:	5c9b      	ldrb	r3, [r3, r2]
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d107      	bne.n	80040f0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	225c      	movs	r2, #92	; 0x5c
 80040e4:	2100      	movs	r1, #0
 80040e6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	0018      	movs	r0, r3
 80040ec:	f7fc fc56 	bl	800099c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	225d      	movs	r2, #93	; 0x5d
 80040f4:	2102      	movs	r1, #2
 80040f6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2140      	movs	r1, #64	; 0x40
 8004104:	438a      	bics	r2, r1
 8004106:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	23e0      	movs	r3, #224	; 0xe0
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	429a      	cmp	r2, r3
 8004112:	d902      	bls.n	800411a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	e002      	b.n	8004120 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800411a:	2380      	movs	r3, #128	; 0x80
 800411c:	015b      	lsls	r3, r3, #5
 800411e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	23f0      	movs	r3, #240	; 0xf0
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	429a      	cmp	r2, r3
 800412a:	d008      	beq.n	800413e <HAL_SPI_Init+0xaa>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68da      	ldr	r2, [r3, #12]
 8004130:	23e0      	movs	r3, #224	; 0xe0
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	429a      	cmp	r2, r3
 8004136:	d002      	beq.n	800413e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	2382      	movs	r3, #130	; 0x82
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	401a      	ands	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6899      	ldr	r1, [r3, #8]
 800414c:	2384      	movs	r3, #132	; 0x84
 800414e:	021b      	lsls	r3, r3, #8
 8004150:	400b      	ands	r3, r1
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	2102      	movs	r1, #2
 800415a:	400b      	ands	r3, r1
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	2101      	movs	r1, #1
 8004164:	400b      	ands	r3, r1
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6999      	ldr	r1, [r3, #24]
 800416c:	2380      	movs	r3, #128	; 0x80
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	400b      	ands	r3, r1
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	2138      	movs	r1, #56	; 0x38
 800417a:	400b      	ands	r3, r1
 800417c:	431a      	orrs	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	2180      	movs	r1, #128	; 0x80
 8004184:	400b      	ands	r3, r1
 8004186:	431a      	orrs	r2, r3
 8004188:	0011      	movs	r1, r2
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800418e:	2380      	movs	r3, #128	; 0x80
 8004190:	019b      	lsls	r3, r3, #6
 8004192:	401a      	ands	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	0c1b      	lsrs	r3, r3, #16
 80041a2:	2204      	movs	r2, #4
 80041a4:	401a      	ands	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	2110      	movs	r1, #16
 80041ac:	400b      	ands	r3, r1
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b4:	2108      	movs	r1, #8
 80041b6:	400b      	ands	r3, r1
 80041b8:	431a      	orrs	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68d9      	ldr	r1, [r3, #12]
 80041be:	23f0      	movs	r3, #240	; 0xf0
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	400b      	ands	r3, r1
 80041c4:	431a      	orrs	r2, r3
 80041c6:	0011      	movs	r1, r2
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	2380      	movs	r3, #128	; 0x80
 80041cc:	015b      	lsls	r3, r3, #5
 80041ce:	401a      	ands	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69da      	ldr	r2, [r3, #28]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4907      	ldr	r1, [pc, #28]	; (8004200 <HAL_SPI_Init+0x16c>)
 80041e4:	400a      	ands	r2, r1
 80041e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	225d      	movs	r2, #93	; 0x5d
 80041f2:	2101      	movs	r1, #1
 80041f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	0018      	movs	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	b004      	add	sp, #16
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	fffff7ff 	.word	0xfffff7ff

08004204 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e04a      	b.n	80042ac <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	223d      	movs	r2, #61	; 0x3d
 800421a:	5c9b      	ldrb	r3, [r3, r2]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d107      	bne.n	8004232 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	223c      	movs	r2, #60	; 0x3c
 8004226:	2100      	movs	r1, #0
 8004228:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	0018      	movs	r0, r3
 800422e:	f7fc fc5d 	bl	8000aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	223d      	movs	r2, #61	; 0x3d
 8004236:	2102      	movs	r1, #2
 8004238:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3304      	adds	r3, #4
 8004242:	0019      	movs	r1, r3
 8004244:	0010      	movs	r0, r2
 8004246:	f000 fa6b 	bl	8004720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2248      	movs	r2, #72	; 0x48
 800424e:	2101      	movs	r1, #1
 8004250:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	223e      	movs	r2, #62	; 0x3e
 8004256:	2101      	movs	r1, #1
 8004258:	5499      	strb	r1, [r3, r2]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	223f      	movs	r2, #63	; 0x3f
 800425e:	2101      	movs	r1, #1
 8004260:	5499      	strb	r1, [r3, r2]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2240      	movs	r2, #64	; 0x40
 8004266:	2101      	movs	r1, #1
 8004268:	5499      	strb	r1, [r3, r2]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2241      	movs	r2, #65	; 0x41
 800426e:	2101      	movs	r1, #1
 8004270:	5499      	strb	r1, [r3, r2]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2242      	movs	r2, #66	; 0x42
 8004276:	2101      	movs	r1, #1
 8004278:	5499      	strb	r1, [r3, r2]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2243      	movs	r2, #67	; 0x43
 800427e:	2101      	movs	r1, #1
 8004280:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2244      	movs	r2, #68	; 0x44
 8004286:	2101      	movs	r1, #1
 8004288:	5499      	strb	r1, [r3, r2]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2245      	movs	r2, #69	; 0x45
 800428e:	2101      	movs	r1, #1
 8004290:	5499      	strb	r1, [r3, r2]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2246      	movs	r2, #70	; 0x46
 8004296:	2101      	movs	r1, #1
 8004298:	5499      	strb	r1, [r3, r2]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2247      	movs	r2, #71	; 0x47
 800429e:	2101      	movs	r1, #1
 80042a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	223d      	movs	r2, #61	; 0x3d
 80042a6:	2101      	movs	r1, #1
 80042a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	0018      	movs	r0, r3
 80042ae:	46bd      	mov	sp, r7
 80042b0:	b002      	add	sp, #8
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e04a      	b.n	800435c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	223d      	movs	r2, #61	; 0x3d
 80042ca:	5c9b      	ldrb	r3, [r3, r2]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d107      	bne.n	80042e2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	223c      	movs	r2, #60	; 0x3c
 80042d6:	2100      	movs	r1, #0
 80042d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	0018      	movs	r0, r3
 80042de:	f000 f841 	bl	8004364 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	223d      	movs	r2, #61	; 0x3d
 80042e6:	2102      	movs	r1, #2
 80042e8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3304      	adds	r3, #4
 80042f2:	0019      	movs	r1, r3
 80042f4:	0010      	movs	r0, r2
 80042f6:	f000 fa13 	bl	8004720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2248      	movs	r2, #72	; 0x48
 80042fe:	2101      	movs	r1, #1
 8004300:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	223e      	movs	r2, #62	; 0x3e
 8004306:	2101      	movs	r1, #1
 8004308:	5499      	strb	r1, [r3, r2]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	223f      	movs	r2, #63	; 0x3f
 800430e:	2101      	movs	r1, #1
 8004310:	5499      	strb	r1, [r3, r2]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2240      	movs	r2, #64	; 0x40
 8004316:	2101      	movs	r1, #1
 8004318:	5499      	strb	r1, [r3, r2]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2241      	movs	r2, #65	; 0x41
 800431e:	2101      	movs	r1, #1
 8004320:	5499      	strb	r1, [r3, r2]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2242      	movs	r2, #66	; 0x42
 8004326:	2101      	movs	r1, #1
 8004328:	5499      	strb	r1, [r3, r2]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2243      	movs	r2, #67	; 0x43
 800432e:	2101      	movs	r1, #1
 8004330:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2244      	movs	r2, #68	; 0x44
 8004336:	2101      	movs	r1, #1
 8004338:	5499      	strb	r1, [r3, r2]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2245      	movs	r2, #69	; 0x45
 800433e:	2101      	movs	r1, #1
 8004340:	5499      	strb	r1, [r3, r2]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2246      	movs	r2, #70	; 0x46
 8004346:	2101      	movs	r1, #1
 8004348:	5499      	strb	r1, [r3, r2]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2247      	movs	r2, #71	; 0x47
 800434e:	2101      	movs	r1, #1
 8004350:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	223d      	movs	r2, #61	; 0x3d
 8004356:	2101      	movs	r1, #1
 8004358:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	0018      	movs	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	b002      	add	sp, #8
 8004362:	bd80      	pop	{r7, pc}

08004364 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800436c:	46c0      	nop			; (mov r8, r8)
 800436e:	46bd      	mov	sp, r7
 8004370:	b002      	add	sp, #8
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004380:	2317      	movs	r3, #23
 8004382:	18fb      	adds	r3, r7, r3
 8004384:	2200      	movs	r2, #0
 8004386:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	223c      	movs	r2, #60	; 0x3c
 800438c:	5c9b      	ldrb	r3, [r3, r2]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d101      	bne.n	8004396 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004392:	2302      	movs	r3, #2
 8004394:	e0e5      	b.n	8004562 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	223c      	movs	r2, #60	; 0x3c
 800439a:	2101      	movs	r1, #1
 800439c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b14      	cmp	r3, #20
 80043a2:	d900      	bls.n	80043a6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80043a4:	e0d1      	b.n	800454a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	009a      	lsls	r2, r3, #2
 80043aa:	4b70      	ldr	r3, [pc, #448]	; (800456c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80043ac:	18d3      	adds	r3, r2, r3
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	0011      	movs	r1, r2
 80043ba:	0018      	movs	r0, r3
 80043bc:	f000 fa3e 	bl	800483c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699a      	ldr	r2, [r3, #24]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2108      	movs	r1, #8
 80043cc:	430a      	orrs	r2, r1
 80043ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2104      	movs	r1, #4
 80043dc:	438a      	bics	r2, r1
 80043de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6999      	ldr	r1, [r3, #24]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	619a      	str	r2, [r3, #24]
      break;
 80043f2:	e0af      	b.n	8004554 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	0011      	movs	r1, r2
 80043fc:	0018      	movs	r0, r3
 80043fe:	f000 faa7 	bl	8004950 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699a      	ldr	r2, [r3, #24]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2180      	movs	r1, #128	; 0x80
 800440e:	0109      	lsls	r1, r1, #4
 8004410:	430a      	orrs	r2, r1
 8004412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699a      	ldr	r2, [r3, #24]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4954      	ldr	r1, [pc, #336]	; (8004570 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004420:	400a      	ands	r2, r1
 8004422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6999      	ldr	r1, [r3, #24]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	021a      	lsls	r2, r3, #8
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	619a      	str	r2, [r3, #24]
      break;
 8004438:	e08c      	b.n	8004554 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	0011      	movs	r1, r2
 8004442:	0018      	movs	r0, r3
 8004444:	f000 fb08 	bl	8004a58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	69da      	ldr	r2, [r3, #28]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2108      	movs	r1, #8
 8004454:	430a      	orrs	r2, r1
 8004456:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	69da      	ldr	r2, [r3, #28]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2104      	movs	r1, #4
 8004464:	438a      	bics	r2, r1
 8004466:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	69d9      	ldr	r1, [r3, #28]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	691a      	ldr	r2, [r3, #16]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	61da      	str	r2, [r3, #28]
      break;
 800447a:	e06b      	b.n	8004554 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	0011      	movs	r1, r2
 8004484:	0018      	movs	r0, r3
 8004486:	f000 fb6f 	bl	8004b68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	69da      	ldr	r2, [r3, #28]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2180      	movs	r1, #128	; 0x80
 8004496:	0109      	lsls	r1, r1, #4
 8004498:	430a      	orrs	r2, r1
 800449a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	69da      	ldr	r2, [r3, #28]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4932      	ldr	r1, [pc, #200]	; (8004570 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80044a8:	400a      	ands	r2, r1
 80044aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	69d9      	ldr	r1, [r3, #28]
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	021a      	lsls	r2, r3, #8
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	61da      	str	r2, [r3, #28]
      break;
 80044c0:	e048      	b.n	8004554 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	0011      	movs	r1, r2
 80044ca:	0018      	movs	r0, r3
 80044cc:	f000 fbb6 	bl	8004c3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2108      	movs	r1, #8
 80044dc:	430a      	orrs	r2, r1
 80044de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2104      	movs	r1, #4
 80044ec:	438a      	bics	r2, r1
 80044ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	691a      	ldr	r2, [r3, #16]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004502:	e027      	b.n	8004554 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	0011      	movs	r1, r2
 800450c:	0018      	movs	r0, r3
 800450e:	f000 fbf5 	bl	8004cfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2180      	movs	r1, #128	; 0x80
 800451e:	0109      	lsls	r1, r1, #4
 8004520:	430a      	orrs	r2, r1
 8004522:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4910      	ldr	r1, [pc, #64]	; (8004570 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004530:	400a      	ands	r2, r1
 8004532:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	021a      	lsls	r2, r3, #8
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004548:	e004      	b.n	8004554 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800454a:	2317      	movs	r3, #23
 800454c:	18fb      	adds	r3, r7, r3
 800454e:	2201      	movs	r2, #1
 8004550:	701a      	strb	r2, [r3, #0]
      break;
 8004552:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	223c      	movs	r2, #60	; 0x3c
 8004558:	2100      	movs	r1, #0
 800455a:	5499      	strb	r1, [r3, r2]

  return status;
 800455c:	2317      	movs	r3, #23
 800455e:	18fb      	adds	r3, r7, r3
 8004560:	781b      	ldrb	r3, [r3, #0]
}
 8004562:	0018      	movs	r0, r3
 8004564:	46bd      	mov	sp, r7
 8004566:	b006      	add	sp, #24
 8004568:	bd80      	pop	{r7, pc}
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	0800ab00 	.word	0x0800ab00
 8004570:	fffffbff 	.word	0xfffffbff

08004574 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800457e:	230f      	movs	r3, #15
 8004580:	18fb      	adds	r3, r7, r3
 8004582:	2200      	movs	r2, #0
 8004584:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	223c      	movs	r2, #60	; 0x3c
 800458a:	5c9b      	ldrb	r3, [r3, r2]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_TIM_ConfigClockSource+0x20>
 8004590:	2302      	movs	r3, #2
 8004592:	e0bc      	b.n	800470e <HAL_TIM_ConfigClockSource+0x19a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	223c      	movs	r2, #60	; 0x3c
 8004598:	2101      	movs	r1, #1
 800459a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	223d      	movs	r2, #61	; 0x3d
 80045a0:	2102      	movs	r1, #2
 80045a2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	4a5a      	ldr	r2, [pc, #360]	; (8004718 <HAL_TIM_ConfigClockSource+0x1a4>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4a59      	ldr	r2, [pc, #356]	; (800471c <HAL_TIM_ConfigClockSource+0x1a8>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2280      	movs	r2, #128	; 0x80
 80045ca:	0192      	lsls	r2, r2, #6
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d040      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0xde>
 80045d0:	2280      	movs	r2, #128	; 0x80
 80045d2:	0192      	lsls	r2, r2, #6
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d900      	bls.n	80045da <HAL_TIM_ConfigClockSource+0x66>
 80045d8:	e088      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x178>
 80045da:	2280      	movs	r2, #128	; 0x80
 80045dc:	0152      	lsls	r2, r2, #5
 80045de:	4293      	cmp	r3, r2
 80045e0:	d100      	bne.n	80045e4 <HAL_TIM_ConfigClockSource+0x70>
 80045e2:	e088      	b.n	80046f6 <HAL_TIM_ConfigClockSource+0x182>
 80045e4:	2280      	movs	r2, #128	; 0x80
 80045e6:	0152      	lsls	r2, r2, #5
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d900      	bls.n	80045ee <HAL_TIM_ConfigClockSource+0x7a>
 80045ec:	e07e      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x178>
 80045ee:	2b70      	cmp	r3, #112	; 0x70
 80045f0:	d018      	beq.n	8004624 <HAL_TIM_ConfigClockSource+0xb0>
 80045f2:	d900      	bls.n	80045f6 <HAL_TIM_ConfigClockSource+0x82>
 80045f4:	e07a      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x178>
 80045f6:	2b60      	cmp	r3, #96	; 0x60
 80045f8:	d04f      	beq.n	800469a <HAL_TIM_ConfigClockSource+0x126>
 80045fa:	d900      	bls.n	80045fe <HAL_TIM_ConfigClockSource+0x8a>
 80045fc:	e076      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x178>
 80045fe:	2b50      	cmp	r3, #80	; 0x50
 8004600:	d03b      	beq.n	800467a <HAL_TIM_ConfigClockSource+0x106>
 8004602:	d900      	bls.n	8004606 <HAL_TIM_ConfigClockSource+0x92>
 8004604:	e072      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x178>
 8004606:	2b40      	cmp	r3, #64	; 0x40
 8004608:	d057      	beq.n	80046ba <HAL_TIM_ConfigClockSource+0x146>
 800460a:	d900      	bls.n	800460e <HAL_TIM_ConfigClockSource+0x9a>
 800460c:	e06e      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x178>
 800460e:	2b30      	cmp	r3, #48	; 0x30
 8004610:	d063      	beq.n	80046da <HAL_TIM_ConfigClockSource+0x166>
 8004612:	d86b      	bhi.n	80046ec <HAL_TIM_ConfigClockSource+0x178>
 8004614:	2b20      	cmp	r3, #32
 8004616:	d060      	beq.n	80046da <HAL_TIM_ConfigClockSource+0x166>
 8004618:	d868      	bhi.n	80046ec <HAL_TIM_ConfigClockSource+0x178>
 800461a:	2b00      	cmp	r3, #0
 800461c:	d05d      	beq.n	80046da <HAL_TIM_ConfigClockSource+0x166>
 800461e:	2b10      	cmp	r3, #16
 8004620:	d05b      	beq.n	80046da <HAL_TIM_ConfigClockSource+0x166>
 8004622:	e063      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004634:	f000 fc42 	bl	8004ebc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2277      	movs	r2, #119	; 0x77
 8004644:	4313      	orrs	r3, r2
 8004646:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	609a      	str	r2, [r3, #8]
      break;
 8004650:	e052      	b.n	80046f8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004662:	f000 fc2b 	bl	8004ebc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2180      	movs	r1, #128	; 0x80
 8004672:	01c9      	lsls	r1, r1, #7
 8004674:	430a      	orrs	r2, r1
 8004676:	609a      	str	r2, [r3, #8]
      break;
 8004678:	e03e      	b.n	80046f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004686:	001a      	movs	r2, r3
 8004688:	f000 fb9c 	bl	8004dc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2150      	movs	r1, #80	; 0x50
 8004692:	0018      	movs	r0, r3
 8004694:	f000 fbf6 	bl	8004e84 <TIM_ITRx_SetConfig>
      break;
 8004698:	e02e      	b.n	80046f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046a6:	001a      	movs	r2, r3
 80046a8:	f000 fbba 	bl	8004e20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2160      	movs	r1, #96	; 0x60
 80046b2:	0018      	movs	r0, r3
 80046b4:	f000 fbe6 	bl	8004e84 <TIM_ITRx_SetConfig>
      break;
 80046b8:	e01e      	b.n	80046f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046c6:	001a      	movs	r2, r3
 80046c8:	f000 fb7c 	bl	8004dc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2140      	movs	r1, #64	; 0x40
 80046d2:	0018      	movs	r0, r3
 80046d4:	f000 fbd6 	bl	8004e84 <TIM_ITRx_SetConfig>
      break;
 80046d8:	e00e      	b.n	80046f8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	0019      	movs	r1, r3
 80046e4:	0010      	movs	r0, r2
 80046e6:	f000 fbcd 	bl	8004e84 <TIM_ITRx_SetConfig>
      break;
 80046ea:	e005      	b.n	80046f8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80046ec:	230f      	movs	r3, #15
 80046ee:	18fb      	adds	r3, r7, r3
 80046f0:	2201      	movs	r2, #1
 80046f2:	701a      	strb	r2, [r3, #0]
      break;
 80046f4:	e000      	b.n	80046f8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80046f6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	223d      	movs	r2, #61	; 0x3d
 80046fc:	2101      	movs	r1, #1
 80046fe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	223c      	movs	r2, #60	; 0x3c
 8004704:	2100      	movs	r1, #0
 8004706:	5499      	strb	r1, [r3, r2]

  return status;
 8004708:	230f      	movs	r3, #15
 800470a:	18fb      	adds	r3, r7, r3
 800470c:	781b      	ldrb	r3, [r3, #0]
}
 800470e:	0018      	movs	r0, r3
 8004710:	46bd      	mov	sp, r7
 8004712:	b004      	add	sp, #16
 8004714:	bd80      	pop	{r7, pc}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	ffceff88 	.word	0xffceff88
 800471c:	ffff00ff 	.word	0xffff00ff

08004720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a3a      	ldr	r2, [pc, #232]	; (800481c <TIM_Base_SetConfig+0xfc>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d007      	beq.n	8004748 <TIM_Base_SetConfig+0x28>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a39      	ldr	r2, [pc, #228]	; (8004820 <TIM_Base_SetConfig+0x100>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d003      	beq.n	8004748 <TIM_Base_SetConfig+0x28>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a38      	ldr	r2, [pc, #224]	; (8004824 <TIM_Base_SetConfig+0x104>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d108      	bne.n	800475a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2270      	movs	r2, #112	; 0x70
 800474c:	4393      	bics	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a2f      	ldr	r2, [pc, #188]	; (800481c <TIM_Base_SetConfig+0xfc>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d017      	beq.n	8004792 <TIM_Base_SetConfig+0x72>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a2e      	ldr	r2, [pc, #184]	; (8004820 <TIM_Base_SetConfig+0x100>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d013      	beq.n	8004792 <TIM_Base_SetConfig+0x72>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a2d      	ldr	r2, [pc, #180]	; (8004824 <TIM_Base_SetConfig+0x104>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00f      	beq.n	8004792 <TIM_Base_SetConfig+0x72>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a2c      	ldr	r2, [pc, #176]	; (8004828 <TIM_Base_SetConfig+0x108>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d00b      	beq.n	8004792 <TIM_Base_SetConfig+0x72>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a2b      	ldr	r2, [pc, #172]	; (800482c <TIM_Base_SetConfig+0x10c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d007      	beq.n	8004792 <TIM_Base_SetConfig+0x72>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a2a      	ldr	r2, [pc, #168]	; (8004830 <TIM_Base_SetConfig+0x110>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d003      	beq.n	8004792 <TIM_Base_SetConfig+0x72>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a29      	ldr	r2, [pc, #164]	; (8004834 <TIM_Base_SetConfig+0x114>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d108      	bne.n	80047a4 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4a28      	ldr	r2, [pc, #160]	; (8004838 <TIM_Base_SetConfig+0x118>)
 8004796:	4013      	ands	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2280      	movs	r2, #128	; 0x80
 80047a8:	4393      	bics	r3, r2
 80047aa:	001a      	movs	r2, r3
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a13      	ldr	r2, [pc, #76]	; (800481c <TIM_Base_SetConfig+0xfc>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d00b      	beq.n	80047ea <TIM_Base_SetConfig+0xca>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a15      	ldr	r2, [pc, #84]	; (800482c <TIM_Base_SetConfig+0x10c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d007      	beq.n	80047ea <TIM_Base_SetConfig+0xca>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a14      	ldr	r2, [pc, #80]	; (8004830 <TIM_Base_SetConfig+0x110>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d003      	beq.n	80047ea <TIM_Base_SetConfig+0xca>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a13      	ldr	r2, [pc, #76]	; (8004834 <TIM_Base_SetConfig+0x114>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d103      	bne.n	80047f2 <TIM_Base_SetConfig+0xd2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	691a      	ldr	r2, [r3, #16]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	2201      	movs	r2, #1
 80047fe:	4013      	ands	r3, r2
 8004800:	2b01      	cmp	r3, #1
 8004802:	d106      	bne.n	8004812 <TIM_Base_SetConfig+0xf2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	2201      	movs	r2, #1
 800480a:	4393      	bics	r3, r2
 800480c:	001a      	movs	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	611a      	str	r2, [r3, #16]
  }
}
 8004812:	46c0      	nop			; (mov r8, r8)
 8004814:	46bd      	mov	sp, r7
 8004816:	b004      	add	sp, #16
 8004818:	bd80      	pop	{r7, pc}
 800481a:	46c0      	nop			; (mov r8, r8)
 800481c:	40012c00 	.word	0x40012c00
 8004820:	40000400 	.word	0x40000400
 8004824:	40000800 	.word	0x40000800
 8004828:	40002000 	.word	0x40002000
 800482c:	40014000 	.word	0x40014000
 8004830:	40014400 	.word	0x40014400
 8004834:	40014800 	.word	0x40014800
 8004838:	fffffcff 	.word	0xfffffcff

0800483c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	2201      	movs	r2, #1
 8004852:	4393      	bics	r3, r2
 8004854:	001a      	movs	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4a32      	ldr	r2, [pc, #200]	; (8004934 <TIM_OC1_SetConfig+0xf8>)
 800486a:	4013      	ands	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2203      	movs	r2, #3
 8004872:	4393      	bics	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	4313      	orrs	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2202      	movs	r2, #2
 8004884:	4393      	bics	r3, r2
 8004886:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	4313      	orrs	r3, r2
 8004890:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a28      	ldr	r2, [pc, #160]	; (8004938 <TIM_OC1_SetConfig+0xfc>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00b      	beq.n	80048b2 <TIM_OC1_SetConfig+0x76>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a27      	ldr	r2, [pc, #156]	; (800493c <TIM_OC1_SetConfig+0x100>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d007      	beq.n	80048b2 <TIM_OC1_SetConfig+0x76>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a26      	ldr	r2, [pc, #152]	; (8004940 <TIM_OC1_SetConfig+0x104>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d003      	beq.n	80048b2 <TIM_OC1_SetConfig+0x76>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a25      	ldr	r2, [pc, #148]	; (8004944 <TIM_OC1_SetConfig+0x108>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d10c      	bne.n	80048cc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2208      	movs	r2, #8
 80048b6:	4393      	bics	r3, r2
 80048b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2204      	movs	r2, #4
 80048c8:	4393      	bics	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a1a      	ldr	r2, [pc, #104]	; (8004938 <TIM_OC1_SetConfig+0xfc>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d00b      	beq.n	80048ec <TIM_OC1_SetConfig+0xb0>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a19      	ldr	r2, [pc, #100]	; (800493c <TIM_OC1_SetConfig+0x100>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d007      	beq.n	80048ec <TIM_OC1_SetConfig+0xb0>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a18      	ldr	r2, [pc, #96]	; (8004940 <TIM_OC1_SetConfig+0x104>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d003      	beq.n	80048ec <TIM_OC1_SetConfig+0xb0>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a17      	ldr	r2, [pc, #92]	; (8004944 <TIM_OC1_SetConfig+0x108>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d111      	bne.n	8004910 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	4a16      	ldr	r2, [pc, #88]	; (8004948 <TIM_OC1_SetConfig+0x10c>)
 80048f0:	4013      	ands	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	4a15      	ldr	r2, [pc, #84]	; (800494c <TIM_OC1_SetConfig+0x110>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	4313      	orrs	r3, r2
 8004904:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	621a      	str	r2, [r3, #32]
}
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	46bd      	mov	sp, r7
 800492e:	b006      	add	sp, #24
 8004930:	bd80      	pop	{r7, pc}
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	fffeff8f 	.word	0xfffeff8f
 8004938:	40012c00 	.word	0x40012c00
 800493c:	40014000 	.word	0x40014000
 8004940:	40014400 	.word	0x40014400
 8004944:	40014800 	.word	0x40014800
 8004948:	fffffeff 	.word	0xfffffeff
 800494c:	fffffdff 	.word	0xfffffdff

08004950 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	2210      	movs	r2, #16
 8004966:	4393      	bics	r3, r2
 8004968:	001a      	movs	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4a2e      	ldr	r2, [pc, #184]	; (8004a38 <TIM_OC2_SetConfig+0xe8>)
 800497e:	4013      	ands	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4a2d      	ldr	r2, [pc, #180]	; (8004a3c <TIM_OC2_SetConfig+0xec>)
 8004986:	4013      	ands	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	021b      	lsls	r3, r3, #8
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2220      	movs	r2, #32
 800499a:	4393      	bics	r3, r2
 800499c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	011b      	lsls	r3, r3, #4
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a24      	ldr	r2, [pc, #144]	; (8004a40 <TIM_OC2_SetConfig+0xf0>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d10d      	bne.n	80049ce <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2280      	movs	r2, #128	; 0x80
 80049b6:	4393      	bics	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2240      	movs	r2, #64	; 0x40
 80049ca:	4393      	bics	r3, r2
 80049cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a1b      	ldr	r2, [pc, #108]	; (8004a40 <TIM_OC2_SetConfig+0xf0>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d00b      	beq.n	80049ee <TIM_OC2_SetConfig+0x9e>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a1a      	ldr	r2, [pc, #104]	; (8004a44 <TIM_OC2_SetConfig+0xf4>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d007      	beq.n	80049ee <TIM_OC2_SetConfig+0x9e>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a19      	ldr	r2, [pc, #100]	; (8004a48 <TIM_OC2_SetConfig+0xf8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d003      	beq.n	80049ee <TIM_OC2_SetConfig+0x9e>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a18      	ldr	r2, [pc, #96]	; (8004a4c <TIM_OC2_SetConfig+0xfc>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d113      	bne.n	8004a16 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	4a17      	ldr	r2, [pc, #92]	; (8004a50 <TIM_OC2_SetConfig+0x100>)
 80049f2:	4013      	ands	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	4a16      	ldr	r2, [pc, #88]	; (8004a54 <TIM_OC2_SetConfig+0x104>)
 80049fa:	4013      	ands	r3, r2
 80049fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	621a      	str	r2, [r3, #32]
}
 8004a30:	46c0      	nop			; (mov r8, r8)
 8004a32:	46bd      	mov	sp, r7
 8004a34:	b006      	add	sp, #24
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	feff8fff 	.word	0xfeff8fff
 8004a3c:	fffffcff 	.word	0xfffffcff
 8004a40:	40012c00 	.word	0x40012c00
 8004a44:	40014000 	.word	0x40014000
 8004a48:	40014400 	.word	0x40014400
 8004a4c:	40014800 	.word	0x40014800
 8004a50:	fffffbff 	.word	0xfffffbff
 8004a54:	fffff7ff 	.word	0xfffff7ff

08004a58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	4a33      	ldr	r2, [pc, #204]	; (8004b3c <TIM_OC3_SetConfig+0xe4>)
 8004a6e:	401a      	ands	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4a2f      	ldr	r2, [pc, #188]	; (8004b40 <TIM_OC3_SetConfig+0xe8>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2203      	movs	r2, #3
 8004a8c:	4393      	bics	r3, r2
 8004a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	4a29      	ldr	r2, [pc, #164]	; (8004b44 <TIM_OC3_SetConfig+0xec>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	021b      	lsls	r3, r3, #8
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a25      	ldr	r2, [pc, #148]	; (8004b48 <TIM_OC3_SetConfig+0xf0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d10d      	bne.n	8004ad2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	4a24      	ldr	r2, [pc, #144]	; (8004b4c <TIM_OC3_SetConfig+0xf4>)
 8004aba:	4013      	ands	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	021b      	lsls	r3, r3, #8
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	4a20      	ldr	r2, [pc, #128]	; (8004b50 <TIM_OC3_SetConfig+0xf8>)
 8004ace:	4013      	ands	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a1c      	ldr	r2, [pc, #112]	; (8004b48 <TIM_OC3_SetConfig+0xf0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00b      	beq.n	8004af2 <TIM_OC3_SetConfig+0x9a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a1d      	ldr	r2, [pc, #116]	; (8004b54 <TIM_OC3_SetConfig+0xfc>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d007      	beq.n	8004af2 <TIM_OC3_SetConfig+0x9a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a1c      	ldr	r2, [pc, #112]	; (8004b58 <TIM_OC3_SetConfig+0x100>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d003      	beq.n	8004af2 <TIM_OC3_SetConfig+0x9a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a1b      	ldr	r2, [pc, #108]	; (8004b5c <TIM_OC3_SetConfig+0x104>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d113      	bne.n	8004b1a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	4a1a      	ldr	r2, [pc, #104]	; (8004b60 <TIM_OC3_SetConfig+0x108>)
 8004af6:	4013      	ands	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	4a19      	ldr	r2, [pc, #100]	; (8004b64 <TIM_OC3_SetConfig+0x10c>)
 8004afe:	4013      	ands	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	621a      	str	r2, [r3, #32]
}
 8004b34:	46c0      	nop			; (mov r8, r8)
 8004b36:	46bd      	mov	sp, r7
 8004b38:	b006      	add	sp, #24
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	fffffeff 	.word	0xfffffeff
 8004b40:	fffeff8f 	.word	0xfffeff8f
 8004b44:	fffffdff 	.word	0xfffffdff
 8004b48:	40012c00 	.word	0x40012c00
 8004b4c:	fffff7ff 	.word	0xfffff7ff
 8004b50:	fffffbff 	.word	0xfffffbff
 8004b54:	40014000 	.word	0x40014000
 8004b58:	40014400 	.word	0x40014400
 8004b5c:	40014800 	.word	0x40014800
 8004b60:	ffffefff 	.word	0xffffefff
 8004b64:	ffffdfff 	.word	0xffffdfff

08004b68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	4a26      	ldr	r2, [pc, #152]	; (8004c18 <TIM_OC4_SetConfig+0xb0>)
 8004b7e:	401a      	ands	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4a22      	ldr	r2, [pc, #136]	; (8004c1c <TIM_OC4_SetConfig+0xb4>)
 8004b94:	4013      	ands	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4a21      	ldr	r2, [pc, #132]	; (8004c20 <TIM_OC4_SetConfig+0xb8>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	021b      	lsls	r3, r3, #8
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	4a1d      	ldr	r2, [pc, #116]	; (8004c24 <TIM_OC4_SetConfig+0xbc>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	031b      	lsls	r3, r3, #12
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a19      	ldr	r2, [pc, #100]	; (8004c28 <TIM_OC4_SetConfig+0xc0>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d00b      	beq.n	8004be0 <TIM_OC4_SetConfig+0x78>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a18      	ldr	r2, [pc, #96]	; (8004c2c <TIM_OC4_SetConfig+0xc4>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d007      	beq.n	8004be0 <TIM_OC4_SetConfig+0x78>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a17      	ldr	r2, [pc, #92]	; (8004c30 <TIM_OC4_SetConfig+0xc8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d003      	beq.n	8004be0 <TIM_OC4_SetConfig+0x78>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a16      	ldr	r2, [pc, #88]	; (8004c34 <TIM_OC4_SetConfig+0xcc>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d109      	bne.n	8004bf4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	4a15      	ldr	r2, [pc, #84]	; (8004c38 <TIM_OC4_SetConfig+0xd0>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	019b      	lsls	r3, r3, #6
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	621a      	str	r2, [r3, #32]
}
 8004c0e:	46c0      	nop			; (mov r8, r8)
 8004c10:	46bd      	mov	sp, r7
 8004c12:	b006      	add	sp, #24
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	46c0      	nop			; (mov r8, r8)
 8004c18:	ffffefff 	.word	0xffffefff
 8004c1c:	feff8fff 	.word	0xfeff8fff
 8004c20:	fffffcff 	.word	0xfffffcff
 8004c24:	ffffdfff 	.word	0xffffdfff
 8004c28:	40012c00 	.word	0x40012c00
 8004c2c:	40014000 	.word	0x40014000
 8004c30:	40014400 	.word	0x40014400
 8004c34:	40014800 	.word	0x40014800
 8004c38:	ffffbfff 	.word	0xffffbfff

08004c3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	4a23      	ldr	r2, [pc, #140]	; (8004ce0 <TIM_OC5_SetConfig+0xa4>)
 8004c52:	401a      	ands	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4a1f      	ldr	r2, [pc, #124]	; (8004ce4 <TIM_OC5_SetConfig+0xa8>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	4a1b      	ldr	r2, [pc, #108]	; (8004ce8 <TIM_OC5_SetConfig+0xac>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	041b      	lsls	r3, r3, #16
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a17      	ldr	r2, [pc, #92]	; (8004cec <TIM_OC5_SetConfig+0xb0>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00b      	beq.n	8004caa <TIM_OC5_SetConfig+0x6e>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a16      	ldr	r2, [pc, #88]	; (8004cf0 <TIM_OC5_SetConfig+0xb4>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d007      	beq.n	8004caa <TIM_OC5_SetConfig+0x6e>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a15      	ldr	r2, [pc, #84]	; (8004cf4 <TIM_OC5_SetConfig+0xb8>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d003      	beq.n	8004caa <TIM_OC5_SetConfig+0x6e>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a14      	ldr	r2, [pc, #80]	; (8004cf8 <TIM_OC5_SetConfig+0xbc>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d109      	bne.n	8004cbe <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	4a0c      	ldr	r2, [pc, #48]	; (8004ce0 <TIM_OC5_SetConfig+0xa4>)
 8004cae:	4013      	ands	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	021b      	lsls	r3, r3, #8
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	621a      	str	r2, [r3, #32]
}
 8004cd8:	46c0      	nop			; (mov r8, r8)
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	b006      	add	sp, #24
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	fffeffff 	.word	0xfffeffff
 8004ce4:	fffeff8f 	.word	0xfffeff8f
 8004ce8:	fffdffff 	.word	0xfffdffff
 8004cec:	40012c00 	.word	0x40012c00
 8004cf0:	40014000 	.word	0x40014000
 8004cf4:	40014400 	.word	0x40014400
 8004cf8:	40014800 	.word	0x40014800

08004cfc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	4a24      	ldr	r2, [pc, #144]	; (8004da4 <TIM_OC6_SetConfig+0xa8>)
 8004d12:	401a      	ands	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4a20      	ldr	r2, [pc, #128]	; (8004da8 <TIM_OC6_SetConfig+0xac>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	021b      	lsls	r3, r3, #8
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	4a1c      	ldr	r2, [pc, #112]	; (8004dac <TIM_OC6_SetConfig+0xb0>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	051b      	lsls	r3, r3, #20
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a18      	ldr	r2, [pc, #96]	; (8004db0 <TIM_OC6_SetConfig+0xb4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d00b      	beq.n	8004d6c <TIM_OC6_SetConfig+0x70>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a17      	ldr	r2, [pc, #92]	; (8004db4 <TIM_OC6_SetConfig+0xb8>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d007      	beq.n	8004d6c <TIM_OC6_SetConfig+0x70>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a16      	ldr	r2, [pc, #88]	; (8004db8 <TIM_OC6_SetConfig+0xbc>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d003      	beq.n	8004d6c <TIM_OC6_SetConfig+0x70>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a15      	ldr	r2, [pc, #84]	; (8004dbc <TIM_OC6_SetConfig+0xc0>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d109      	bne.n	8004d80 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	4a14      	ldr	r2, [pc, #80]	; (8004dc0 <TIM_OC6_SetConfig+0xc4>)
 8004d70:	4013      	ands	r3, r2
 8004d72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	029b      	lsls	r3, r3, #10
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	621a      	str	r2, [r3, #32]
}
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	b006      	add	sp, #24
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	46c0      	nop			; (mov r8, r8)
 8004da4:	ffefffff 	.word	0xffefffff
 8004da8:	feff8fff 	.word	0xfeff8fff
 8004dac:	ffdfffff 	.word	0xffdfffff
 8004db0:	40012c00 	.word	0x40012c00
 8004db4:	40014000 	.word	0x40014000
 8004db8:	40014400 	.word	0x40014400
 8004dbc:	40014800 	.word	0x40014800
 8004dc0:	fffbffff 	.word	0xfffbffff

08004dc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	4393      	bics	r3, r2
 8004dde:	001a      	movs	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	22f0      	movs	r2, #240	; 0xf0
 8004dee:	4393      	bics	r3, r2
 8004df0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	220a      	movs	r2, #10
 8004e00:	4393      	bics	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	621a      	str	r2, [r3, #32]
}
 8004e18:	46c0      	nop			; (mov r8, r8)
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	b006      	add	sp, #24
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	2210      	movs	r2, #16
 8004e38:	4393      	bics	r3, r2
 8004e3a:	001a      	movs	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	4a0d      	ldr	r2, [pc, #52]	; (8004e80 <TIM_TI2_ConfigInputStage+0x60>)
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	031b      	lsls	r3, r3, #12
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	22a0      	movs	r2, #160	; 0xa0
 8004e5c:	4393      	bics	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	011b      	lsls	r3, r3, #4
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	621a      	str	r2, [r3, #32]
}
 8004e76:	46c0      	nop			; (mov r8, r8)
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	b006      	add	sp, #24
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	46c0      	nop			; (mov r8, r8)
 8004e80:	ffff0fff 	.word	0xffff0fff

08004e84 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4a08      	ldr	r2, [pc, #32]	; (8004eb8 <TIM_ITRx_SetConfig+0x34>)
 8004e98:	4013      	ands	r3, r2
 8004e9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	2207      	movs	r2, #7
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	609a      	str	r2, [r3, #8]
}
 8004eae:	46c0      	nop			; (mov r8, r8)
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	b004      	add	sp, #16
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	ffcfff8f 	.word	0xffcfff8f

08004ebc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	4a09      	ldr	r2, [pc, #36]	; (8004ef8 <TIM_ETR_SetConfig+0x3c>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	021a      	lsls	r2, r3, #8
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	609a      	str	r2, [r3, #8]
}
 8004ef0:	46c0      	nop			; (mov r8, r8)
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	b006      	add	sp, #24
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	ffff00ff 	.word	0xffff00ff

08004efc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	223c      	movs	r2, #60	; 0x3c
 8004f0a:	5c9b      	ldrb	r3, [r3, r2]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d101      	bne.n	8004f14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f10:	2302      	movs	r3, #2
 8004f12:	e054      	b.n	8004fbe <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	223c      	movs	r2, #60	; 0x3c
 8004f18:	2101      	movs	r1, #1
 8004f1a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	223d      	movs	r2, #61	; 0x3d
 8004f20:	2102      	movs	r1, #2
 8004f22:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a23      	ldr	r2, [pc, #140]	; (8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d108      	bne.n	8004f50 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4a22      	ldr	r2, [pc, #136]	; (8004fcc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2270      	movs	r2, #112	; 0x70
 8004f54:	4393      	bics	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a16      	ldr	r2, [pc, #88]	; (8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00e      	beq.n	8004f92 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a15      	ldr	r2, [pc, #84]	; (8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d009      	beq.n	8004f92 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a14      	ldr	r2, [pc, #80]	; (8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d004      	beq.n	8004f92 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a12      	ldr	r2, [pc, #72]	; (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d10c      	bne.n	8004fac <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	2280      	movs	r2, #128	; 0x80
 8004f96:	4393      	bics	r3, r2
 8004f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	223d      	movs	r2, #61	; 0x3d
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	223c      	movs	r2, #60	; 0x3c
 8004fb8:	2100      	movs	r1, #0
 8004fba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	b004      	add	sp, #16
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	46c0      	nop			; (mov r8, r8)
 8004fc8:	40012c00 	.word	0x40012c00
 8004fcc:	ff0fffff 	.word	0xff0fffff
 8004fd0:	40000400 	.word	0x40000400
 8004fd4:	40000800 	.word	0x40000800
 8004fd8:	40014000 	.word	0x40014000

08004fdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	223c      	movs	r2, #60	; 0x3c
 8004fee:	5c9b      	ldrb	r3, [r3, r2]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e06f      	b.n	80050d8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	223c      	movs	r2, #60	; 0x3c
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	22ff      	movs	r2, #255	; 0xff
 8005004:	4393      	bics	r3, r2
 8005006:	001a      	movs	r2, r3
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	4313      	orrs	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4a33      	ldr	r2, [pc, #204]	; (80050e0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8005014:	401a      	ands	r2, r3
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4a30      	ldr	r2, [pc, #192]	; (80050e4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8005022:	401a      	ands	r2, r3
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4a2e      	ldr	r2, [pc, #184]	; (80050e8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8005030:	401a      	ands	r2, r3
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4a2b      	ldr	r2, [pc, #172]	; (80050ec <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800503e:	401a      	ands	r2, r3
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4a29      	ldr	r2, [pc, #164]	; (80050f0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800504c:	401a      	ands	r2, r3
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	4a26      	ldr	r2, [pc, #152]	; (80050f4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800505a:	401a      	ands	r2, r3
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005060:	4313      	orrs	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4a24      	ldr	r2, [pc, #144]	; (80050f8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005068:	401a      	ands	r2, r3
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	041b      	lsls	r3, r3, #16
 8005070:	4313      	orrs	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4a21      	ldr	r2, [pc, #132]	; (80050fc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005078:	401a      	ands	r2, r3
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	4313      	orrs	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a1e      	ldr	r2, [pc, #120]	; (8005100 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d11c      	bne.n	80050c6 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4a1d      	ldr	r2, [pc, #116]	; (8005104 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005090:	401a      	ands	r2, r3
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005096:	051b      	lsls	r3, r3, #20
 8005098:	4313      	orrs	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4a1a      	ldr	r2, [pc, #104]	; (8005108 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80050a0:	401a      	ands	r2, r3
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4a17      	ldr	r2, [pc, #92]	; (800510c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80050ae:	401a      	ands	r2, r3
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4a15      	ldr	r2, [pc, #84]	; (8005110 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80050bc:	401a      	ands	r2, r3
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	223c      	movs	r2, #60	; 0x3c
 80050d2:	2100      	movs	r1, #0
 80050d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	0018      	movs	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	b004      	add	sp, #16
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	fffffcff 	.word	0xfffffcff
 80050e4:	fffffbff 	.word	0xfffffbff
 80050e8:	fffff7ff 	.word	0xfffff7ff
 80050ec:	ffffefff 	.word	0xffffefff
 80050f0:	ffffdfff 	.word	0xffffdfff
 80050f4:	ffffbfff 	.word	0xffffbfff
 80050f8:	fff0ffff 	.word	0xfff0ffff
 80050fc:	efffffff 	.word	0xefffffff
 8005100:	40012c00 	.word	0x40012c00
 8005104:	ff0fffff 	.word	0xff0fffff
 8005108:	feffffff 	.word	0xfeffffff
 800510c:	fdffffff 	.word	0xfdffffff
 8005110:	dfffffff 	.word	0xdfffffff

08005114 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e046      	b.n	80051b4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2288      	movs	r2, #136	; 0x88
 800512a:	589b      	ldr	r3, [r3, r2]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d107      	bne.n	8005140 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2284      	movs	r2, #132	; 0x84
 8005134:	2100      	movs	r1, #0
 8005136:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	0018      	movs	r0, r3
 800513c:	f7fb fd62 	bl	8000c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2288      	movs	r2, #136	; 0x88
 8005144:	2124      	movs	r1, #36	; 0x24
 8005146:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2101      	movs	r1, #1
 8005154:	438a      	bics	r2, r1
 8005156:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	0018      	movs	r0, r3
 8005164:	f000 fa0e 	bl	8005584 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	0018      	movs	r0, r3
 800516c:	f000 f828 	bl	80051c0 <UART_SetConfig>
 8005170:	0003      	movs	r3, r0
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e01c      	b.n	80051b4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	490d      	ldr	r1, [pc, #52]	; (80051bc <HAL_UART_Init+0xa8>)
 8005186:	400a      	ands	r2, r1
 8005188:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	212a      	movs	r1, #42	; 0x2a
 8005196:	438a      	bics	r2, r1
 8005198:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2101      	movs	r1, #1
 80051a6:	430a      	orrs	r2, r1
 80051a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	0018      	movs	r0, r3
 80051ae:	f000 fa9d 	bl	80056ec <UART_CheckIdleState>
 80051b2:	0003      	movs	r3, r0
}
 80051b4:	0018      	movs	r0, r3
 80051b6:	46bd      	mov	sp, r7
 80051b8:	b002      	add	sp, #8
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	ffffb7ff 	.word	0xffffb7ff

080051c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b088      	sub	sp, #32
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051c8:	231b      	movs	r3, #27
 80051ca:	18fb      	adds	r3, r7, r3
 80051cc:	2200      	movs	r2, #0
 80051ce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4ab4      	ldr	r2, [pc, #720]	; (80054c0 <UART_SetConfig+0x300>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	0019      	movs	r1, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	69fa      	ldr	r2, [r7, #28]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	4aaf      	ldr	r2, [pc, #700]	; (80054c4 <UART_SetConfig+0x304>)
 8005206:	4013      	ands	r3, r2
 8005208:	0019      	movs	r1, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	69fa      	ldr	r2, [r7, #28]
 8005222:	4313      	orrs	r3, r2
 8005224:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	4aa6      	ldr	r2, [pc, #664]	; (80054c8 <UART_SetConfig+0x308>)
 800522e:	4013      	ands	r3, r2
 8005230:	0019      	movs	r1, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	69fa      	ldr	r2, [r7, #28]
 8005238:	430a      	orrs	r2, r1
 800523a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005242:	220f      	movs	r2, #15
 8005244:	4393      	bics	r3, r2
 8005246:	0019      	movs	r1, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a9c      	ldr	r2, [pc, #624]	; (80054cc <UART_SetConfig+0x30c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d127      	bne.n	80052ae <UART_SetConfig+0xee>
 800525e:	4b9c      	ldr	r3, [pc, #624]	; (80054d0 <UART_SetConfig+0x310>)
 8005260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005262:	2203      	movs	r2, #3
 8005264:	4013      	ands	r3, r2
 8005266:	2b03      	cmp	r3, #3
 8005268:	d017      	beq.n	800529a <UART_SetConfig+0xda>
 800526a:	d81b      	bhi.n	80052a4 <UART_SetConfig+0xe4>
 800526c:	2b02      	cmp	r3, #2
 800526e:	d00a      	beq.n	8005286 <UART_SetConfig+0xc6>
 8005270:	d818      	bhi.n	80052a4 <UART_SetConfig+0xe4>
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <UART_SetConfig+0xbc>
 8005276:	2b01      	cmp	r3, #1
 8005278:	d00a      	beq.n	8005290 <UART_SetConfig+0xd0>
 800527a:	e013      	b.n	80052a4 <UART_SetConfig+0xe4>
 800527c:	231a      	movs	r3, #26
 800527e:	18fb      	adds	r3, r7, r3
 8005280:	2200      	movs	r2, #0
 8005282:	701a      	strb	r2, [r3, #0]
 8005284:	e08f      	b.n	80053a6 <UART_SetConfig+0x1e6>
 8005286:	231a      	movs	r3, #26
 8005288:	18fb      	adds	r3, r7, r3
 800528a:	2202      	movs	r2, #2
 800528c:	701a      	strb	r2, [r3, #0]
 800528e:	e08a      	b.n	80053a6 <UART_SetConfig+0x1e6>
 8005290:	231a      	movs	r3, #26
 8005292:	18fb      	adds	r3, r7, r3
 8005294:	2204      	movs	r2, #4
 8005296:	701a      	strb	r2, [r3, #0]
 8005298:	e085      	b.n	80053a6 <UART_SetConfig+0x1e6>
 800529a:	231a      	movs	r3, #26
 800529c:	18fb      	adds	r3, r7, r3
 800529e:	2208      	movs	r2, #8
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	e080      	b.n	80053a6 <UART_SetConfig+0x1e6>
 80052a4:	231a      	movs	r3, #26
 80052a6:	18fb      	adds	r3, r7, r3
 80052a8:	2210      	movs	r2, #16
 80052aa:	701a      	strb	r2, [r3, #0]
 80052ac:	e07b      	b.n	80053a6 <UART_SetConfig+0x1e6>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a88      	ldr	r2, [pc, #544]	; (80054d4 <UART_SetConfig+0x314>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d127      	bne.n	8005308 <UART_SetConfig+0x148>
 80052b8:	4b85      	ldr	r3, [pc, #532]	; (80054d0 <UART_SetConfig+0x310>)
 80052ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052bc:	220c      	movs	r2, #12
 80052be:	4013      	ands	r3, r2
 80052c0:	2b0c      	cmp	r3, #12
 80052c2:	d017      	beq.n	80052f4 <UART_SetConfig+0x134>
 80052c4:	d81b      	bhi.n	80052fe <UART_SetConfig+0x13e>
 80052c6:	2b08      	cmp	r3, #8
 80052c8:	d00a      	beq.n	80052e0 <UART_SetConfig+0x120>
 80052ca:	d818      	bhi.n	80052fe <UART_SetConfig+0x13e>
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <UART_SetConfig+0x116>
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d00a      	beq.n	80052ea <UART_SetConfig+0x12a>
 80052d4:	e013      	b.n	80052fe <UART_SetConfig+0x13e>
 80052d6:	231a      	movs	r3, #26
 80052d8:	18fb      	adds	r3, r7, r3
 80052da:	2200      	movs	r2, #0
 80052dc:	701a      	strb	r2, [r3, #0]
 80052de:	e062      	b.n	80053a6 <UART_SetConfig+0x1e6>
 80052e0:	231a      	movs	r3, #26
 80052e2:	18fb      	adds	r3, r7, r3
 80052e4:	2202      	movs	r2, #2
 80052e6:	701a      	strb	r2, [r3, #0]
 80052e8:	e05d      	b.n	80053a6 <UART_SetConfig+0x1e6>
 80052ea:	231a      	movs	r3, #26
 80052ec:	18fb      	adds	r3, r7, r3
 80052ee:	2204      	movs	r2, #4
 80052f0:	701a      	strb	r2, [r3, #0]
 80052f2:	e058      	b.n	80053a6 <UART_SetConfig+0x1e6>
 80052f4:	231a      	movs	r3, #26
 80052f6:	18fb      	adds	r3, r7, r3
 80052f8:	2208      	movs	r2, #8
 80052fa:	701a      	strb	r2, [r3, #0]
 80052fc:	e053      	b.n	80053a6 <UART_SetConfig+0x1e6>
 80052fe:	231a      	movs	r3, #26
 8005300:	18fb      	adds	r3, r7, r3
 8005302:	2210      	movs	r2, #16
 8005304:	701a      	strb	r2, [r3, #0]
 8005306:	e04e      	b.n	80053a6 <UART_SetConfig+0x1e6>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a72      	ldr	r2, [pc, #456]	; (80054d8 <UART_SetConfig+0x318>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d127      	bne.n	8005362 <UART_SetConfig+0x1a2>
 8005312:	4b6f      	ldr	r3, [pc, #444]	; (80054d0 <UART_SetConfig+0x310>)
 8005314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005316:	2230      	movs	r2, #48	; 0x30
 8005318:	4013      	ands	r3, r2
 800531a:	2b30      	cmp	r3, #48	; 0x30
 800531c:	d017      	beq.n	800534e <UART_SetConfig+0x18e>
 800531e:	d81b      	bhi.n	8005358 <UART_SetConfig+0x198>
 8005320:	2b20      	cmp	r3, #32
 8005322:	d00a      	beq.n	800533a <UART_SetConfig+0x17a>
 8005324:	d818      	bhi.n	8005358 <UART_SetConfig+0x198>
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <UART_SetConfig+0x170>
 800532a:	2b10      	cmp	r3, #16
 800532c:	d00a      	beq.n	8005344 <UART_SetConfig+0x184>
 800532e:	e013      	b.n	8005358 <UART_SetConfig+0x198>
 8005330:	231a      	movs	r3, #26
 8005332:	18fb      	adds	r3, r7, r3
 8005334:	2200      	movs	r2, #0
 8005336:	701a      	strb	r2, [r3, #0]
 8005338:	e035      	b.n	80053a6 <UART_SetConfig+0x1e6>
 800533a:	231a      	movs	r3, #26
 800533c:	18fb      	adds	r3, r7, r3
 800533e:	2202      	movs	r2, #2
 8005340:	701a      	strb	r2, [r3, #0]
 8005342:	e030      	b.n	80053a6 <UART_SetConfig+0x1e6>
 8005344:	231a      	movs	r3, #26
 8005346:	18fb      	adds	r3, r7, r3
 8005348:	2204      	movs	r2, #4
 800534a:	701a      	strb	r2, [r3, #0]
 800534c:	e02b      	b.n	80053a6 <UART_SetConfig+0x1e6>
 800534e:	231a      	movs	r3, #26
 8005350:	18fb      	adds	r3, r7, r3
 8005352:	2208      	movs	r2, #8
 8005354:	701a      	strb	r2, [r3, #0]
 8005356:	e026      	b.n	80053a6 <UART_SetConfig+0x1e6>
 8005358:	231a      	movs	r3, #26
 800535a:	18fb      	adds	r3, r7, r3
 800535c:	2210      	movs	r2, #16
 800535e:	701a      	strb	r2, [r3, #0]
 8005360:	e021      	b.n	80053a6 <UART_SetConfig+0x1e6>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a5d      	ldr	r2, [pc, #372]	; (80054dc <UART_SetConfig+0x31c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d104      	bne.n	8005376 <UART_SetConfig+0x1b6>
 800536c:	231a      	movs	r3, #26
 800536e:	18fb      	adds	r3, r7, r3
 8005370:	2200      	movs	r2, #0
 8005372:	701a      	strb	r2, [r3, #0]
 8005374:	e017      	b.n	80053a6 <UART_SetConfig+0x1e6>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a59      	ldr	r2, [pc, #356]	; (80054e0 <UART_SetConfig+0x320>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d104      	bne.n	800538a <UART_SetConfig+0x1ca>
 8005380:	231a      	movs	r3, #26
 8005382:	18fb      	adds	r3, r7, r3
 8005384:	2200      	movs	r2, #0
 8005386:	701a      	strb	r2, [r3, #0]
 8005388:	e00d      	b.n	80053a6 <UART_SetConfig+0x1e6>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a55      	ldr	r2, [pc, #340]	; (80054e4 <UART_SetConfig+0x324>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d104      	bne.n	800539e <UART_SetConfig+0x1de>
 8005394:	231a      	movs	r3, #26
 8005396:	18fb      	adds	r3, r7, r3
 8005398:	2200      	movs	r2, #0
 800539a:	701a      	strb	r2, [r3, #0]
 800539c:	e003      	b.n	80053a6 <UART_SetConfig+0x1e6>
 800539e:	231a      	movs	r3, #26
 80053a0:	18fb      	adds	r3, r7, r3
 80053a2:	2210      	movs	r2, #16
 80053a4:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69da      	ldr	r2, [r3, #28]
 80053aa:	2380      	movs	r3, #128	; 0x80
 80053ac:	021b      	lsls	r3, r3, #8
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d000      	beq.n	80053b4 <UART_SetConfig+0x1f4>
 80053b2:	e065      	b.n	8005480 <UART_SetConfig+0x2c0>
  {
    switch (clocksource)
 80053b4:	231a      	movs	r3, #26
 80053b6:	18fb      	adds	r3, r7, r3
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	2b08      	cmp	r3, #8
 80053bc:	d015      	beq.n	80053ea <UART_SetConfig+0x22a>
 80053be:	dc18      	bgt.n	80053f2 <UART_SetConfig+0x232>
 80053c0:	2b04      	cmp	r3, #4
 80053c2:	d00d      	beq.n	80053e0 <UART_SetConfig+0x220>
 80053c4:	dc15      	bgt.n	80053f2 <UART_SetConfig+0x232>
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <UART_SetConfig+0x210>
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d005      	beq.n	80053da <UART_SetConfig+0x21a>
 80053ce:	e010      	b.n	80053f2 <UART_SetConfig+0x232>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053d0:	f7fe fcc2 	bl	8003d58 <HAL_RCC_GetPCLK1Freq>
 80053d4:	0003      	movs	r3, r0
 80053d6:	617b      	str	r3, [r7, #20]
        break;
 80053d8:	e012      	b.n	8005400 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053da:	4b43      	ldr	r3, [pc, #268]	; (80054e8 <UART_SetConfig+0x328>)
 80053dc:	617b      	str	r3, [r7, #20]
        break;
 80053de:	e00f      	b.n	8005400 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053e0:	f7fe fc2e 	bl	8003c40 <HAL_RCC_GetSysClockFreq>
 80053e4:	0003      	movs	r3, r0
 80053e6:	617b      	str	r3, [r7, #20]
        break;
 80053e8:	e00a      	b.n	8005400 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ea:	2380      	movs	r3, #128	; 0x80
 80053ec:	021b      	lsls	r3, r3, #8
 80053ee:	617b      	str	r3, [r7, #20]
        break;
 80053f0:	e006      	b.n	8005400 <UART_SetConfig+0x240>
      default:
        pclk = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80053f6:	231b      	movs	r3, #27
 80053f8:	18fb      	adds	r3, r7, r3
 80053fa:	2201      	movs	r2, #1
 80053fc:	701a      	strb	r2, [r3, #0]
        break;
 80053fe:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d100      	bne.n	8005408 <UART_SetConfig+0x248>
 8005406:	e0a6      	b.n	8005556 <UART_SetConfig+0x396>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800540c:	4b37      	ldr	r3, [pc, #220]	; (80054ec <UART_SetConfig+0x32c>)
 800540e:	0052      	lsls	r2, r2, #1
 8005410:	5ad3      	ldrh	r3, [r2, r3]
 8005412:	0019      	movs	r1, r3
 8005414:	6978      	ldr	r0, [r7, #20]
 8005416:	f7fa fe7b 	bl	8000110 <__udivsi3>
 800541a:	0003      	movs	r3, r0
 800541c:	005a      	lsls	r2, r3, #1
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	085b      	lsrs	r3, r3, #1
 8005424:	18d2      	adds	r2, r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	0019      	movs	r1, r3
 800542c:	0010      	movs	r0, r2
 800542e:	f7fa fe6f 	bl	8000110 <__udivsi3>
 8005432:	0003      	movs	r3, r0
 8005434:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	2b0f      	cmp	r3, #15
 800543a:	d91c      	bls.n	8005476 <UART_SetConfig+0x2b6>
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	2380      	movs	r3, #128	; 0x80
 8005440:	025b      	lsls	r3, r3, #9
 8005442:	429a      	cmp	r2, r3
 8005444:	d217      	bcs.n	8005476 <UART_SetConfig+0x2b6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	b29a      	uxth	r2, r3
 800544a:	200e      	movs	r0, #14
 800544c:	183b      	adds	r3, r7, r0
 800544e:	210f      	movs	r1, #15
 8005450:	438a      	bics	r2, r1
 8005452:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	085b      	lsrs	r3, r3, #1
 8005458:	b29b      	uxth	r3, r3
 800545a:	2207      	movs	r2, #7
 800545c:	4013      	ands	r3, r2
 800545e:	b299      	uxth	r1, r3
 8005460:	183b      	adds	r3, r7, r0
 8005462:	183a      	adds	r2, r7, r0
 8005464:	8812      	ldrh	r2, [r2, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	183a      	adds	r2, r7, r0
 8005470:	8812      	ldrh	r2, [r2, #0]
 8005472:	60da      	str	r2, [r3, #12]
 8005474:	e06f      	b.n	8005556 <UART_SetConfig+0x396>
      }
      else
      {
        ret = HAL_ERROR;
 8005476:	231b      	movs	r3, #27
 8005478:	18fb      	adds	r3, r7, r3
 800547a:	2201      	movs	r2, #1
 800547c:	701a      	strb	r2, [r3, #0]
 800547e:	e06a      	b.n	8005556 <UART_SetConfig+0x396>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005480:	231a      	movs	r3, #26
 8005482:	18fb      	adds	r3, r7, r3
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b08      	cmp	r3, #8
 8005488:	d015      	beq.n	80054b6 <UART_SetConfig+0x2f6>
 800548a:	dc31      	bgt.n	80054f0 <UART_SetConfig+0x330>
 800548c:	2b04      	cmp	r3, #4
 800548e:	d00d      	beq.n	80054ac <UART_SetConfig+0x2ec>
 8005490:	dc2e      	bgt.n	80054f0 <UART_SetConfig+0x330>
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <UART_SetConfig+0x2dc>
 8005496:	2b02      	cmp	r3, #2
 8005498:	d005      	beq.n	80054a6 <UART_SetConfig+0x2e6>
 800549a:	e029      	b.n	80054f0 <UART_SetConfig+0x330>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800549c:	f7fe fc5c 	bl	8003d58 <HAL_RCC_GetPCLK1Freq>
 80054a0:	0003      	movs	r3, r0
 80054a2:	617b      	str	r3, [r7, #20]
        break;
 80054a4:	e02b      	b.n	80054fe <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054a6:	4b10      	ldr	r3, [pc, #64]	; (80054e8 <UART_SetConfig+0x328>)
 80054a8:	617b      	str	r3, [r7, #20]
        break;
 80054aa:	e028      	b.n	80054fe <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ac:	f7fe fbc8 	bl	8003c40 <HAL_RCC_GetSysClockFreq>
 80054b0:	0003      	movs	r3, r0
 80054b2:	617b      	str	r3, [r7, #20]
        break;
 80054b4:	e023      	b.n	80054fe <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054b6:	2380      	movs	r3, #128	; 0x80
 80054b8:	021b      	lsls	r3, r3, #8
 80054ba:	617b      	str	r3, [r7, #20]
        break;
 80054bc:	e01f      	b.n	80054fe <UART_SetConfig+0x33e>
 80054be:	46c0      	nop			; (mov r8, r8)
 80054c0:	cfff69f3 	.word	0xcfff69f3
 80054c4:	ffffcfff 	.word	0xffffcfff
 80054c8:	11fff4ff 	.word	0x11fff4ff
 80054cc:	40013800 	.word	0x40013800
 80054d0:	40021000 	.word	0x40021000
 80054d4:	40004400 	.word	0x40004400
 80054d8:	40004800 	.word	0x40004800
 80054dc:	40004c00 	.word	0x40004c00
 80054e0:	40005000 	.word	0x40005000
 80054e4:	40013c00 	.word	0x40013c00
 80054e8:	00f42400 	.word	0x00f42400
 80054ec:	0800ab54 	.word	0x0800ab54
      default:
        pclk = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80054f4:	231b      	movs	r3, #27
 80054f6:	18fb      	adds	r3, r7, r3
 80054f8:	2201      	movs	r2, #1
 80054fa:	701a      	strb	r2, [r3, #0]
        break;
 80054fc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d028      	beq.n	8005556 <UART_SetConfig+0x396>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005508:	4b1d      	ldr	r3, [pc, #116]	; (8005580 <UART_SetConfig+0x3c0>)
 800550a:	0052      	lsls	r2, r2, #1
 800550c:	5ad3      	ldrh	r3, [r2, r3]
 800550e:	0019      	movs	r1, r3
 8005510:	6978      	ldr	r0, [r7, #20]
 8005512:	f7fa fdfd 	bl	8000110 <__udivsi3>
 8005516:	0003      	movs	r3, r0
 8005518:	001a      	movs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	085b      	lsrs	r3, r3, #1
 8005520:	18d2      	adds	r2, r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	0019      	movs	r1, r3
 8005528:	0010      	movs	r0, r2
 800552a:	f7fa fdf1 	bl	8000110 <__udivsi3>
 800552e:	0003      	movs	r3, r0
 8005530:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	2b0f      	cmp	r3, #15
 8005536:	d90a      	bls.n	800554e <UART_SetConfig+0x38e>
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	2380      	movs	r3, #128	; 0x80
 800553c:	025b      	lsls	r3, r3, #9
 800553e:	429a      	cmp	r2, r3
 8005540:	d205      	bcs.n	800554e <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	b29a      	uxth	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	60da      	str	r2, [r3, #12]
 800554c:	e003      	b.n	8005556 <UART_SetConfig+0x396>
      }
      else
      {
        ret = HAL_ERROR;
 800554e:	231b      	movs	r3, #27
 8005550:	18fb      	adds	r3, r7, r3
 8005552:	2201      	movs	r2, #1
 8005554:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	226a      	movs	r2, #106	; 0x6a
 800555a:	2101      	movs	r1, #1
 800555c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2268      	movs	r2, #104	; 0x68
 8005562:	2101      	movs	r1, #1
 8005564:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005572:	231b      	movs	r3, #27
 8005574:	18fb      	adds	r3, r7, r3
 8005576:	781b      	ldrb	r3, [r3, #0]
}
 8005578:	0018      	movs	r0, r3
 800557a:	46bd      	mov	sp, r7
 800557c:	b008      	add	sp, #32
 800557e:	bd80      	pop	{r7, pc}
 8005580:	0800ab54 	.word	0x0800ab54

08005584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005590:	2208      	movs	r2, #8
 8005592:	4013      	ands	r3, r2
 8005594:	d00b      	beq.n	80055ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	4a4a      	ldr	r2, [pc, #296]	; (80056c8 <UART_AdvFeatureConfig+0x144>)
 800559e:	4013      	ands	r3, r2
 80055a0:	0019      	movs	r1, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b2:	2201      	movs	r2, #1
 80055b4:	4013      	ands	r3, r2
 80055b6:	d00b      	beq.n	80055d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	4a43      	ldr	r2, [pc, #268]	; (80056cc <UART_AdvFeatureConfig+0x148>)
 80055c0:	4013      	ands	r3, r2
 80055c2:	0019      	movs	r1, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d4:	2202      	movs	r2, #2
 80055d6:	4013      	ands	r3, r2
 80055d8:	d00b      	beq.n	80055f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	4a3b      	ldr	r2, [pc, #236]	; (80056d0 <UART_AdvFeatureConfig+0x14c>)
 80055e2:	4013      	ands	r3, r2
 80055e4:	0019      	movs	r1, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	2204      	movs	r2, #4
 80055f8:	4013      	ands	r3, r2
 80055fa:	d00b      	beq.n	8005614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	4a34      	ldr	r2, [pc, #208]	; (80056d4 <UART_AdvFeatureConfig+0x150>)
 8005604:	4013      	ands	r3, r2
 8005606:	0019      	movs	r1, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005618:	2210      	movs	r2, #16
 800561a:	4013      	ands	r3, r2
 800561c:	d00b      	beq.n	8005636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	4a2c      	ldr	r2, [pc, #176]	; (80056d8 <UART_AdvFeatureConfig+0x154>)
 8005626:	4013      	ands	r3, r2
 8005628:	0019      	movs	r1, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563a:	2220      	movs	r2, #32
 800563c:	4013      	ands	r3, r2
 800563e:	d00b      	beq.n	8005658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	4a25      	ldr	r2, [pc, #148]	; (80056dc <UART_AdvFeatureConfig+0x158>)
 8005648:	4013      	ands	r3, r2
 800564a:	0019      	movs	r1, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565c:	2240      	movs	r2, #64	; 0x40
 800565e:	4013      	ands	r3, r2
 8005660:	d01d      	beq.n	800569e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	4a1d      	ldr	r2, [pc, #116]	; (80056e0 <UART_AdvFeatureConfig+0x15c>)
 800566a:	4013      	ands	r3, r2
 800566c:	0019      	movs	r1, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800567e:	2380      	movs	r3, #128	; 0x80
 8005680:	035b      	lsls	r3, r3, #13
 8005682:	429a      	cmp	r2, r3
 8005684:	d10b      	bne.n	800569e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	4a15      	ldr	r2, [pc, #84]	; (80056e4 <UART_AdvFeatureConfig+0x160>)
 800568e:	4013      	ands	r3, r2
 8005690:	0019      	movs	r1, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	430a      	orrs	r2, r1
 800569c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a2:	2280      	movs	r2, #128	; 0x80
 80056a4:	4013      	ands	r3, r2
 80056a6:	d00b      	beq.n	80056c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	4a0e      	ldr	r2, [pc, #56]	; (80056e8 <UART_AdvFeatureConfig+0x164>)
 80056b0:	4013      	ands	r3, r2
 80056b2:	0019      	movs	r1, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	605a      	str	r2, [r3, #4]
  }
}
 80056c0:	46c0      	nop			; (mov r8, r8)
 80056c2:	46bd      	mov	sp, r7
 80056c4:	b002      	add	sp, #8
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	ffff7fff 	.word	0xffff7fff
 80056cc:	fffdffff 	.word	0xfffdffff
 80056d0:	fffeffff 	.word	0xfffeffff
 80056d4:	fffbffff 	.word	0xfffbffff
 80056d8:	ffffefff 	.word	0xffffefff
 80056dc:	ffffdfff 	.word	0xffffdfff
 80056e0:	ffefffff 	.word	0xffefffff
 80056e4:	ff9fffff 	.word	0xff9fffff
 80056e8:	fff7ffff 	.word	0xfff7ffff

080056ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b092      	sub	sp, #72	; 0x48
 80056f0:	af02      	add	r7, sp, #8
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2290      	movs	r2, #144	; 0x90
 80056f8:	2100      	movs	r1, #0
 80056fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056fc:	f7fb fbda 	bl	8000eb4 <HAL_GetTick>
 8005700:	0003      	movs	r3, r0
 8005702:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2208      	movs	r2, #8
 800570c:	4013      	ands	r3, r2
 800570e:	2b08      	cmp	r3, #8
 8005710:	d12d      	bne.n	800576e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005714:	2280      	movs	r2, #128	; 0x80
 8005716:	0391      	lsls	r1, r2, #14
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	4a47      	ldr	r2, [pc, #284]	; (8005838 <UART_CheckIdleState+0x14c>)
 800571c:	9200      	str	r2, [sp, #0]
 800571e:	2200      	movs	r2, #0
 8005720:	f000 f88e 	bl	8005840 <UART_WaitOnFlagUntilTimeout>
 8005724:	1e03      	subs	r3, r0, #0
 8005726:	d022      	beq.n	800576e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005728:	f3ef 8310 	mrs	r3, PRIMASK
 800572c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005730:	63bb      	str	r3, [r7, #56]	; 0x38
 8005732:	2301      	movs	r3, #1
 8005734:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005738:	f383 8810 	msr	PRIMASK, r3
}
 800573c:	46c0      	nop			; (mov r8, r8)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2180      	movs	r1, #128	; 0x80
 800574a:	438a      	bics	r2, r1
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005750:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005754:	f383 8810 	msr	PRIMASK, r3
}
 8005758:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2288      	movs	r2, #136	; 0x88
 800575e:	2120      	movs	r1, #32
 8005760:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2284      	movs	r2, #132	; 0x84
 8005766:	2100      	movs	r1, #0
 8005768:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e060      	b.n	8005830 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2204      	movs	r2, #4
 8005776:	4013      	ands	r3, r2
 8005778:	2b04      	cmp	r3, #4
 800577a:	d146      	bne.n	800580a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800577c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800577e:	2280      	movs	r2, #128	; 0x80
 8005780:	03d1      	lsls	r1, r2, #15
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	4a2c      	ldr	r2, [pc, #176]	; (8005838 <UART_CheckIdleState+0x14c>)
 8005786:	9200      	str	r2, [sp, #0]
 8005788:	2200      	movs	r2, #0
 800578a:	f000 f859 	bl	8005840 <UART_WaitOnFlagUntilTimeout>
 800578e:	1e03      	subs	r3, r0, #0
 8005790:	d03b      	beq.n	800580a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005792:	f3ef 8310 	mrs	r3, PRIMASK
 8005796:	60fb      	str	r3, [r7, #12]
  return(result);
 8005798:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800579a:	637b      	str	r3, [r7, #52]	; 0x34
 800579c:	2301      	movs	r3, #1
 800579e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f383 8810 	msr	PRIMASK, r3
}
 80057a6:	46c0      	nop			; (mov r8, r8)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4922      	ldr	r1, [pc, #136]	; (800583c <UART_CheckIdleState+0x150>)
 80057b4:	400a      	ands	r2, r1
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f383 8810 	msr	PRIMASK, r3
}
 80057c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057c4:	f3ef 8310 	mrs	r3, PRIMASK
 80057c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80057ca:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057cc:	633b      	str	r3, [r7, #48]	; 0x30
 80057ce:	2301      	movs	r3, #1
 80057d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	f383 8810 	msr	PRIMASK, r3
}
 80057d8:	46c0      	nop			; (mov r8, r8)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2101      	movs	r1, #1
 80057e6:	438a      	bics	r2, r1
 80057e8:	609a      	str	r2, [r3, #8]
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	f383 8810 	msr	PRIMASK, r3
}
 80057f4:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	228c      	movs	r2, #140	; 0x8c
 80057fa:	2120      	movs	r1, #32
 80057fc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2284      	movs	r2, #132	; 0x84
 8005802:	2100      	movs	r1, #0
 8005804:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e012      	b.n	8005830 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2288      	movs	r2, #136	; 0x88
 800580e:	2120      	movs	r1, #32
 8005810:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	228c      	movs	r2, #140	; 0x8c
 8005816:	2120      	movs	r1, #32
 8005818:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2284      	movs	r2, #132	; 0x84
 800582a:	2100      	movs	r1, #0
 800582c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	0018      	movs	r0, r3
 8005832:	46bd      	mov	sp, r7
 8005834:	b010      	add	sp, #64	; 0x40
 8005836:	bd80      	pop	{r7, pc}
 8005838:	01ffffff 	.word	0x01ffffff
 800583c:	fffffedf 	.word	0xfffffedf

08005840 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	603b      	str	r3, [r7, #0]
 800584c:	1dfb      	adds	r3, r7, #7
 800584e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005850:	e051      	b.n	80058f6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	3301      	adds	r3, #1
 8005856:	d04e      	beq.n	80058f6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005858:	f7fb fb2c 	bl	8000eb4 <HAL_GetTick>
 800585c:	0002      	movs	r2, r0
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	429a      	cmp	r2, r3
 8005866:	d302      	bcc.n	800586e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e051      	b.n	8005916 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2204      	movs	r2, #4
 800587a:	4013      	ands	r3, r2
 800587c:	d03b      	beq.n	80058f6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2b80      	cmp	r3, #128	; 0x80
 8005882:	d038      	beq.n	80058f6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b40      	cmp	r3, #64	; 0x40
 8005888:	d035      	beq.n	80058f6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	2208      	movs	r2, #8
 8005892:	4013      	ands	r3, r2
 8005894:	2b08      	cmp	r3, #8
 8005896:	d111      	bne.n	80058bc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2208      	movs	r2, #8
 800589e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	0018      	movs	r0, r3
 80058a4:	f000 f83c 	bl	8005920 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2290      	movs	r2, #144	; 0x90
 80058ac:	2108      	movs	r1, #8
 80058ae:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2284      	movs	r2, #132	; 0x84
 80058b4:	2100      	movs	r1, #0
 80058b6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e02c      	b.n	8005916 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	69da      	ldr	r2, [r3, #28]
 80058c2:	2380      	movs	r3, #128	; 0x80
 80058c4:	011b      	lsls	r3, r3, #4
 80058c6:	401a      	ands	r2, r3
 80058c8:	2380      	movs	r3, #128	; 0x80
 80058ca:	011b      	lsls	r3, r3, #4
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d112      	bne.n	80058f6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2280      	movs	r2, #128	; 0x80
 80058d6:	0112      	lsls	r2, r2, #4
 80058d8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	0018      	movs	r0, r3
 80058de:	f000 f81f 	bl	8005920 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2290      	movs	r2, #144	; 0x90
 80058e6:	2120      	movs	r1, #32
 80058e8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2284      	movs	r2, #132	; 0x84
 80058ee:	2100      	movs	r1, #0
 80058f0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e00f      	b.n	8005916 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69db      	ldr	r3, [r3, #28]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	4013      	ands	r3, r2
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	425a      	negs	r2, r3
 8005906:	4153      	adcs	r3, r2
 8005908:	b2db      	uxtb	r3, r3
 800590a:	001a      	movs	r2, r3
 800590c:	1dfb      	adds	r3, r7, #7
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d09e      	beq.n	8005852 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	0018      	movs	r0, r3
 8005918:	46bd      	mov	sp, r7
 800591a:	b004      	add	sp, #16
 800591c:	bd80      	pop	{r7, pc}
	...

08005920 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b08e      	sub	sp, #56	; 0x38
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005928:	f3ef 8310 	mrs	r3, PRIMASK
 800592c:	617b      	str	r3, [r7, #20]
  return(result);
 800592e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005930:	637b      	str	r3, [r7, #52]	; 0x34
 8005932:	2301      	movs	r3, #1
 8005934:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	f383 8810 	msr	PRIMASK, r3
}
 800593c:	46c0      	nop			; (mov r8, r8)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4926      	ldr	r1, [pc, #152]	; (80059e4 <UART_EndRxTransfer+0xc4>)
 800594a:	400a      	ands	r2, r1
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005950:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	f383 8810 	msr	PRIMASK, r3
}
 8005958:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800595a:	f3ef 8310 	mrs	r3, PRIMASK
 800595e:	623b      	str	r3, [r7, #32]
  return(result);
 8005960:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005962:	633b      	str	r3, [r7, #48]	; 0x30
 8005964:	2301      	movs	r3, #1
 8005966:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	f383 8810 	msr	PRIMASK, r3
}
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	491b      	ldr	r1, [pc, #108]	; (80059e8 <UART_EndRxTransfer+0xc8>)
 800597c:	400a      	ands	r2, r1
 800597e:	609a      	str	r2, [r3, #8]
 8005980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005982:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005986:	f383 8810 	msr	PRIMASK, r3
}
 800598a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005990:	2b01      	cmp	r3, #1
 8005992:	d118      	bne.n	80059c6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005994:	f3ef 8310 	mrs	r3, PRIMASK
 8005998:	60bb      	str	r3, [r7, #8]
  return(result);
 800599a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800599c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800599e:	2301      	movs	r3, #1
 80059a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f383 8810 	msr	PRIMASK, r3
}
 80059a8:	46c0      	nop			; (mov r8, r8)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2110      	movs	r1, #16
 80059b6:	438a      	bics	r2, r1
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f383 8810 	msr	PRIMASK, r3
}
 80059c4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	228c      	movs	r2, #140	; 0x8c
 80059ca:	2120      	movs	r1, #32
 80059cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80059da:	46c0      	nop			; (mov r8, r8)
 80059dc:	46bd      	mov	sp, r7
 80059de:	b00e      	add	sp, #56	; 0x38
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	46c0      	nop			; (mov r8, r8)
 80059e4:	fffffedf 	.word	0xfffffedf
 80059e8:	effffffe 	.word	0xeffffffe

080059ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2284      	movs	r2, #132	; 0x84
 80059f8:	5c9b      	ldrb	r3, [r3, r2]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d101      	bne.n	8005a02 <HAL_UARTEx_DisableFifoMode+0x16>
 80059fe:	2302      	movs	r3, #2
 8005a00:	e027      	b.n	8005a52 <HAL_UARTEx_DisableFifoMode+0x66>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2284      	movs	r2, #132	; 0x84
 8005a06:	2101      	movs	r1, #1
 8005a08:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2288      	movs	r2, #136	; 0x88
 8005a0e:	2124      	movs	r1, #36	; 0x24
 8005a10:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2101      	movs	r1, #1
 8005a26:	438a      	bics	r2, r1
 8005a28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	4a0b      	ldr	r2, [pc, #44]	; (8005a5c <HAL_UARTEx_DisableFifoMode+0x70>)
 8005a2e:	4013      	ands	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2288      	movs	r2, #136	; 0x88
 8005a44:	2120      	movs	r1, #32
 8005a46:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2284      	movs	r2, #132	; 0x84
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	0018      	movs	r0, r3
 8005a54:	46bd      	mov	sp, r7
 8005a56:	b004      	add	sp, #16
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	46c0      	nop			; (mov r8, r8)
 8005a5c:	dfffffff 	.word	0xdfffffff

08005a60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2284      	movs	r2, #132	; 0x84
 8005a6e:	5c9b      	ldrb	r3, [r3, r2]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e02e      	b.n	8005ad6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2284      	movs	r2, #132	; 0x84
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2288      	movs	r2, #136	; 0x88
 8005a84:	2124      	movs	r1, #36	; 0x24
 8005a86:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	438a      	bics	r2, r1
 8005a9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	08d9      	lsrs	r1, r3, #3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	f000 f854 	bl	8005b64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2288      	movs	r2, #136	; 0x88
 8005ac8:	2120      	movs	r1, #32
 8005aca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2284      	movs	r2, #132	; 0x84
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	b004      	add	sp, #16
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2284      	movs	r2, #132	; 0x84
 8005aee:	5c9b      	ldrb	r3, [r3, r2]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d101      	bne.n	8005af8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005af4:	2302      	movs	r3, #2
 8005af6:	e02f      	b.n	8005b58 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2284      	movs	r2, #132	; 0x84
 8005afc:	2101      	movs	r1, #1
 8005afe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2288      	movs	r2, #136	; 0x88
 8005b04:	2124      	movs	r1, #36	; 0x24
 8005b06:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	438a      	bics	r2, r1
 8005b1e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	4a0e      	ldr	r2, [pc, #56]	; (8005b60 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	0019      	movs	r1, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	0018      	movs	r0, r3
 8005b3a:	f000 f813 	bl	8005b64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2288      	movs	r2, #136	; 0x88
 8005b4a:	2120      	movs	r1, #32
 8005b4c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2284      	movs	r2, #132	; 0x84
 8005b52:	2100      	movs	r1, #0
 8005b54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	0018      	movs	r0, r3
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	b004      	add	sp, #16
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	f1ffffff 	.word	0xf1ffffff

08005b64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d108      	bne.n	8005b86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	226a      	movs	r2, #106	; 0x6a
 8005b78:	2101      	movs	r1, #1
 8005b7a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2268      	movs	r2, #104	; 0x68
 8005b80:	2101      	movs	r1, #1
 8005b82:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b84:	e043      	b.n	8005c0e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b86:	260f      	movs	r6, #15
 8005b88:	19bb      	adds	r3, r7, r6
 8005b8a:	2208      	movs	r2, #8
 8005b8c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b8e:	200e      	movs	r0, #14
 8005b90:	183b      	adds	r3, r7, r0
 8005b92:	2208      	movs	r2, #8
 8005b94:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	0e5b      	lsrs	r3, r3, #25
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	240d      	movs	r4, #13
 8005ba2:	193b      	adds	r3, r7, r4
 8005ba4:	2107      	movs	r1, #7
 8005ba6:	400a      	ands	r2, r1
 8005ba8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	0f5b      	lsrs	r3, r3, #29
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	250c      	movs	r5, #12
 8005bb6:	197b      	adds	r3, r7, r5
 8005bb8:	2107      	movs	r1, #7
 8005bba:	400a      	ands	r2, r1
 8005bbc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bbe:	183b      	adds	r3, r7, r0
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	197a      	adds	r2, r7, r5
 8005bc4:	7812      	ldrb	r2, [r2, #0]
 8005bc6:	4914      	ldr	r1, [pc, #80]	; (8005c18 <UARTEx_SetNbDataToProcess+0xb4>)
 8005bc8:	5c8a      	ldrb	r2, [r1, r2]
 8005bca:	435a      	muls	r2, r3
 8005bcc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005bce:	197b      	adds	r3, r7, r5
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	4a12      	ldr	r2, [pc, #72]	; (8005c1c <UARTEx_SetNbDataToProcess+0xb8>)
 8005bd4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bd6:	0019      	movs	r1, r3
 8005bd8:	f7fa fb24 	bl	8000224 <__divsi3>
 8005bdc:	0003      	movs	r3, r0
 8005bde:	b299      	uxth	r1, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	226a      	movs	r2, #106	; 0x6a
 8005be4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005be6:	19bb      	adds	r3, r7, r6
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	193a      	adds	r2, r7, r4
 8005bec:	7812      	ldrb	r2, [r2, #0]
 8005bee:	490a      	ldr	r1, [pc, #40]	; (8005c18 <UARTEx_SetNbDataToProcess+0xb4>)
 8005bf0:	5c8a      	ldrb	r2, [r1, r2]
 8005bf2:	435a      	muls	r2, r3
 8005bf4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005bf6:	193b      	adds	r3, r7, r4
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	4a08      	ldr	r2, [pc, #32]	; (8005c1c <UARTEx_SetNbDataToProcess+0xb8>)
 8005bfc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bfe:	0019      	movs	r1, r3
 8005c00:	f7fa fb10 	bl	8000224 <__divsi3>
 8005c04:	0003      	movs	r3, r0
 8005c06:	b299      	uxth	r1, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2268      	movs	r2, #104	; 0x68
 8005c0c:	5299      	strh	r1, [r3, r2]
}
 8005c0e:	46c0      	nop			; (mov r8, r8)
 8005c10:	46bd      	mov	sp, r7
 8005c12:	b005      	add	sp, #20
 8005c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c16:	46c0      	nop			; (mov r8, r8)
 8005c18:	0800ab6c 	.word	0x0800ab6c
 8005c1c:	0800ab74 	.word	0x0800ab74

08005c20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005c2e:	4b05      	ldr	r3, [pc, #20]	; (8005c44 <USB_EnableGlobalInt+0x24>)
 8005c30:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	b004      	add	sp, #16
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	46c0      	nop			; (mov r8, r8)
 8005c44:	0000bf80 	.word	0x0000bf80

08005c48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005c50:	4b06      	ldr	r3, [pc, #24]	; (8005c6c <USB_DisableGlobalInt+0x24>)
 8005c52:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	43d2      	mvns	r2, r2
 8005c5c:	401a      	ands	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	0018      	movs	r0, r3
 8005c66:	46bd      	mov	sp, r7
 8005c68:	b004      	add	sp, #16
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	0000bf80 	.word	0x0000bf80

08005c70 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	000a      	movs	r2, r1
 8005c7a:	1cfb      	adds	r3, r7, #3
 8005c7c:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 8005c7e:	1cfb      	adds	r3, r7, #3
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d106      	bne.n	8005c94 <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	005b      	lsls	r3, r3, #1
 8005c8c:	085a      	lsrs	r2, r3, #1
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	641a      	str	r2, [r3, #64]	; 0x40
 8005c92:	e00d      	b.n	8005cb0 <USB_SetCurrentMode+0x40>
  }
  else if (mode == USB_HOST_MODE)
 8005c94:	1cfb      	adds	r3, r7, #3
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d107      	bne.n	8005cac <USB_SetCurrentMode+0x3c>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	2280      	movs	r2, #128	; 0x80
 8005ca2:	0612      	lsls	r2, r2, #24
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	641a      	str	r2, [r3, #64]	; 0x40
 8005caa:	e001      	b.n	8005cb0 <USB_SetCurrentMode+0x40>
  }
  else
  {
    return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e000      	b.n	8005cb2 <USB_SetCurrentMode+0x42>
  }

  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	0018      	movs	r0, r3
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	b002      	add	sp, #8
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8005cba:	b084      	sub	sp, #16
 8005cbc:	b5b0      	push	{r4, r5, r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	2004      	movs	r0, #4
 8005cc6:	2420      	movs	r4, #32
 8005cc8:	1900      	adds	r0, r0, r4
 8005cca:	19c0      	adds	r0, r0, r7
 8005ccc:	6001      	str	r1, [r0, #0]
 8005cce:	6042      	str	r2, [r0, #4]
 8005cd0:	6083      	str	r3, [r0, #8]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cdc:	2201      	movs	r2, #1
 8005cde:	4393      	bics	r3, r2
 8005ce0:	001a      	movs	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8005ce6:	250f      	movs	r5, #15
 8005ce8:	197c      	adds	r4, r7, r5
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2100      	movs	r1, #0
 8005cee:	0018      	movs	r0, r3
 8005cf0:	f7ff ffbe 	bl	8005c70 <USB_SetCurrentMode>
 8005cf4:	0003      	movs	r3, r0
 8005cf6:	7023      	strb	r3, [r4, #0]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 8005cfe:	197b      	adds	r3, r7, r5
 8005d00:	781b      	ldrb	r3, [r3, #0]
}
 8005d02:	0018      	movs	r0, r3
 8005d04:	46bd      	mov	sp, r7
 8005d06:	b004      	add	sp, #16
 8005d08:	bcb0      	pop	{r4, r5, r7}
 8005d0a:	bc08      	pop	{r3}
 8005d0c:	b004      	add	sp, #16
 8005d0e:	4718      	bx	r3

08005d10 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b09e      	sub	sp, #120	; 0x78
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d1a:	2377      	movs	r3, #119	; 0x77
 8005d1c:	18fb      	adds	r3, r7, r3
 8005d1e:	2200      	movs	r2, #0
 8005d20:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	18d3      	adds	r3, r2, r3
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4adc      	ldr	r2, [pc, #880]	; (80060a0 <USB_ActivateEndpoint+0x390>)
 8005d30:	4013      	ands	r3, r2
 8005d32:	673b      	str	r3, [r7, #112]	; 0x70

  /* initialize Endpoint */
  switch (ep->type)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	78db      	ldrb	r3, [r3, #3]
 8005d38:	2b03      	cmp	r3, #3
 8005d3a:	d00e      	beq.n	8005d5a <USB_ActivateEndpoint+0x4a>
 8005d3c:	dc19      	bgt.n	8005d72 <USB_ActivateEndpoint+0x62>
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d01c      	beq.n	8005d7c <USB_ActivateEndpoint+0x6c>
 8005d42:	dc16      	bgt.n	8005d72 <USB_ActivateEndpoint+0x62>
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d002      	beq.n	8005d4e <USB_ActivateEndpoint+0x3e>
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d00c      	beq.n	8005d66 <USB_ActivateEndpoint+0x56>
 8005d4c:	e011      	b.n	8005d72 <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005d4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d50:	2280      	movs	r2, #128	; 0x80
 8005d52:	0092      	lsls	r2, r2, #2
 8005d54:	4313      	orrs	r3, r2
 8005d56:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8005d58:	e011      	b.n	8005d7e <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005d5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d5c:	22c0      	movs	r2, #192	; 0xc0
 8005d5e:	00d2      	lsls	r2, r2, #3
 8005d60:	4313      	orrs	r3, r2
 8005d62:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8005d64:	e00b      	b.n	8005d7e <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005d66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d68:	2280      	movs	r2, #128	; 0x80
 8005d6a:	00d2      	lsls	r2, r2, #3
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8005d70:	e005      	b.n	8005d7e <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 8005d72:	2377      	movs	r3, #119	; 0x77
 8005d74:	18fb      	adds	r3, r7, r3
 8005d76:	2201      	movs	r2, #1
 8005d78:	701a      	strb	r2, [r3, #0]
      break;
 8005d7a:	e000      	b.n	8005d7e <USB_ActivateEndpoint+0x6e>
      break;
 8005d7c:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	18d3      	adds	r3, r2, r3
 8005d88:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005d8a:	49c6      	ldr	r1, [pc, #792]	; (80060a4 <USB_ActivateEndpoint+0x394>)
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	18d3      	adds	r3, r2, r3
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4ac2      	ldr	r2, [pc, #776]	; (80060a8 <USB_ActivateEndpoint+0x398>)
 8005d9e:	4013      	ands	r3, r2
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	7812      	ldrb	r2, [r2, #0]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	18d3      	adds	r3, r2, r3
 8005db2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005db4:	49bb      	ldr	r1, [pc, #748]	; (80060a4 <USB_ActivateEndpoint+0x394>)
 8005db6:	430a      	orrs	r2, r1
 8005db8:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	7b1b      	ldrb	r3, [r3, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d000      	beq.n	8005dc4 <USB_ActivateEndpoint+0xb4>
 8005dc2:	e155      	b.n	8006070 <USB_ActivateEndpoint+0x360>
  {
    if (ep->is_in != 0U)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	785b      	ldrb	r3, [r3, #1]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d06e      	beq.n	8005eaa <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	4ab6      	ldr	r2, [pc, #728]	; (80060ac <USB_ActivateEndpoint+0x39c>)
 8005dd4:	4694      	mov	ip, r2
 8005dd6:	4463      	add	r3, ip
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	49b2      	ldr	r1, [pc, #712]	; (80060ac <USB_ActivateEndpoint+0x39c>)
 8005de2:	468c      	mov	ip, r1
 8005de4:	4463      	add	r3, ip
 8005de6:	0c12      	lsrs	r2, r2, #16
 8005de8:	0412      	lsls	r2, r2, #16
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	4aae      	ldr	r2, [pc, #696]	; (80060ac <USB_ActivateEndpoint+0x39c>)
 8005df4:	4694      	mov	ip, r2
 8005df6:	4463      	add	r3, ip
 8005df8:	6819      	ldr	r1, [r3, #0]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	88db      	ldrh	r3, [r3, #6]
 8005dfe:	089b      	lsrs	r3, r3, #2
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	009a      	lsls	r2, r3, #2
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	48a8      	ldr	r0, [pc, #672]	; (80060ac <USB_ActivateEndpoint+0x39c>)
 8005e0c:	4684      	mov	ip, r0
 8005e0e:	4463      	add	r3, ip
 8005e10:	430a      	orrs	r2, r1
 8005e12:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	18d3      	adds	r3, r2, r3
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	61bb      	str	r3, [r7, #24]
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	2240      	movs	r2, #64	; 0x40
 8005e26:	4013      	ands	r3, r2
 8005e28:	d011      	beq.n	8005e4e <USB_ActivateEndpoint+0x13e>
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	18d3      	adds	r3, r2, r3
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a9c      	ldr	r2, [pc, #624]	; (80060a8 <USB_ActivateEndpoint+0x398>)
 8005e38:	4013      	ands	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	18d3      	adds	r3, r2, r3
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	4999      	ldr	r1, [pc, #612]	; (80060b0 <USB_ActivateEndpoint+0x3a0>)
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	78db      	ldrb	r3, [r3, #3]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d016      	beq.n	8005e84 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	18d3      	adds	r3, r2, r3
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a94      	ldr	r2, [pc, #592]	; (80060b4 <USB_ActivateEndpoint+0x3a4>)
 8005e64:	4013      	ands	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	4053      	eors	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	18d3      	adds	r3, r2, r3
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4989      	ldr	r1, [pc, #548]	; (80060a4 <USB_ActivateEndpoint+0x394>)
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	e261      	b.n	8006348 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	18d3      	adds	r3, r2, r3
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a88      	ldr	r2, [pc, #544]	; (80060b4 <USB_ActivateEndpoint+0x3a4>)
 8005e92:	4013      	ands	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	18d3      	adds	r3, r2, r3
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	4980      	ldr	r1, [pc, #512]	; (80060a4 <USB_ActivateEndpoint+0x394>)
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	e24e      	b.n	8006348 <USB_ActivateEndpoint+0x638>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	4a7e      	ldr	r2, [pc, #504]	; (80060ac <USB_ActivateEndpoint+0x39c>)
 8005eb2:	4694      	mov	ip, r2
 8005eb4:	4463      	add	r3, ip
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	00db      	lsls	r3, r3, #3
 8005ebe:	497b      	ldr	r1, [pc, #492]	; (80060ac <USB_ActivateEndpoint+0x39c>)
 8005ec0:	468c      	mov	ip, r1
 8005ec2:	4463      	add	r3, ip
 8005ec4:	0c12      	lsrs	r2, r2, #16
 8005ec6:	0412      	lsls	r2, r2, #16
 8005ec8:	605a      	str	r2, [r3, #4]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	00db      	lsls	r3, r3, #3
 8005ed0:	4a76      	ldr	r2, [pc, #472]	; (80060ac <USB_ActivateEndpoint+0x39c>)
 8005ed2:	4694      	mov	ip, r2
 8005ed4:	4463      	add	r3, ip
 8005ed6:	6859      	ldr	r1, [r3, #4]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	88db      	ldrh	r3, [r3, #6]
 8005edc:	089b      	lsrs	r3, r3, #2
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	009a      	lsls	r2, r3, #2
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	00db      	lsls	r3, r3, #3
 8005ee8:	4870      	ldr	r0, [pc, #448]	; (80060ac <USB_ActivateEndpoint+0x39c>)
 8005eea:	4684      	mov	ip, r0
 8005eec:	4463      	add	r3, ip
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	4a6c      	ldr	r2, [pc, #432]	; (80060ac <USB_ActivateEndpoint+0x39c>)
 8005efa:	4694      	mov	ip, r2
 8005efc:	4463      	add	r3, ip
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	4969      	ldr	r1, [pc, #420]	; (80060ac <USB_ActivateEndpoint+0x39c>)
 8005f08:	468c      	mov	ip, r1
 8005f0a:	4463      	add	r3, ip
 8005f0c:	0192      	lsls	r2, r2, #6
 8005f0e:	0992      	lsrs	r2, r2, #6
 8005f10:	605a      	str	r2, [r3, #4]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	2b3e      	cmp	r3, #62	; 0x3e
 8005f18:	d920      	bls.n	8005f5c <USB_ActivateEndpoint+0x24c>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	095b      	lsrs	r3, r3, #5
 8005f20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	221f      	movs	r2, #31
 8005f28:	4013      	ands	r3, r2
 8005f2a:	d102      	bne.n	8005f32 <USB_ActivateEndpoint+0x222>
 8005f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	4a5c      	ldr	r2, [pc, #368]	; (80060ac <USB_ActivateEndpoint+0x39c>)
 8005f3a:	4694      	mov	ip, r2
 8005f3c:	4463      	add	r3, ip
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f42:	069b      	lsls	r3, r3, #26
 8005f44:	431a      	orrs	r2, r3
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	4957      	ldr	r1, [pc, #348]	; (80060ac <USB_ActivateEndpoint+0x39c>)
 8005f4e:	468c      	mov	ip, r1
 8005f50:	4463      	add	r3, ip
 8005f52:	2180      	movs	r1, #128	; 0x80
 8005f54:	0609      	lsls	r1, r1, #24
 8005f56:	430a      	orrs	r2, r1
 8005f58:	605a      	str	r2, [r3, #4]
 8005f5a:	e032      	b.n	8005fc2 <USB_ActivateEndpoint+0x2b2>
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d111      	bne.n	8005f88 <USB_ActivateEndpoint+0x278>
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	00db      	lsls	r3, r3, #3
 8005f6a:	4a50      	ldr	r2, [pc, #320]	; (80060ac <USB_ActivateEndpoint+0x39c>)
 8005f6c:	4694      	mov	ip, r2
 8005f6e:	4463      	add	r3, ip
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	00db      	lsls	r3, r3, #3
 8005f78:	494c      	ldr	r1, [pc, #304]	; (80060ac <USB_ActivateEndpoint+0x39c>)
 8005f7a:	468c      	mov	ip, r1
 8005f7c:	4463      	add	r3, ip
 8005f7e:	2180      	movs	r1, #128	; 0x80
 8005f80:	0609      	lsls	r1, r1, #24
 8005f82:	430a      	orrs	r2, r1
 8005f84:	605a      	str	r2, [r3, #4]
 8005f86:	e01c      	b.n	8005fc2 <USB_ActivateEndpoint+0x2b2>
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	085b      	lsrs	r3, r3, #1
 8005f8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	2201      	movs	r2, #1
 8005f96:	4013      	ands	r3, r2
 8005f98:	d002      	beq.n	8005fa0 <USB_ActivateEndpoint+0x290>
 8005f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	00db      	lsls	r3, r3, #3
 8005fa6:	4a41      	ldr	r2, [pc, #260]	; (80060ac <USB_ActivateEndpoint+0x39c>)
 8005fa8:	4694      	mov	ip, r2
 8005faa:	4463      	add	r3, ip
 8005fac:	6859      	ldr	r1, [r3, #4]
 8005fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb0:	069a      	lsls	r2, r3, #26
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	483c      	ldr	r0, [pc, #240]	; (80060ac <USB_ActivateEndpoint+0x39c>)
 8005fba:	4684      	mov	ip, r0
 8005fbc:	4463      	add	r3, ip
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	18d3      	adds	r3, r2, r3
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fd2:	2380      	movs	r3, #128	; 0x80
 8005fd4:	01db      	lsls	r3, r3, #7
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	d011      	beq.n	8005ffe <USB_ActivateEndpoint+0x2ee>
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	18d3      	adds	r3, r2, r3
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a30      	ldr	r2, [pc, #192]	; (80060a8 <USB_ActivateEndpoint+0x398>)
 8005fe8:	4013      	ands	r3, r2
 8005fea:	627b      	str	r3, [r7, #36]	; 0x24
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	18d3      	adds	r3, r2, r3
 8005ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff8:	492f      	ldr	r1, [pc, #188]	; (80060b8 <USB_ActivateEndpoint+0x3a8>)
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d11c      	bne.n	8006040 <USB_ActivateEndpoint+0x330>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	18d3      	adds	r3, r2, r3
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a2a      	ldr	r2, [pc, #168]	; (80060bc <USB_ActivateEndpoint+0x3ac>)
 8006014:	4013      	ands	r3, r2
 8006016:	61fb      	str	r3, [r7, #28]
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	2280      	movs	r2, #128	; 0x80
 800601c:	0152      	lsls	r2, r2, #5
 800601e:	4053      	eors	r3, r2
 8006020:	61fb      	str	r3, [r7, #28]
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	2280      	movs	r2, #128	; 0x80
 8006026:	0192      	lsls	r2, r2, #6
 8006028:	4053      	eors	r3, r2
 800602a:	61fb      	str	r3, [r7, #28]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	18d3      	adds	r3, r2, r3
 8006036:	69fa      	ldr	r2, [r7, #28]
 8006038:	491a      	ldr	r1, [pc, #104]	; (80060a4 <USB_ActivateEndpoint+0x394>)
 800603a:	430a      	orrs	r2, r1
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	e183      	b.n	8006348 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	18d3      	adds	r3, r2, r3
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a1b      	ldr	r2, [pc, #108]	; (80060bc <USB_ActivateEndpoint+0x3ac>)
 800604e:	4013      	ands	r3, r2
 8006050:	623b      	str	r3, [r7, #32]
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	2280      	movs	r2, #128	; 0x80
 8006056:	0192      	lsls	r2, r2, #6
 8006058:	4053      	eors	r3, r2
 800605a:	623b      	str	r3, [r7, #32]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	18d3      	adds	r3, r2, r3
 8006066:	6a3a      	ldr	r2, [r7, #32]
 8006068:	490e      	ldr	r1, [pc, #56]	; (80060a4 <USB_ActivateEndpoint+0x394>)
 800606a:	430a      	orrs	r2, r1
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	e16b      	b.n	8006348 <USB_ActivateEndpoint+0x638>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	78db      	ldrb	r3, [r3, #3]
 8006074:	2b02      	cmp	r3, #2
 8006076:	d125      	bne.n	80060c4 <USB_ActivateEndpoint+0x3b4>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	18d3      	adds	r3, r2, r3
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a08      	ldr	r2, [pc, #32]	; (80060a8 <USB_ActivateEndpoint+0x398>)
 8006086:	4013      	ands	r3, r2
 8006088:	663b      	str	r3, [r7, #96]	; 0x60
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	18d3      	adds	r3, r2, r3
 8006094:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006096:	490a      	ldr	r1, [pc, #40]	; (80060c0 <USB_ActivateEndpoint+0x3b0>)
 8006098:	430a      	orrs	r2, r1
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	e024      	b.n	80060e8 <USB_ActivateEndpoint+0x3d8>
 800609e:	46c0      	nop			; (mov r8, r8)
 80060a0:	07ff898f 	.word	0x07ff898f
 80060a4:	00008080 	.word	0x00008080
 80060a8:	07ff8f8f 	.word	0x07ff8f8f
 80060ac:	40009800 	.word	0x40009800
 80060b0:	000080c0 	.word	0x000080c0
 80060b4:	07ff8fbf 	.word	0x07ff8fbf
 80060b8:	0000c080 	.word	0x0000c080
 80060bc:	07ffbf8f 	.word	0x07ffbf8f
 80060c0:	00008180 	.word	0x00008180
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	18d3      	adds	r3, r2, r3
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4aa1      	ldr	r2, [pc, #644]	; (8006358 <USB_ActivateEndpoint+0x648>)
 80060d2:	4013      	ands	r3, r2
 80060d4:	667b      	str	r3, [r7, #100]	; 0x64
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	18d3      	adds	r3, r2, r3
 80060e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80060e2:	499e      	ldr	r1, [pc, #632]	; (800635c <USB_ActivateEndpoint+0x64c>)
 80060e4:	430a      	orrs	r2, r1
 80060e6:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	4a9c      	ldr	r2, [pc, #624]	; (8006360 <USB_ActivateEndpoint+0x650>)
 80060f0:	4694      	mov	ip, r2
 80060f2:	4463      	add	r3, ip
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	4998      	ldr	r1, [pc, #608]	; (8006360 <USB_ActivateEndpoint+0x650>)
 80060fe:	468c      	mov	ip, r1
 8006100:	4463      	add	r3, ip
 8006102:	0c12      	lsrs	r2, r2, #16
 8006104:	0412      	lsls	r2, r2, #16
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	00db      	lsls	r3, r3, #3
 800610e:	4a94      	ldr	r2, [pc, #592]	; (8006360 <USB_ActivateEndpoint+0x650>)
 8006110:	4694      	mov	ip, r2
 8006112:	4463      	add	r3, ip
 8006114:	6819      	ldr	r1, [r3, #0]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	891b      	ldrh	r3, [r3, #8]
 800611a:	089b      	lsrs	r3, r3, #2
 800611c:	b29b      	uxth	r3, r3
 800611e:	009a      	lsls	r2, r3, #2
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	00db      	lsls	r3, r3, #3
 8006126:	488e      	ldr	r0, [pc, #568]	; (8006360 <USB_ActivateEndpoint+0x650>)
 8006128:	4684      	mov	ip, r0
 800612a:	4463      	add	r3, ip
 800612c:	430a      	orrs	r2, r1
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	4a8a      	ldr	r2, [pc, #552]	; (8006360 <USB_ActivateEndpoint+0x650>)
 8006138:	4694      	mov	ip, r2
 800613a:	4463      	add	r3, ip
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	4986      	ldr	r1, [pc, #536]	; (8006360 <USB_ActivateEndpoint+0x650>)
 8006146:	468c      	mov	ip, r1
 8006148:	4463      	add	r3, ip
 800614a:	0c12      	lsrs	r2, r2, #16
 800614c:	0412      	lsls	r2, r2, #16
 800614e:	605a      	str	r2, [r3, #4]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	00db      	lsls	r3, r3, #3
 8006156:	4a82      	ldr	r2, [pc, #520]	; (8006360 <USB_ActivateEndpoint+0x650>)
 8006158:	4694      	mov	ip, r2
 800615a:	4463      	add	r3, ip
 800615c:	6859      	ldr	r1, [r3, #4]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	895b      	ldrh	r3, [r3, #10]
 8006162:	089b      	lsrs	r3, r3, #2
 8006164:	b29b      	uxth	r3, r3
 8006166:	009a      	lsls	r2, r3, #2
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	487c      	ldr	r0, [pc, #496]	; (8006360 <USB_ActivateEndpoint+0x650>)
 8006170:	4684      	mov	ip, r0
 8006172:	4463      	add	r3, ip
 8006174:	430a      	orrs	r2, r1
 8006176:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	785b      	ldrb	r3, [r3, #1]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d169      	bne.n	8006254 <USB_ActivateEndpoint+0x544>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	18d3      	adds	r3, r2, r3
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	643b      	str	r3, [r7, #64]	; 0x40
 800618e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006190:	2380      	movs	r3, #128	; 0x80
 8006192:	01db      	lsls	r3, r3, #7
 8006194:	4013      	ands	r3, r2
 8006196:	d011      	beq.n	80061bc <USB_ActivateEndpoint+0x4ac>
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	18d3      	adds	r3, r2, r3
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a6f      	ldr	r2, [pc, #444]	; (8006364 <USB_ActivateEndpoint+0x654>)
 80061a6:	4013      	ands	r3, r2
 80061a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	18d3      	adds	r3, r2, r3
 80061b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061b6:	496c      	ldr	r1, [pc, #432]	; (8006368 <USB_ActivateEndpoint+0x658>)
 80061b8:	430a      	orrs	r2, r1
 80061ba:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	18d3      	adds	r3, r2, r3
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80061ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061cc:	2240      	movs	r2, #64	; 0x40
 80061ce:	4013      	ands	r3, r2
 80061d0:	d011      	beq.n	80061f6 <USB_ActivateEndpoint+0x4e6>
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	18d3      	adds	r3, r2, r3
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a61      	ldr	r2, [pc, #388]	; (8006364 <USB_ActivateEndpoint+0x654>)
 80061e0:	4013      	ands	r3, r2
 80061e2:	637b      	str	r3, [r7, #52]	; 0x34
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	18d3      	adds	r3, r2, r3
 80061ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061f0:	495e      	ldr	r1, [pc, #376]	; (800636c <USB_ActivateEndpoint+0x65c>)
 80061f2:	430a      	orrs	r2, r1
 80061f4:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	18d3      	adds	r3, r2, r3
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a5b      	ldr	r2, [pc, #364]	; (8006370 <USB_ActivateEndpoint+0x660>)
 8006204:	4013      	ands	r3, r2
 8006206:	633b      	str	r3, [r7, #48]	; 0x30
 8006208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620a:	2280      	movs	r2, #128	; 0x80
 800620c:	0152      	lsls	r2, r2, #5
 800620e:	4053      	eors	r3, r2
 8006210:	633b      	str	r3, [r7, #48]	; 0x30
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	2280      	movs	r2, #128	; 0x80
 8006216:	0192      	lsls	r2, r2, #6
 8006218:	4053      	eors	r3, r2
 800621a:	633b      	str	r3, [r7, #48]	; 0x30
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	18d3      	adds	r3, r2, r3
 8006226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006228:	494c      	ldr	r1, [pc, #304]	; (800635c <USB_ActivateEndpoint+0x64c>)
 800622a:	430a      	orrs	r2, r1
 800622c:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	18d3      	adds	r3, r2, r3
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a4e      	ldr	r2, [pc, #312]	; (8006374 <USB_ActivateEndpoint+0x664>)
 800623c:	4013      	ands	r3, r2
 800623e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	18d3      	adds	r3, r2, r3
 800624a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800624c:	4943      	ldr	r1, [pc, #268]	; (800635c <USB_ActivateEndpoint+0x64c>)
 800624e:	430a      	orrs	r2, r1
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	e079      	b.n	8006348 <USB_ActivateEndpoint+0x638>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	18d3      	adds	r3, r2, r3
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006262:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006264:	2380      	movs	r3, #128	; 0x80
 8006266:	01db      	lsls	r3, r3, #7
 8006268:	4013      	ands	r3, r2
 800626a:	d011      	beq.n	8006290 <USB_ActivateEndpoint+0x580>
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	18d3      	adds	r3, r2, r3
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a3a      	ldr	r2, [pc, #232]	; (8006364 <USB_ActivateEndpoint+0x654>)
 800627a:	4013      	ands	r3, r2
 800627c:	65bb      	str	r3, [r7, #88]	; 0x58
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	18d3      	adds	r3, r2, r3
 8006288:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800628a:	4937      	ldr	r1, [pc, #220]	; (8006368 <USB_ActivateEndpoint+0x658>)
 800628c:	430a      	orrs	r2, r1
 800628e:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	18d3      	adds	r3, r2, r3
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	657b      	str	r3, [r7, #84]	; 0x54
 800629e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062a0:	2240      	movs	r2, #64	; 0x40
 80062a2:	4013      	ands	r3, r2
 80062a4:	d011      	beq.n	80062ca <USB_ActivateEndpoint+0x5ba>
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	18d3      	adds	r3, r2, r3
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a2c      	ldr	r2, [pc, #176]	; (8006364 <USB_ActivateEndpoint+0x654>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	653b      	str	r3, [r7, #80]	; 0x50
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	18d3      	adds	r3, r2, r3
 80062c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80062c4:	4929      	ldr	r1, [pc, #164]	; (800636c <USB_ActivateEndpoint+0x65c>)
 80062c6:	430a      	orrs	r2, r1
 80062c8:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	78db      	ldrb	r3, [r3, #3]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d016      	beq.n	8006300 <USB_ActivateEndpoint+0x5f0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	18d3      	adds	r3, r2, r3
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a25      	ldr	r2, [pc, #148]	; (8006374 <USB_ActivateEndpoint+0x664>)
 80062e0:	4013      	ands	r3, r2
 80062e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80062e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062e6:	2220      	movs	r2, #32
 80062e8:	4053      	eors	r3, r2
 80062ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	18d3      	adds	r3, r2, r3
 80062f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062f8:	4918      	ldr	r1, [pc, #96]	; (800635c <USB_ActivateEndpoint+0x64c>)
 80062fa:	430a      	orrs	r2, r1
 80062fc:	601a      	str	r2, [r3, #0]
 80062fe:	e011      	b.n	8006324 <USB_ActivateEndpoint+0x614>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	18d3      	adds	r3, r2, r3
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a19      	ldr	r2, [pc, #100]	; (8006374 <USB_ActivateEndpoint+0x664>)
 800630e:	4013      	ands	r3, r2
 8006310:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	18d3      	adds	r3, r2, r3
 800631c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800631e:	490f      	ldr	r1, [pc, #60]	; (800635c <USB_ActivateEndpoint+0x64c>)
 8006320:	430a      	orrs	r2, r1
 8006322:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	18d3      	adds	r3, r2, r3
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a0f      	ldr	r2, [pc, #60]	; (8006370 <USB_ActivateEndpoint+0x660>)
 8006332:	4013      	ands	r3, r2
 8006334:	647b      	str	r3, [r7, #68]	; 0x44
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	18d3      	adds	r3, r2, r3
 8006340:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006342:	4906      	ldr	r1, [pc, #24]	; (800635c <USB_ActivateEndpoint+0x64c>)
 8006344:	430a      	orrs	r2, r1
 8006346:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006348:	2377      	movs	r3, #119	; 0x77
 800634a:	18fb      	adds	r3, r7, r3
 800634c:	781b      	ldrb	r3, [r3, #0]
}
 800634e:	0018      	movs	r0, r3
 8006350:	46bd      	mov	sp, r7
 8006352:	b01e      	add	sp, #120	; 0x78
 8006354:	bd80      	pop	{r7, pc}
 8006356:	46c0      	nop			; (mov r8, r8)
 8006358:	07ff8e8f 	.word	0x07ff8e8f
 800635c:	00008080 	.word	0x00008080
 8006360:	40009800 	.word	0x40009800
 8006364:	07ff8f8f 	.word	0x07ff8f8f
 8006368:	0000c080 	.word	0x0000c080
 800636c:	000080c0 	.word	0x000080c0
 8006370:	07ffbf8f 	.word	0x07ffbf8f
 8006374:	07ff8fbf 	.word	0x07ff8fbf

08006378 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b096      	sub	sp, #88	; 0x58
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	7b1b      	ldrb	r3, [r3, #12]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d164      	bne.n	8006454 <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	785b      	ldrb	r3, [r3, #1]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d02f      	beq.n	80063f2 <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	18d3      	adds	r3, r2, r3
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	613b      	str	r3, [r7, #16]
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	2240      	movs	r2, #64	; 0x40
 80063a4:	4013      	ands	r3, r2
 80063a6:	d011      	beq.n	80063cc <USB_DeactivateEndpoint+0x54>
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	18d3      	adds	r3, r2, r3
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a9d      	ldr	r2, [pc, #628]	; (800662c <USB_DeactivateEndpoint+0x2b4>)
 80063b6:	4013      	ands	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	18d3      	adds	r3, r2, r3
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	499a      	ldr	r1, [pc, #616]	; (8006630 <USB_DeactivateEndpoint+0x2b8>)
 80063c8:	430a      	orrs	r2, r1
 80063ca:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	18d3      	adds	r3, r2, r3
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a96      	ldr	r2, [pc, #600]	; (8006634 <USB_DeactivateEndpoint+0x2bc>)
 80063da:	4013      	ands	r3, r2
 80063dc:	60bb      	str	r3, [r7, #8]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	18d3      	adds	r3, r2, r3
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	4993      	ldr	r1, [pc, #588]	; (8006638 <USB_DeactivateEndpoint+0x2c0>)
 80063ec:	430a      	orrs	r2, r1
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	e117      	b.n	8006622 <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	18d3      	adds	r3, r2, r3
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	61fb      	str	r3, [r7, #28]
 8006400:	69fa      	ldr	r2, [r7, #28]
 8006402:	2380      	movs	r3, #128	; 0x80
 8006404:	01db      	lsls	r3, r3, #7
 8006406:	4013      	ands	r3, r2
 8006408:	d011      	beq.n	800642e <USB_DeactivateEndpoint+0xb6>
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	18d3      	adds	r3, r2, r3
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a85      	ldr	r2, [pc, #532]	; (800662c <USB_DeactivateEndpoint+0x2b4>)
 8006418:	4013      	ands	r3, r2
 800641a:	61bb      	str	r3, [r7, #24]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	18d3      	adds	r3, r2, r3
 8006426:	69ba      	ldr	r2, [r7, #24]
 8006428:	4984      	ldr	r1, [pc, #528]	; (800663c <USB_DeactivateEndpoint+0x2c4>)
 800642a:	430a      	orrs	r2, r1
 800642c:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	18d3      	adds	r3, r2, r3
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a81      	ldr	r2, [pc, #516]	; (8006640 <USB_DeactivateEndpoint+0x2c8>)
 800643c:	4013      	ands	r3, r2
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	18d3      	adds	r3, r2, r3
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	497a      	ldr	r1, [pc, #488]	; (8006638 <USB_DeactivateEndpoint+0x2c0>)
 800644e:	430a      	orrs	r2, r1
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	e0e6      	b.n	8006622 <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	785b      	ldrb	r3, [r3, #1]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d171      	bne.n	8006540 <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	18d3      	adds	r3, r2, r3
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	63bb      	str	r3, [r7, #56]	; 0x38
 800646a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800646c:	2380      	movs	r3, #128	; 0x80
 800646e:	01db      	lsls	r3, r3, #7
 8006470:	4013      	ands	r3, r2
 8006472:	d011      	beq.n	8006498 <USB_DeactivateEndpoint+0x120>
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	18d3      	adds	r3, r2, r3
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a6a      	ldr	r2, [pc, #424]	; (800662c <USB_DeactivateEndpoint+0x2b4>)
 8006482:	4013      	ands	r3, r2
 8006484:	637b      	str	r3, [r7, #52]	; 0x34
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	18d3      	adds	r3, r2, r3
 8006490:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006492:	496a      	ldr	r1, [pc, #424]	; (800663c <USB_DeactivateEndpoint+0x2c4>)
 8006494:	430a      	orrs	r2, r1
 8006496:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	18d3      	adds	r3, r2, r3
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	633b      	str	r3, [r7, #48]	; 0x30
 80064a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a8:	2240      	movs	r2, #64	; 0x40
 80064aa:	4013      	ands	r3, r2
 80064ac:	d011      	beq.n	80064d2 <USB_DeactivateEndpoint+0x15a>
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	18d3      	adds	r3, r2, r3
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a5c      	ldr	r2, [pc, #368]	; (800662c <USB_DeactivateEndpoint+0x2b4>)
 80064bc:	4013      	ands	r3, r2
 80064be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	18d3      	adds	r3, r2, r3
 80064ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064cc:	4958      	ldr	r1, [pc, #352]	; (8006630 <USB_DeactivateEndpoint+0x2b8>)
 80064ce:	430a      	orrs	r2, r1
 80064d0:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	18d3      	adds	r3, r2, r3
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a53      	ldr	r2, [pc, #332]	; (800662c <USB_DeactivateEndpoint+0x2b4>)
 80064e0:	4013      	ands	r3, r2
 80064e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	18d3      	adds	r3, r2, r3
 80064ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064f0:	494f      	ldr	r1, [pc, #316]	; (8006630 <USB_DeactivateEndpoint+0x2b8>)
 80064f2:	430a      	orrs	r2, r1
 80064f4:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	18d3      	adds	r3, r2, r3
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a4f      	ldr	r2, [pc, #316]	; (8006640 <USB_DeactivateEndpoint+0x2c8>)
 8006504:	4013      	ands	r3, r2
 8006506:	627b      	str	r3, [r7, #36]	; 0x24
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	18d3      	adds	r3, r2, r3
 8006512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006514:	4948      	ldr	r1, [pc, #288]	; (8006638 <USB_DeactivateEndpoint+0x2c0>)
 8006516:	430a      	orrs	r2, r1
 8006518:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	18d3      	adds	r3, r2, r3
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a43      	ldr	r2, [pc, #268]	; (8006634 <USB_DeactivateEndpoint+0x2bc>)
 8006528:	4013      	ands	r3, r2
 800652a:	623b      	str	r3, [r7, #32]
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	18d3      	adds	r3, r2, r3
 8006536:	6a3a      	ldr	r2, [r7, #32]
 8006538:	493f      	ldr	r1, [pc, #252]	; (8006638 <USB_DeactivateEndpoint+0x2c0>)
 800653a:	430a      	orrs	r2, r1
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	e070      	b.n	8006622 <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	18d3      	adds	r3, r2, r3
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	657b      	str	r3, [r7, #84]	; 0x54
 800654e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006550:	2380      	movs	r3, #128	; 0x80
 8006552:	01db      	lsls	r3, r3, #7
 8006554:	4013      	ands	r3, r2
 8006556:	d011      	beq.n	800657c <USB_DeactivateEndpoint+0x204>
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	18d3      	adds	r3, r2, r3
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a31      	ldr	r2, [pc, #196]	; (800662c <USB_DeactivateEndpoint+0x2b4>)
 8006566:	4013      	ands	r3, r2
 8006568:	653b      	str	r3, [r7, #80]	; 0x50
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	18d3      	adds	r3, r2, r3
 8006574:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006576:	4931      	ldr	r1, [pc, #196]	; (800663c <USB_DeactivateEndpoint+0x2c4>)
 8006578:	430a      	orrs	r2, r1
 800657a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	18d3      	adds	r3, r2, r3
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	64fb      	str	r3, [r7, #76]	; 0x4c
 800658a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800658c:	2240      	movs	r2, #64	; 0x40
 800658e:	4013      	ands	r3, r2
 8006590:	d011      	beq.n	80065b6 <USB_DeactivateEndpoint+0x23e>
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	18d3      	adds	r3, r2, r3
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a23      	ldr	r2, [pc, #140]	; (800662c <USB_DeactivateEndpoint+0x2b4>)
 80065a0:	4013      	ands	r3, r2
 80065a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	18d3      	adds	r3, r2, r3
 80065ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065b0:	491f      	ldr	r1, [pc, #124]	; (8006630 <USB_DeactivateEndpoint+0x2b8>)
 80065b2:	430a      	orrs	r2, r1
 80065b4:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	18d3      	adds	r3, r2, r3
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1a      	ldr	r2, [pc, #104]	; (800662c <USB_DeactivateEndpoint+0x2b4>)
 80065c4:	4013      	ands	r3, r2
 80065c6:	647b      	str	r3, [r7, #68]	; 0x44
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	18d3      	adds	r3, r2, r3
 80065d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065d4:	4919      	ldr	r1, [pc, #100]	; (800663c <USB_DeactivateEndpoint+0x2c4>)
 80065d6:	430a      	orrs	r2, r1
 80065d8:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	18d3      	adds	r3, r2, r3
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a13      	ldr	r2, [pc, #76]	; (8006634 <USB_DeactivateEndpoint+0x2bc>)
 80065e8:	4013      	ands	r3, r2
 80065ea:	643b      	str	r3, [r7, #64]	; 0x40
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	18d3      	adds	r3, r2, r3
 80065f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065f8:	490f      	ldr	r1, [pc, #60]	; (8006638 <USB_DeactivateEndpoint+0x2c0>)
 80065fa:	430a      	orrs	r2, r1
 80065fc:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	18d3      	adds	r3, r2, r3
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a0d      	ldr	r2, [pc, #52]	; (8006640 <USB_DeactivateEndpoint+0x2c8>)
 800660c:	4013      	ands	r3, r2
 800660e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	18d3      	adds	r3, r2, r3
 800661a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800661c:	4906      	ldr	r1, [pc, #24]	; (8006638 <USB_DeactivateEndpoint+0x2c0>)
 800661e:	430a      	orrs	r2, r1
 8006620:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	0018      	movs	r0, r3
 8006626:	46bd      	mov	sp, r7
 8006628:	b016      	add	sp, #88	; 0x58
 800662a:	bd80      	pop	{r7, pc}
 800662c:	07ff8f8f 	.word	0x07ff8f8f
 8006630:	000080c0 	.word	0x000080c0
 8006634:	07ff8fbf 	.word	0x07ff8fbf
 8006638:	00008080 	.word	0x00008080
 800663c:	0000c080 	.word	0x0000c080
 8006640:	07ffbf8f 	.word	0x07ffbf8f

08006644 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006644:	b590      	push	{r4, r7, lr}
 8006646:	b097      	sub	sp, #92	; 0x5c
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	785b      	ldrb	r3, [r3, #1]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d001      	beq.n	800665a <USB_EPStartXfer+0x16>
 8006656:	f000 fcbf 	bl	8006fd8 <USB_EPStartXfer+0x994>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	699a      	ldr	r2, [r3, #24]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	429a      	cmp	r2, r3
 8006664:	d903      	bls.n	800666e <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	657b      	str	r3, [r7, #84]	; 0x54
 800666c:	e002      	b.n	8006674 <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	657b      	str	r3, [r7, #84]	; 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	7b1b      	ldrb	r3, [r3, #12]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d12b      	bne.n	80066d4 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	6959      	ldr	r1, [r3, #20]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	88da      	ldrh	r2, [r3, #6]
 8006684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006686:	b29b      	uxth	r3, r3
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f001 f8f5 	bl	8007878 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	4ace      	ldr	r2, [pc, #824]	; (80069d0 <USB_EPStartXfer+0x38c>)
 8006696:	4694      	mov	ip, r2
 8006698:	4463      	add	r3, ip
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	00db      	lsls	r3, r3, #3
 80066a2:	49cb      	ldr	r1, [pc, #812]	; (80069d0 <USB_EPStartXfer+0x38c>)
 80066a4:	468c      	mov	ip, r1
 80066a6:	4463      	add	r3, ip
 80066a8:	0412      	lsls	r2, r2, #16
 80066aa:	0c12      	lsrs	r2, r2, #16
 80066ac:	601a      	str	r2, [r3, #0]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	00db      	lsls	r3, r3, #3
 80066b4:	4ac6      	ldr	r2, [pc, #792]	; (80069d0 <USB_EPStartXfer+0x38c>)
 80066b6:	4694      	mov	ip, r2
 80066b8:	4463      	add	r3, ip
 80066ba:	6819      	ldr	r1, [r3, #0]
 80066bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066be:	041a      	lsls	r2, r3, #16
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	00db      	lsls	r3, r3, #3
 80066c6:	48c2      	ldr	r0, [pc, #776]	; (80069d0 <USB_EPStartXfer+0x38c>)
 80066c8:	4684      	mov	ip, r0
 80066ca:	4463      	add	r3, ip
 80066cc:	430a      	orrs	r2, r1
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	f000 fc67 	bl	8006fa2 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	78db      	ldrb	r3, [r3, #3]
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d000      	beq.n	80066de <USB_EPStartXfer+0x9a>
 80066dc:	e31a      	b.n	8006d14 <USB_EPStartXfer+0x6d0>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	6a1a      	ldr	r2, [r3, #32]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d800      	bhi.n	80066ec <USB_EPStartXfer+0xa8>
 80066ea:	e2c7      	b.n	8006c7c <USB_EPStartXfer+0x638>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	18d3      	adds	r3, r2, r3
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4ab6      	ldr	r2, [pc, #728]	; (80069d4 <USB_EPStartXfer+0x390>)
 80066fa:	4013      	ands	r3, r2
 80066fc:	613b      	str	r3, [r7, #16]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	18d3      	adds	r3, r2, r3
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	49b3      	ldr	r1, [pc, #716]	; (80069d8 <USB_EPStartXfer+0x394>)
 800670c:	430a      	orrs	r2, r1
 800670e:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	6a1a      	ldr	r2, [r3, #32]
 8006714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006716:	1ad2      	subs	r2, r2, r3
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	18d3      	adds	r3, r2, r3
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2240      	movs	r2, #64	; 0x40
 800672a:	4013      	ands	r3, r2
 800672c:	d100      	bne.n	8006730 <USB_EPStartXfer+0xec>
 800672e:	e155      	b.n	80069dc <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	785b      	ldrb	r3, [r3, #1]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d162      	bne.n	80067fe <USB_EPStartXfer+0x1ba>
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	00db      	lsls	r3, r3, #3
 800673e:	4aa4      	ldr	r2, [pc, #656]	; (80069d0 <USB_EPStartXfer+0x38c>)
 8006740:	4694      	mov	ip, r2
 8006742:	4463      	add	r3, ip
 8006744:	685a      	ldr	r2, [r3, #4]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	00db      	lsls	r3, r3, #3
 800674c:	49a0      	ldr	r1, [pc, #640]	; (80069d0 <USB_EPStartXfer+0x38c>)
 800674e:	468c      	mov	ip, r1
 8006750:	4463      	add	r3, ip
 8006752:	0192      	lsls	r2, r2, #6
 8006754:	0992      	lsrs	r2, r2, #6
 8006756:	605a      	str	r2, [r3, #4]
 8006758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800675a:	2b3e      	cmp	r3, #62	; 0x3e
 800675c:	d91e      	bls.n	800679c <USB_EPStartXfer+0x158>
 800675e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006760:	095b      	lsrs	r3, r3, #5
 8006762:	653b      	str	r3, [r7, #80]	; 0x50
 8006764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006766:	221f      	movs	r2, #31
 8006768:	4013      	ands	r3, r2
 800676a:	d102      	bne.n	8006772 <USB_EPStartXfer+0x12e>
 800676c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800676e:	3b01      	subs	r3, #1
 8006770:	653b      	str	r3, [r7, #80]	; 0x50
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	00db      	lsls	r3, r3, #3
 8006778:	4a95      	ldr	r2, [pc, #596]	; (80069d0 <USB_EPStartXfer+0x38c>)
 800677a:	4694      	mov	ip, r2
 800677c:	4463      	add	r3, ip
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006782:	069b      	lsls	r3, r3, #26
 8006784:	431a      	orrs	r2, r3
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	00db      	lsls	r3, r3, #3
 800678c:	4990      	ldr	r1, [pc, #576]	; (80069d0 <USB_EPStartXfer+0x38c>)
 800678e:	468c      	mov	ip, r1
 8006790:	4463      	add	r3, ip
 8006792:	2180      	movs	r1, #128	; 0x80
 8006794:	0609      	lsls	r1, r1, #24
 8006796:	430a      	orrs	r2, r1
 8006798:	605a      	str	r2, [r3, #4]
 800679a:	e055      	b.n	8006848 <USB_EPStartXfer+0x204>
 800679c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d111      	bne.n	80067c6 <USB_EPStartXfer+0x182>
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	00db      	lsls	r3, r3, #3
 80067a8:	4a89      	ldr	r2, [pc, #548]	; (80069d0 <USB_EPStartXfer+0x38c>)
 80067aa:	4694      	mov	ip, r2
 80067ac:	4463      	add	r3, ip
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	00db      	lsls	r3, r3, #3
 80067b6:	4986      	ldr	r1, [pc, #536]	; (80069d0 <USB_EPStartXfer+0x38c>)
 80067b8:	468c      	mov	ip, r1
 80067ba:	4463      	add	r3, ip
 80067bc:	2180      	movs	r1, #128	; 0x80
 80067be:	0609      	lsls	r1, r1, #24
 80067c0:	430a      	orrs	r2, r1
 80067c2:	605a      	str	r2, [r3, #4]
 80067c4:	e040      	b.n	8006848 <USB_EPStartXfer+0x204>
 80067c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067c8:	085b      	lsrs	r3, r3, #1
 80067ca:	653b      	str	r3, [r7, #80]	; 0x50
 80067cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067ce:	2201      	movs	r2, #1
 80067d0:	4013      	ands	r3, r2
 80067d2:	d002      	beq.n	80067da <USB_EPStartXfer+0x196>
 80067d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067d6:	3301      	adds	r3, #1
 80067d8:	653b      	str	r3, [r7, #80]	; 0x50
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	00db      	lsls	r3, r3, #3
 80067e0:	4a7b      	ldr	r2, [pc, #492]	; (80069d0 <USB_EPStartXfer+0x38c>)
 80067e2:	4694      	mov	ip, r2
 80067e4:	4463      	add	r3, ip
 80067e6:	6859      	ldr	r1, [r3, #4]
 80067e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067ea:	069a      	lsls	r2, r3, #26
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	00db      	lsls	r3, r3, #3
 80067f2:	4877      	ldr	r0, [pc, #476]	; (80069d0 <USB_EPStartXfer+0x38c>)
 80067f4:	4684      	mov	ip, r0
 80067f6:	4463      	add	r3, ip
 80067f8:	430a      	orrs	r2, r1
 80067fa:	605a      	str	r2, [r3, #4]
 80067fc:	e024      	b.n	8006848 <USB_EPStartXfer+0x204>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	785b      	ldrb	r3, [r3, #1]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d120      	bne.n	8006848 <USB_EPStartXfer+0x204>
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	00db      	lsls	r3, r3, #3
 800680c:	4a70      	ldr	r2, [pc, #448]	; (80069d0 <USB_EPStartXfer+0x38c>)
 800680e:	4694      	mov	ip, r2
 8006810:	4463      	add	r3, ip
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	00db      	lsls	r3, r3, #3
 800681a:	496d      	ldr	r1, [pc, #436]	; (80069d0 <USB_EPStartXfer+0x38c>)
 800681c:	468c      	mov	ip, r1
 800681e:	4463      	add	r3, ip
 8006820:	0412      	lsls	r2, r2, #16
 8006822:	0c12      	lsrs	r2, r2, #16
 8006824:	605a      	str	r2, [r3, #4]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	00db      	lsls	r3, r3, #3
 800682c:	4a68      	ldr	r2, [pc, #416]	; (80069d0 <USB_EPStartXfer+0x38c>)
 800682e:	4694      	mov	ip, r2
 8006830:	4463      	add	r3, ip
 8006832:	6859      	ldr	r1, [r3, #4]
 8006834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006836:	041a      	lsls	r2, r3, #16
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	00db      	lsls	r3, r3, #3
 800683e:	4864      	ldr	r0, [pc, #400]	; (80069d0 <USB_EPStartXfer+0x38c>)
 8006840:	4684      	mov	ip, r0
 8006842:	4463      	add	r3, ip
 8006844:	430a      	orrs	r2, r1
 8006846:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8006848:	201a      	movs	r0, #26
 800684a:	183b      	adds	r3, r7, r0
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	8952      	ldrh	r2, [r2, #10]
 8006850:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	6959      	ldr	r1, [r3, #20]
 8006856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006858:	b29c      	uxth	r4, r3
 800685a:	183b      	adds	r3, r7, r0
 800685c:	881a      	ldrh	r2, [r3, #0]
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	0023      	movs	r3, r4
 8006862:	f001 f809 	bl	8007878 <USB_WritePMA>
            ep->xfer_buff += len;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	695a      	ldr	r2, [r3, #20]
 800686a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800686c:	18d2      	adds	r2, r2, r3
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	6a1a      	ldr	r2, [r3, #32]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	429a      	cmp	r2, r3
 800687c:	d906      	bls.n	800688c <USB_EPStartXfer+0x248>
            {
              ep->xfer_len_db -= len;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	6a1a      	ldr	r2, [r3, #32]
 8006882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006884:	1ad2      	subs	r2, r2, r3
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	621a      	str	r2, [r3, #32]
 800688a:	e005      	b.n	8006898 <USB_EPStartXfer+0x254>
            }
            else
            {
              len = ep->xfer_len_db;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2200      	movs	r2, #0
 8006896:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	785b      	ldrb	r3, [r3, #1]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d162      	bne.n	8006966 <USB_EPStartXfer+0x322>
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	00db      	lsls	r3, r3, #3
 80068a6:	4a4a      	ldr	r2, [pc, #296]	; (80069d0 <USB_EPStartXfer+0x38c>)
 80068a8:	4694      	mov	ip, r2
 80068aa:	4463      	add	r3, ip
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	00db      	lsls	r3, r3, #3
 80068b4:	4946      	ldr	r1, [pc, #280]	; (80069d0 <USB_EPStartXfer+0x38c>)
 80068b6:	468c      	mov	ip, r1
 80068b8:	4463      	add	r3, ip
 80068ba:	0192      	lsls	r2, r2, #6
 80068bc:	0992      	lsrs	r2, r2, #6
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068c2:	2b3e      	cmp	r3, #62	; 0x3e
 80068c4:	d91e      	bls.n	8006904 <USB_EPStartXfer+0x2c0>
 80068c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068c8:	095b      	lsrs	r3, r3, #5
 80068ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068ce:	221f      	movs	r2, #31
 80068d0:	4013      	ands	r3, r2
 80068d2:	d102      	bne.n	80068da <USB_EPStartXfer+0x296>
 80068d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d6:	3b01      	subs	r3, #1
 80068d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	00db      	lsls	r3, r3, #3
 80068e0:	4a3b      	ldr	r2, [pc, #236]	; (80069d0 <USB_EPStartXfer+0x38c>)
 80068e2:	4694      	mov	ip, r2
 80068e4:	4463      	add	r3, ip
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ea:	069b      	lsls	r3, r3, #26
 80068ec:	431a      	orrs	r2, r3
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	4936      	ldr	r1, [pc, #216]	; (80069d0 <USB_EPStartXfer+0x38c>)
 80068f6:	468c      	mov	ip, r1
 80068f8:	4463      	add	r3, ip
 80068fa:	2180      	movs	r1, #128	; 0x80
 80068fc:	0609      	lsls	r1, r1, #24
 80068fe:	430a      	orrs	r2, r1
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	e055      	b.n	80069b0 <USB_EPStartXfer+0x36c>
 8006904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006906:	2b00      	cmp	r3, #0
 8006908:	d111      	bne.n	800692e <USB_EPStartXfer+0x2ea>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	00db      	lsls	r3, r3, #3
 8006910:	4a2f      	ldr	r2, [pc, #188]	; (80069d0 <USB_EPStartXfer+0x38c>)
 8006912:	4694      	mov	ip, r2
 8006914:	4463      	add	r3, ip
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	00db      	lsls	r3, r3, #3
 800691e:	492c      	ldr	r1, [pc, #176]	; (80069d0 <USB_EPStartXfer+0x38c>)
 8006920:	468c      	mov	ip, r1
 8006922:	4463      	add	r3, ip
 8006924:	2180      	movs	r1, #128	; 0x80
 8006926:	0609      	lsls	r1, r1, #24
 8006928:	430a      	orrs	r2, r1
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	e040      	b.n	80069b0 <USB_EPStartXfer+0x36c>
 800692e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006930:	085b      	lsrs	r3, r3, #1
 8006932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006936:	2201      	movs	r2, #1
 8006938:	4013      	ands	r3, r2
 800693a:	d002      	beq.n	8006942 <USB_EPStartXfer+0x2fe>
 800693c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800693e:	3301      	adds	r3, #1
 8006940:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	4a21      	ldr	r2, [pc, #132]	; (80069d0 <USB_EPStartXfer+0x38c>)
 800694a:	4694      	mov	ip, r2
 800694c:	4463      	add	r3, ip
 800694e:	6819      	ldr	r1, [r3, #0]
 8006950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006952:	069a      	lsls	r2, r3, #26
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	00db      	lsls	r3, r3, #3
 800695a:	481d      	ldr	r0, [pc, #116]	; (80069d0 <USB_EPStartXfer+0x38c>)
 800695c:	4684      	mov	ip, r0
 800695e:	4463      	add	r3, ip
 8006960:	430a      	orrs	r2, r1
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	e024      	b.n	80069b0 <USB_EPStartXfer+0x36c>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	785b      	ldrb	r3, [r3, #1]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d120      	bne.n	80069b0 <USB_EPStartXfer+0x36c>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	00db      	lsls	r3, r3, #3
 8006974:	4a16      	ldr	r2, [pc, #88]	; (80069d0 <USB_EPStartXfer+0x38c>)
 8006976:	4694      	mov	ip, r2
 8006978:	4463      	add	r3, ip
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	00db      	lsls	r3, r3, #3
 8006982:	4913      	ldr	r1, [pc, #76]	; (80069d0 <USB_EPStartXfer+0x38c>)
 8006984:	468c      	mov	ip, r1
 8006986:	4463      	add	r3, ip
 8006988:	0412      	lsls	r2, r2, #16
 800698a:	0c12      	lsrs	r2, r2, #16
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	4a0e      	ldr	r2, [pc, #56]	; (80069d0 <USB_EPStartXfer+0x38c>)
 8006996:	4694      	mov	ip, r2
 8006998:	4463      	add	r3, ip
 800699a:	6819      	ldr	r1, [r3, #0]
 800699c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800699e:	041a      	lsls	r2, r3, #16
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	00db      	lsls	r3, r3, #3
 80069a6:	480a      	ldr	r0, [pc, #40]	; (80069d0 <USB_EPStartXfer+0x38c>)
 80069a8:	4684      	mov	ip, r0
 80069aa:	4463      	add	r3, ip
 80069ac:	430a      	orrs	r2, r1
 80069ae:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80069b0:	201a      	movs	r0, #26
 80069b2:	183b      	adds	r3, r7, r0
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	8912      	ldrh	r2, [r2, #8]
 80069b8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	6959      	ldr	r1, [r3, #20]
 80069be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069c0:	b29c      	uxth	r4, r3
 80069c2:	183b      	adds	r3, r7, r0
 80069c4:	881a      	ldrh	r2, [r3, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	0023      	movs	r3, r4
 80069ca:	f000 ff55 	bl	8007878 <USB_WritePMA>
 80069ce:	e2e8      	b.n	8006fa2 <USB_EPStartXfer+0x95e>
 80069d0:	40009800 	.word	0x40009800
 80069d4:	07ff8f8f 	.word	0x07ff8f8f
 80069d8:	00008180 	.word	0x00008180
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	785b      	ldrb	r3, [r3, #1]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d162      	bne.n	8006aaa <USB_EPStartXfer+0x466>
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	00db      	lsls	r3, r3, #3
 80069ea:	4ac7      	ldr	r2, [pc, #796]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 80069ec:	4694      	mov	ip, r2
 80069ee:	4463      	add	r3, ip
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	00db      	lsls	r3, r3, #3
 80069f8:	49c3      	ldr	r1, [pc, #780]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 80069fa:	468c      	mov	ip, r1
 80069fc:	4463      	add	r3, ip
 80069fe:	0192      	lsls	r2, r2, #6
 8006a00:	0992      	lsrs	r2, r2, #6
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a06:	2b3e      	cmp	r3, #62	; 0x3e
 8006a08:	d91e      	bls.n	8006a48 <USB_EPStartXfer+0x404>
 8006a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a0c:	095b      	lsrs	r3, r3, #5
 8006a0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a12:	221f      	movs	r2, #31
 8006a14:	4013      	ands	r3, r2
 8006a16:	d102      	bne.n	8006a1e <USB_EPStartXfer+0x3da>
 8006a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	00db      	lsls	r3, r3, #3
 8006a24:	4ab8      	ldr	r2, [pc, #736]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 8006a26:	4694      	mov	ip, r2
 8006a28:	4463      	add	r3, ip
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a2e:	069b      	lsls	r3, r3, #26
 8006a30:	431a      	orrs	r2, r3
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	00db      	lsls	r3, r3, #3
 8006a38:	49b3      	ldr	r1, [pc, #716]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 8006a3a:	468c      	mov	ip, r1
 8006a3c:	4463      	add	r3, ip
 8006a3e:	2180      	movs	r1, #128	; 0x80
 8006a40:	0609      	lsls	r1, r1, #24
 8006a42:	430a      	orrs	r2, r1
 8006a44:	601a      	str	r2, [r3, #0]
 8006a46:	e055      	b.n	8006af4 <USB_EPStartXfer+0x4b0>
 8006a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d111      	bne.n	8006a72 <USB_EPStartXfer+0x42e>
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	00db      	lsls	r3, r3, #3
 8006a54:	4aac      	ldr	r2, [pc, #688]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 8006a56:	4694      	mov	ip, r2
 8006a58:	4463      	add	r3, ip
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	49a9      	ldr	r1, [pc, #676]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 8006a64:	468c      	mov	ip, r1
 8006a66:	4463      	add	r3, ip
 8006a68:	2180      	movs	r1, #128	; 0x80
 8006a6a:	0609      	lsls	r1, r1, #24
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	601a      	str	r2, [r3, #0]
 8006a70:	e040      	b.n	8006af4 <USB_EPStartXfer+0x4b0>
 8006a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a74:	085b      	lsrs	r3, r3, #1
 8006a76:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	d002      	beq.n	8006a86 <USB_EPStartXfer+0x442>
 8006a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a82:	3301      	adds	r3, #1
 8006a84:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	00db      	lsls	r3, r3, #3
 8006a8c:	4a9e      	ldr	r2, [pc, #632]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 8006a8e:	4694      	mov	ip, r2
 8006a90:	4463      	add	r3, ip
 8006a92:	6819      	ldr	r1, [r3, #0]
 8006a94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a96:	069a      	lsls	r2, r3, #26
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	00db      	lsls	r3, r3, #3
 8006a9e:	489a      	ldr	r0, [pc, #616]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 8006aa0:	4684      	mov	ip, r0
 8006aa2:	4463      	add	r3, ip
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	e024      	b.n	8006af4 <USB_EPStartXfer+0x4b0>
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	785b      	ldrb	r3, [r3, #1]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d120      	bne.n	8006af4 <USB_EPStartXfer+0x4b0>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	00db      	lsls	r3, r3, #3
 8006ab8:	4a93      	ldr	r2, [pc, #588]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 8006aba:	4694      	mov	ip, r2
 8006abc:	4463      	add	r3, ip
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	00db      	lsls	r3, r3, #3
 8006ac6:	4990      	ldr	r1, [pc, #576]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 8006ac8:	468c      	mov	ip, r1
 8006aca:	4463      	add	r3, ip
 8006acc:	0412      	lsls	r2, r2, #16
 8006ace:	0c12      	lsrs	r2, r2, #16
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	00db      	lsls	r3, r3, #3
 8006ad8:	4a8b      	ldr	r2, [pc, #556]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 8006ada:	4694      	mov	ip, r2
 8006adc:	4463      	add	r3, ip
 8006ade:	6819      	ldr	r1, [r3, #0]
 8006ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ae2:	041a      	lsls	r2, r3, #16
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	00db      	lsls	r3, r3, #3
 8006aea:	4887      	ldr	r0, [pc, #540]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 8006aec:	4684      	mov	ip, r0
 8006aee:	4463      	add	r3, ip
 8006af0:	430a      	orrs	r2, r1
 8006af2:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006af4:	201a      	movs	r0, #26
 8006af6:	183b      	adds	r3, r7, r0
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	8912      	ldrh	r2, [r2, #8]
 8006afc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	6959      	ldr	r1, [r3, #20]
 8006b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b04:	b29c      	uxth	r4, r3
 8006b06:	183b      	adds	r3, r7, r0
 8006b08:	881a      	ldrh	r2, [r3, #0]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	0023      	movs	r3, r4
 8006b0e:	f000 feb3 	bl	8007878 <USB_WritePMA>
            ep->xfer_buff += len;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	695a      	ldr	r2, [r3, #20]
 8006b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b18:	18d2      	adds	r2, r2, r3
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	6a1a      	ldr	r2, [r3, #32]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d906      	bls.n	8006b38 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	6a1a      	ldr	r2, [r3, #32]
 8006b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b30:	1ad2      	subs	r2, r2, r3
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	621a      	str	r2, [r3, #32]
 8006b36:	e005      	b.n	8006b44 <USB_EPStartXfer+0x500>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2200      	movs	r2, #0
 8006b42:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	785b      	ldrb	r3, [r3, #1]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d162      	bne.n	8006c12 <USB_EPStartXfer+0x5ce>
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	00db      	lsls	r3, r3, #3
 8006b52:	4a6d      	ldr	r2, [pc, #436]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 8006b54:	4694      	mov	ip, r2
 8006b56:	4463      	add	r3, ip
 8006b58:	685a      	ldr	r2, [r3, #4]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	00db      	lsls	r3, r3, #3
 8006b60:	4969      	ldr	r1, [pc, #420]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 8006b62:	468c      	mov	ip, r1
 8006b64:	4463      	add	r3, ip
 8006b66:	0192      	lsls	r2, r2, #6
 8006b68:	0992      	lsrs	r2, r2, #6
 8006b6a:	605a      	str	r2, [r3, #4]
 8006b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b6e:	2b3e      	cmp	r3, #62	; 0x3e
 8006b70:	d91e      	bls.n	8006bb0 <USB_EPStartXfer+0x56c>
 8006b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b74:	095b      	lsrs	r3, r3, #5
 8006b76:	647b      	str	r3, [r7, #68]	; 0x44
 8006b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b7a:	221f      	movs	r2, #31
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	d102      	bne.n	8006b86 <USB_EPStartXfer+0x542>
 8006b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b82:	3b01      	subs	r3, #1
 8006b84:	647b      	str	r3, [r7, #68]	; 0x44
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	00db      	lsls	r3, r3, #3
 8006b8c:	4a5e      	ldr	r2, [pc, #376]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 8006b8e:	4694      	mov	ip, r2
 8006b90:	4463      	add	r3, ip
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b96:	069b      	lsls	r3, r3, #26
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	00db      	lsls	r3, r3, #3
 8006ba0:	4959      	ldr	r1, [pc, #356]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 8006ba2:	468c      	mov	ip, r1
 8006ba4:	4463      	add	r3, ip
 8006ba6:	2180      	movs	r1, #128	; 0x80
 8006ba8:	0609      	lsls	r1, r1, #24
 8006baa:	430a      	orrs	r2, r1
 8006bac:	605a      	str	r2, [r3, #4]
 8006bae:	e055      	b.n	8006c5c <USB_EPStartXfer+0x618>
 8006bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d111      	bne.n	8006bda <USB_EPStartXfer+0x596>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	00db      	lsls	r3, r3, #3
 8006bbc:	4a52      	ldr	r2, [pc, #328]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 8006bbe:	4694      	mov	ip, r2
 8006bc0:	4463      	add	r3, ip
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	00db      	lsls	r3, r3, #3
 8006bca:	494f      	ldr	r1, [pc, #316]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 8006bcc:	468c      	mov	ip, r1
 8006bce:	4463      	add	r3, ip
 8006bd0:	2180      	movs	r1, #128	; 0x80
 8006bd2:	0609      	lsls	r1, r1, #24
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	605a      	str	r2, [r3, #4]
 8006bd8:	e040      	b.n	8006c5c <USB_EPStartXfer+0x618>
 8006bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bdc:	085b      	lsrs	r3, r3, #1
 8006bde:	647b      	str	r3, [r7, #68]	; 0x44
 8006be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006be2:	2201      	movs	r2, #1
 8006be4:	4013      	ands	r3, r2
 8006be6:	d002      	beq.n	8006bee <USB_EPStartXfer+0x5aa>
 8006be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bea:	3301      	adds	r3, #1
 8006bec:	647b      	str	r3, [r7, #68]	; 0x44
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	00db      	lsls	r3, r3, #3
 8006bf4:	4a44      	ldr	r2, [pc, #272]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 8006bf6:	4694      	mov	ip, r2
 8006bf8:	4463      	add	r3, ip
 8006bfa:	6859      	ldr	r1, [r3, #4]
 8006bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bfe:	069a      	lsls	r2, r3, #26
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	00db      	lsls	r3, r3, #3
 8006c06:	4840      	ldr	r0, [pc, #256]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 8006c08:	4684      	mov	ip, r0
 8006c0a:	4463      	add	r3, ip
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	605a      	str	r2, [r3, #4]
 8006c10:	e024      	b.n	8006c5c <USB_EPStartXfer+0x618>
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	785b      	ldrb	r3, [r3, #1]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d120      	bne.n	8006c5c <USB_EPStartXfer+0x618>
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	4a39      	ldr	r2, [pc, #228]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 8006c22:	4694      	mov	ip, r2
 8006c24:	4463      	add	r3, ip
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	00db      	lsls	r3, r3, #3
 8006c2e:	4936      	ldr	r1, [pc, #216]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 8006c30:	468c      	mov	ip, r1
 8006c32:	4463      	add	r3, ip
 8006c34:	0412      	lsls	r2, r2, #16
 8006c36:	0c12      	lsrs	r2, r2, #16
 8006c38:	605a      	str	r2, [r3, #4]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	00db      	lsls	r3, r3, #3
 8006c40:	4a31      	ldr	r2, [pc, #196]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 8006c42:	4694      	mov	ip, r2
 8006c44:	4463      	add	r3, ip
 8006c46:	6859      	ldr	r1, [r3, #4]
 8006c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c4a:	041a      	lsls	r2, r3, #16
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	00db      	lsls	r3, r3, #3
 8006c52:	482d      	ldr	r0, [pc, #180]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 8006c54:	4684      	mov	ip, r0
 8006c56:	4463      	add	r3, ip
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8006c5c:	201a      	movs	r0, #26
 8006c5e:	183b      	adds	r3, r7, r0
 8006c60:	683a      	ldr	r2, [r7, #0]
 8006c62:	8952      	ldrh	r2, [r2, #10]
 8006c64:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	6959      	ldr	r1, [r3, #20]
 8006c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c6c:	b29c      	uxth	r4, r3
 8006c6e:	183b      	adds	r3, r7, r0
 8006c70:	881a      	ldrh	r2, [r3, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	0023      	movs	r3, r4
 8006c76:	f000 fdff 	bl	8007878 <USB_WritePMA>
 8006c7a:	e192      	b.n	8006fa2 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	6a1b      	ldr	r3, [r3, #32]
 8006c80:	657b      	str	r3, [r7, #84]	; 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	18d3      	adds	r3, r2, r3
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a1f      	ldr	r2, [pc, #124]	; (8006d0c <USB_EPStartXfer+0x6c8>)
 8006c90:	4013      	ands	r3, r2
 8006c92:	617b      	str	r3, [r7, #20]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	18d3      	adds	r3, r2, r3
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	491b      	ldr	r1, [pc, #108]	; (8006d10 <USB_EPStartXfer+0x6cc>)
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	00db      	lsls	r3, r3, #3
 8006cac:	4a16      	ldr	r2, [pc, #88]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 8006cae:	4694      	mov	ip, r2
 8006cb0:	4463      	add	r3, ip
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	00db      	lsls	r3, r3, #3
 8006cba:	4913      	ldr	r1, [pc, #76]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 8006cbc:	468c      	mov	ip, r1
 8006cbe:	4463      	add	r3, ip
 8006cc0:	0412      	lsls	r2, r2, #16
 8006cc2:	0c12      	lsrs	r2, r2, #16
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	00db      	lsls	r3, r3, #3
 8006ccc:	4a0e      	ldr	r2, [pc, #56]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 8006cce:	4694      	mov	ip, r2
 8006cd0:	4463      	add	r3, ip
 8006cd2:	6819      	ldr	r1, [r3, #0]
 8006cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cd6:	041a      	lsls	r2, r3, #16
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	00db      	lsls	r3, r3, #3
 8006cde:	480a      	ldr	r0, [pc, #40]	; (8006d08 <USB_EPStartXfer+0x6c4>)
 8006ce0:	4684      	mov	ip, r0
 8006ce2:	4463      	add	r3, ip
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006ce8:	201a      	movs	r0, #26
 8006cea:	183b      	adds	r3, r7, r0
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	8912      	ldrh	r2, [r2, #8]
 8006cf0:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	6959      	ldr	r1, [r3, #20]
 8006cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cf8:	b29c      	uxth	r4, r3
 8006cfa:	183b      	adds	r3, r7, r0
 8006cfc:	881a      	ldrh	r2, [r3, #0]
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	0023      	movs	r3, r4
 8006d02:	f000 fdb9 	bl	8007878 <USB_WritePMA>
 8006d06:	e14c      	b.n	8006fa2 <USB_EPStartXfer+0x95e>
 8006d08:	40009800 	.word	0x40009800
 8006d0c:	07ff8e8f 	.word	0x07ff8e8f
 8006d10:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	6a1a      	ldr	r2, [r3, #32]
 8006d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d1a:	1ad2      	subs	r2, r2, r3
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	18d3      	adds	r3, r2, r3
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2240      	movs	r2, #64	; 0x40
 8006d2e:	4013      	ands	r3, r2
 8006d30:	d100      	bne.n	8006d34 <USB_EPStartXfer+0x6f0>
 8006d32:	e09b      	b.n	8006e6c <USB_EPStartXfer+0x828>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	785b      	ldrb	r3, [r3, #1]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d162      	bne.n	8006e02 <USB_EPStartXfer+0x7be>
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	00db      	lsls	r3, r3, #3
 8006d42:	4ad6      	ldr	r2, [pc, #856]	; (800709c <USB_EPStartXfer+0xa58>)
 8006d44:	4694      	mov	ip, r2
 8006d46:	4463      	add	r3, ip
 8006d48:	685a      	ldr	r2, [r3, #4]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	00db      	lsls	r3, r3, #3
 8006d50:	49d2      	ldr	r1, [pc, #840]	; (800709c <USB_EPStartXfer+0xa58>)
 8006d52:	468c      	mov	ip, r1
 8006d54:	4463      	add	r3, ip
 8006d56:	0192      	lsls	r2, r2, #6
 8006d58:	0992      	lsrs	r2, r2, #6
 8006d5a:	605a      	str	r2, [r3, #4]
 8006d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d5e:	2b3e      	cmp	r3, #62	; 0x3e
 8006d60:	d91e      	bls.n	8006da0 <USB_EPStartXfer+0x75c>
 8006d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d64:	095b      	lsrs	r3, r3, #5
 8006d66:	643b      	str	r3, [r7, #64]	; 0x40
 8006d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d6a:	221f      	movs	r2, #31
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	d102      	bne.n	8006d76 <USB_EPStartXfer+0x732>
 8006d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d72:	3b01      	subs	r3, #1
 8006d74:	643b      	str	r3, [r7, #64]	; 0x40
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	00db      	lsls	r3, r3, #3
 8006d7c:	4ac7      	ldr	r2, [pc, #796]	; (800709c <USB_EPStartXfer+0xa58>)
 8006d7e:	4694      	mov	ip, r2
 8006d80:	4463      	add	r3, ip
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d86:	069b      	lsls	r3, r3, #26
 8006d88:	431a      	orrs	r2, r3
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	49c2      	ldr	r1, [pc, #776]	; (800709c <USB_EPStartXfer+0xa58>)
 8006d92:	468c      	mov	ip, r1
 8006d94:	4463      	add	r3, ip
 8006d96:	2180      	movs	r1, #128	; 0x80
 8006d98:	0609      	lsls	r1, r1, #24
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	605a      	str	r2, [r3, #4]
 8006d9e:	e055      	b.n	8006e4c <USB_EPStartXfer+0x808>
 8006da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d111      	bne.n	8006dca <USB_EPStartXfer+0x786>
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	00db      	lsls	r3, r3, #3
 8006dac:	4abb      	ldr	r2, [pc, #748]	; (800709c <USB_EPStartXfer+0xa58>)
 8006dae:	4694      	mov	ip, r2
 8006db0:	4463      	add	r3, ip
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	00db      	lsls	r3, r3, #3
 8006dba:	49b8      	ldr	r1, [pc, #736]	; (800709c <USB_EPStartXfer+0xa58>)
 8006dbc:	468c      	mov	ip, r1
 8006dbe:	4463      	add	r3, ip
 8006dc0:	2180      	movs	r1, #128	; 0x80
 8006dc2:	0609      	lsls	r1, r1, #24
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	605a      	str	r2, [r3, #4]
 8006dc8:	e040      	b.n	8006e4c <USB_EPStartXfer+0x808>
 8006dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dcc:	085b      	lsrs	r3, r3, #1
 8006dce:	643b      	str	r3, [r7, #64]	; 0x40
 8006dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	d002      	beq.n	8006dde <USB_EPStartXfer+0x79a>
 8006dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dda:	3301      	adds	r3, #1
 8006ddc:	643b      	str	r3, [r7, #64]	; 0x40
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	00db      	lsls	r3, r3, #3
 8006de4:	4aad      	ldr	r2, [pc, #692]	; (800709c <USB_EPStartXfer+0xa58>)
 8006de6:	4694      	mov	ip, r2
 8006de8:	4463      	add	r3, ip
 8006dea:	6859      	ldr	r1, [r3, #4]
 8006dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dee:	069a      	lsls	r2, r3, #26
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	00db      	lsls	r3, r3, #3
 8006df6:	48a9      	ldr	r0, [pc, #676]	; (800709c <USB_EPStartXfer+0xa58>)
 8006df8:	4684      	mov	ip, r0
 8006dfa:	4463      	add	r3, ip
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	605a      	str	r2, [r3, #4]
 8006e00:	e024      	b.n	8006e4c <USB_EPStartXfer+0x808>
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	785b      	ldrb	r3, [r3, #1]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d120      	bne.n	8006e4c <USB_EPStartXfer+0x808>
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	00db      	lsls	r3, r3, #3
 8006e10:	4aa2      	ldr	r2, [pc, #648]	; (800709c <USB_EPStartXfer+0xa58>)
 8006e12:	4694      	mov	ip, r2
 8006e14:	4463      	add	r3, ip
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	00db      	lsls	r3, r3, #3
 8006e1e:	499f      	ldr	r1, [pc, #636]	; (800709c <USB_EPStartXfer+0xa58>)
 8006e20:	468c      	mov	ip, r1
 8006e22:	4463      	add	r3, ip
 8006e24:	0412      	lsls	r2, r2, #16
 8006e26:	0c12      	lsrs	r2, r2, #16
 8006e28:	605a      	str	r2, [r3, #4]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	00db      	lsls	r3, r3, #3
 8006e30:	4a9a      	ldr	r2, [pc, #616]	; (800709c <USB_EPStartXfer+0xa58>)
 8006e32:	4694      	mov	ip, r2
 8006e34:	4463      	add	r3, ip
 8006e36:	6859      	ldr	r1, [r3, #4]
 8006e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e3a:	041a      	lsls	r2, r3, #16
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	00db      	lsls	r3, r3, #3
 8006e42:	4896      	ldr	r0, [pc, #600]	; (800709c <USB_EPStartXfer+0xa58>)
 8006e44:	4684      	mov	ip, r0
 8006e46:	4463      	add	r3, ip
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 8006e4c:	201a      	movs	r0, #26
 8006e4e:	183b      	adds	r3, r7, r0
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	8952      	ldrh	r2, [r2, #10]
 8006e54:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	6959      	ldr	r1, [r3, #20]
 8006e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e5c:	b29c      	uxth	r4, r3
 8006e5e:	183b      	adds	r3, r7, r0
 8006e60:	881a      	ldrh	r2, [r3, #0]
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	0023      	movs	r3, r4
 8006e66:	f000 fd07 	bl	8007878 <USB_WritePMA>
 8006e6a:	e09a      	b.n	8006fa2 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	785b      	ldrb	r3, [r3, #1]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d162      	bne.n	8006f3a <USB_EPStartXfer+0x8f6>
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	00db      	lsls	r3, r3, #3
 8006e7a:	4a88      	ldr	r2, [pc, #544]	; (800709c <USB_EPStartXfer+0xa58>)
 8006e7c:	4694      	mov	ip, r2
 8006e7e:	4463      	add	r3, ip
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	4984      	ldr	r1, [pc, #528]	; (800709c <USB_EPStartXfer+0xa58>)
 8006e8a:	468c      	mov	ip, r1
 8006e8c:	4463      	add	r3, ip
 8006e8e:	0192      	lsls	r2, r2, #6
 8006e90:	0992      	lsrs	r2, r2, #6
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e96:	2b3e      	cmp	r3, #62	; 0x3e
 8006e98:	d91e      	bls.n	8006ed8 <USB_EPStartXfer+0x894>
 8006e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e9c:	095b      	lsrs	r3, r3, #5
 8006e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ea2:	221f      	movs	r2, #31
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	d102      	bne.n	8006eae <USB_EPStartXfer+0x86a>
 8006ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	00db      	lsls	r3, r3, #3
 8006eb4:	4a79      	ldr	r2, [pc, #484]	; (800709c <USB_EPStartXfer+0xa58>)
 8006eb6:	4694      	mov	ip, r2
 8006eb8:	4463      	add	r3, ip
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ebe:	069b      	lsls	r3, r3, #26
 8006ec0:	431a      	orrs	r2, r3
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	00db      	lsls	r3, r3, #3
 8006ec8:	4974      	ldr	r1, [pc, #464]	; (800709c <USB_EPStartXfer+0xa58>)
 8006eca:	468c      	mov	ip, r1
 8006ecc:	4463      	add	r3, ip
 8006ece:	2180      	movs	r1, #128	; 0x80
 8006ed0:	0609      	lsls	r1, r1, #24
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	601a      	str	r2, [r3, #0]
 8006ed6:	e055      	b.n	8006f84 <USB_EPStartXfer+0x940>
 8006ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d111      	bne.n	8006f02 <USB_EPStartXfer+0x8be>
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	00db      	lsls	r3, r3, #3
 8006ee4:	4a6d      	ldr	r2, [pc, #436]	; (800709c <USB_EPStartXfer+0xa58>)
 8006ee6:	4694      	mov	ip, r2
 8006ee8:	4463      	add	r3, ip
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	00db      	lsls	r3, r3, #3
 8006ef2:	496a      	ldr	r1, [pc, #424]	; (800709c <USB_EPStartXfer+0xa58>)
 8006ef4:	468c      	mov	ip, r1
 8006ef6:	4463      	add	r3, ip
 8006ef8:	2180      	movs	r1, #128	; 0x80
 8006efa:	0609      	lsls	r1, r1, #24
 8006efc:	430a      	orrs	r2, r1
 8006efe:	601a      	str	r2, [r3, #0]
 8006f00:	e040      	b.n	8006f84 <USB_EPStartXfer+0x940>
 8006f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f04:	085b      	lsrs	r3, r3, #1
 8006f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	d002      	beq.n	8006f16 <USB_EPStartXfer+0x8d2>
 8006f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f12:	3301      	adds	r3, #1
 8006f14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	00db      	lsls	r3, r3, #3
 8006f1c:	4a5f      	ldr	r2, [pc, #380]	; (800709c <USB_EPStartXfer+0xa58>)
 8006f1e:	4694      	mov	ip, r2
 8006f20:	4463      	add	r3, ip
 8006f22:	6819      	ldr	r1, [r3, #0]
 8006f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f26:	069a      	lsls	r2, r3, #26
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	00db      	lsls	r3, r3, #3
 8006f2e:	485b      	ldr	r0, [pc, #364]	; (800709c <USB_EPStartXfer+0xa58>)
 8006f30:	4684      	mov	ip, r0
 8006f32:	4463      	add	r3, ip
 8006f34:	430a      	orrs	r2, r1
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	e024      	b.n	8006f84 <USB_EPStartXfer+0x940>
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	785b      	ldrb	r3, [r3, #1]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d120      	bne.n	8006f84 <USB_EPStartXfer+0x940>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	00db      	lsls	r3, r3, #3
 8006f48:	4a54      	ldr	r2, [pc, #336]	; (800709c <USB_EPStartXfer+0xa58>)
 8006f4a:	4694      	mov	ip, r2
 8006f4c:	4463      	add	r3, ip
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	4951      	ldr	r1, [pc, #324]	; (800709c <USB_EPStartXfer+0xa58>)
 8006f58:	468c      	mov	ip, r1
 8006f5a:	4463      	add	r3, ip
 8006f5c:	0412      	lsls	r2, r2, #16
 8006f5e:	0c12      	lsrs	r2, r2, #16
 8006f60:	601a      	str	r2, [r3, #0]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	00db      	lsls	r3, r3, #3
 8006f68:	4a4c      	ldr	r2, [pc, #304]	; (800709c <USB_EPStartXfer+0xa58>)
 8006f6a:	4694      	mov	ip, r2
 8006f6c:	4463      	add	r3, ip
 8006f6e:	6819      	ldr	r1, [r3, #0]
 8006f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f72:	041a      	lsls	r2, r3, #16
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	00db      	lsls	r3, r3, #3
 8006f7a:	4848      	ldr	r0, [pc, #288]	; (800709c <USB_EPStartXfer+0xa58>)
 8006f7c:	4684      	mov	ip, r0
 8006f7e:	4463      	add	r3, ip
 8006f80:	430a      	orrs	r2, r1
 8006f82:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f84:	201a      	movs	r0, #26
 8006f86:	183b      	adds	r3, r7, r0
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	8912      	ldrh	r2, [r2, #8]
 8006f8c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	6959      	ldr	r1, [r3, #20]
 8006f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f94:	b29c      	uxth	r4, r3
 8006f96:	183b      	adds	r3, r7, r0
 8006f98:	881a      	ldrh	r2, [r3, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	0023      	movs	r3, r4
 8006f9e:	f000 fc6b 	bl	8007878 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	18d3      	adds	r3, r2, r3
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a3c      	ldr	r2, [pc, #240]	; (80070a0 <USB_EPStartXfer+0xa5c>)
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2210      	movs	r2, #16
 8006fb8:	4053      	eors	r3, r2
 8006fba:	60fb      	str	r3, [r7, #12]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	4053      	eors	r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	18d3      	adds	r3, r2, r3
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	4934      	ldr	r1, [pc, #208]	; (80070a4 <USB_EPStartXfer+0xa60>)
 8006fd2:	430a      	orrs	r2, r1
 8006fd4:	601a      	str	r2, [r3, #0]
 8006fd6:	e340      	b.n	800765a <USB_EPStartXfer+0x1016>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	7b1b      	ldrb	r3, [r3, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d000      	beq.n	8006fe2 <USB_EPStartXfer+0x99e>
 8006fe0:	e07e      	b.n	80070e0 <USB_EPStartXfer+0xa9c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	699a      	ldr	r2, [r3, #24]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d909      	bls.n	8007002 <USB_EPStartXfer+0x9be>
      {
        len = ep->maxpacket;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len -= len;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	699a      	ldr	r2, [r3, #24]
 8006ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ffa:	1ad2      	subs	r2, r2, r3
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	619a      	str	r2, [r3, #24]
 8007000:	e005      	b.n	800700e <USB_EPStartXfer+0x9ca>
      }
      else
      {
        len = ep->xfer_len;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len = 0U;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	2200      	movs	r2, #0
 800700c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	00db      	lsls	r3, r3, #3
 8007014:	4a21      	ldr	r2, [pc, #132]	; (800709c <USB_EPStartXfer+0xa58>)
 8007016:	4694      	mov	ip, r2
 8007018:	4463      	add	r3, ip
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	00db      	lsls	r3, r3, #3
 8007022:	491e      	ldr	r1, [pc, #120]	; (800709c <USB_EPStartXfer+0xa58>)
 8007024:	468c      	mov	ip, r1
 8007026:	4463      	add	r3, ip
 8007028:	0192      	lsls	r2, r2, #6
 800702a:	0992      	lsrs	r2, r2, #6
 800702c:	605a      	str	r2, [r3, #4]
 800702e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007030:	2b3e      	cmp	r3, #62	; 0x3e
 8007032:	d91e      	bls.n	8007072 <USB_EPStartXfer+0xa2e>
 8007034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007036:	095b      	lsrs	r3, r3, #5
 8007038:	63bb      	str	r3, [r7, #56]	; 0x38
 800703a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800703c:	221f      	movs	r2, #31
 800703e:	4013      	ands	r3, r2
 8007040:	d102      	bne.n	8007048 <USB_EPStartXfer+0xa04>
 8007042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007044:	3b01      	subs	r3, #1
 8007046:	63bb      	str	r3, [r7, #56]	; 0x38
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	00db      	lsls	r3, r3, #3
 800704e:	4a13      	ldr	r2, [pc, #76]	; (800709c <USB_EPStartXfer+0xa58>)
 8007050:	4694      	mov	ip, r2
 8007052:	4463      	add	r3, ip
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007058:	069b      	lsls	r3, r3, #26
 800705a:	431a      	orrs	r2, r3
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	00db      	lsls	r3, r3, #3
 8007062:	490e      	ldr	r1, [pc, #56]	; (800709c <USB_EPStartXfer+0xa58>)
 8007064:	468c      	mov	ip, r1
 8007066:	4463      	add	r3, ip
 8007068:	2180      	movs	r1, #128	; 0x80
 800706a:	0609      	lsls	r1, r1, #24
 800706c:	430a      	orrs	r2, r1
 800706e:	605a      	str	r2, [r3, #4]
 8007070:	e2d7      	b.n	8007622 <USB_EPStartXfer+0xfde>
 8007072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007074:	2b00      	cmp	r3, #0
 8007076:	d117      	bne.n	80070a8 <USB_EPStartXfer+0xa64>
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	00db      	lsls	r3, r3, #3
 800707e:	4a07      	ldr	r2, [pc, #28]	; (800709c <USB_EPStartXfer+0xa58>)
 8007080:	4694      	mov	ip, r2
 8007082:	4463      	add	r3, ip
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	00db      	lsls	r3, r3, #3
 800708c:	4903      	ldr	r1, [pc, #12]	; (800709c <USB_EPStartXfer+0xa58>)
 800708e:	468c      	mov	ip, r1
 8007090:	4463      	add	r3, ip
 8007092:	2180      	movs	r1, #128	; 0x80
 8007094:	0609      	lsls	r1, r1, #24
 8007096:	430a      	orrs	r2, r1
 8007098:	605a      	str	r2, [r3, #4]
 800709a:	e2c2      	b.n	8007622 <USB_EPStartXfer+0xfde>
 800709c:	40009800 	.word	0x40009800
 80070a0:	07ff8fbf 	.word	0x07ff8fbf
 80070a4:	00008080 	.word	0x00008080
 80070a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070aa:	085b      	lsrs	r3, r3, #1
 80070ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80070ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070b0:	2201      	movs	r2, #1
 80070b2:	4013      	ands	r3, r2
 80070b4:	d002      	beq.n	80070bc <USB_EPStartXfer+0xa78>
 80070b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b8:	3301      	adds	r3, #1
 80070ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	00db      	lsls	r3, r3, #3
 80070c2:	4ac4      	ldr	r2, [pc, #784]	; (80073d4 <USB_EPStartXfer+0xd90>)
 80070c4:	4694      	mov	ip, r2
 80070c6:	4463      	add	r3, ip
 80070c8:	6859      	ldr	r1, [r3, #4]
 80070ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070cc:	069a      	lsls	r2, r3, #26
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	00db      	lsls	r3, r3, #3
 80070d4:	48bf      	ldr	r0, [pc, #764]	; (80073d4 <USB_EPStartXfer+0xd90>)
 80070d6:	4684      	mov	ip, r0
 80070d8:	4463      	add	r3, ip
 80070da:	430a      	orrs	r2, r1
 80070dc:	605a      	str	r2, [r3, #4]
 80070de:	e2a0      	b.n	8007622 <USB_EPStartXfer+0xfde>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	78db      	ldrb	r3, [r3, #3]
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d000      	beq.n	80070ea <USB_EPStartXfer+0xaa6>
 80070e8:	e15f      	b.n	80073aa <USB_EPStartXfer+0xd66>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	785b      	ldrb	r3, [r3, #1]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d168      	bne.n	80071c4 <USB_EPStartXfer+0xb80>
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	00db      	lsls	r3, r3, #3
 80070f8:	4ab6      	ldr	r2, [pc, #728]	; (80073d4 <USB_EPStartXfer+0xd90>)
 80070fa:	4694      	mov	ip, r2
 80070fc:	4463      	add	r3, ip
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	00db      	lsls	r3, r3, #3
 8007106:	49b3      	ldr	r1, [pc, #716]	; (80073d4 <USB_EPStartXfer+0xd90>)
 8007108:	468c      	mov	ip, r1
 800710a:	4463      	add	r3, ip
 800710c:	0192      	lsls	r2, r2, #6
 800710e:	0992      	lsrs	r2, r2, #6
 8007110:	601a      	str	r2, [r3, #0]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	2b3e      	cmp	r3, #62	; 0x3e
 8007118:	d920      	bls.n	800715c <USB_EPStartXfer+0xb18>
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	095b      	lsrs	r3, r3, #5
 8007120:	637b      	str	r3, [r7, #52]	; 0x34
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	221f      	movs	r2, #31
 8007128:	4013      	ands	r3, r2
 800712a:	d102      	bne.n	8007132 <USB_EPStartXfer+0xaee>
 800712c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800712e:	3b01      	subs	r3, #1
 8007130:	637b      	str	r3, [r7, #52]	; 0x34
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	00db      	lsls	r3, r3, #3
 8007138:	4aa6      	ldr	r2, [pc, #664]	; (80073d4 <USB_EPStartXfer+0xd90>)
 800713a:	4694      	mov	ip, r2
 800713c:	4463      	add	r3, ip
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007142:	069b      	lsls	r3, r3, #26
 8007144:	431a      	orrs	r2, r3
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	00db      	lsls	r3, r3, #3
 800714c:	49a1      	ldr	r1, [pc, #644]	; (80073d4 <USB_EPStartXfer+0xd90>)
 800714e:	468c      	mov	ip, r1
 8007150:	4463      	add	r3, ip
 8007152:	2180      	movs	r1, #128	; 0x80
 8007154:	0609      	lsls	r1, r1, #24
 8007156:	430a      	orrs	r2, r1
 8007158:	601a      	str	r2, [r3, #0]
 800715a:	e059      	b.n	8007210 <USB_EPStartXfer+0xbcc>
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d111      	bne.n	8007188 <USB_EPStartXfer+0xb44>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	00db      	lsls	r3, r3, #3
 800716a:	4a9a      	ldr	r2, [pc, #616]	; (80073d4 <USB_EPStartXfer+0xd90>)
 800716c:	4694      	mov	ip, r2
 800716e:	4463      	add	r3, ip
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	00db      	lsls	r3, r3, #3
 8007178:	4996      	ldr	r1, [pc, #600]	; (80073d4 <USB_EPStartXfer+0xd90>)
 800717a:	468c      	mov	ip, r1
 800717c:	4463      	add	r3, ip
 800717e:	2180      	movs	r1, #128	; 0x80
 8007180:	0609      	lsls	r1, r1, #24
 8007182:	430a      	orrs	r2, r1
 8007184:	601a      	str	r2, [r3, #0]
 8007186:	e043      	b.n	8007210 <USB_EPStartXfer+0xbcc>
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	085b      	lsrs	r3, r3, #1
 800718e:	637b      	str	r3, [r7, #52]	; 0x34
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	2201      	movs	r2, #1
 8007196:	4013      	ands	r3, r2
 8007198:	d002      	beq.n	80071a0 <USB_EPStartXfer+0xb5c>
 800719a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719c:	3301      	adds	r3, #1
 800719e:	637b      	str	r3, [r7, #52]	; 0x34
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	00db      	lsls	r3, r3, #3
 80071a6:	4a8b      	ldr	r2, [pc, #556]	; (80073d4 <USB_EPStartXfer+0xd90>)
 80071a8:	4694      	mov	ip, r2
 80071aa:	4463      	add	r3, ip
 80071ac:	6819      	ldr	r1, [r3, #0]
 80071ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b0:	069a      	lsls	r2, r3, #26
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	00db      	lsls	r3, r3, #3
 80071b8:	4886      	ldr	r0, [pc, #536]	; (80073d4 <USB_EPStartXfer+0xd90>)
 80071ba:	4684      	mov	ip, r0
 80071bc:	4463      	add	r3, ip
 80071be:	430a      	orrs	r2, r1
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	e025      	b.n	8007210 <USB_EPStartXfer+0xbcc>
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	785b      	ldrb	r3, [r3, #1]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d121      	bne.n	8007210 <USB_EPStartXfer+0xbcc>
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	00db      	lsls	r3, r3, #3
 80071d2:	4a80      	ldr	r2, [pc, #512]	; (80073d4 <USB_EPStartXfer+0xd90>)
 80071d4:	4694      	mov	ip, r2
 80071d6:	4463      	add	r3, ip
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	00db      	lsls	r3, r3, #3
 80071e0:	497c      	ldr	r1, [pc, #496]	; (80073d4 <USB_EPStartXfer+0xd90>)
 80071e2:	468c      	mov	ip, r1
 80071e4:	4463      	add	r3, ip
 80071e6:	0412      	lsls	r2, r2, #16
 80071e8:	0c12      	lsrs	r2, r2, #16
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	00db      	lsls	r3, r3, #3
 80071f2:	4a78      	ldr	r2, [pc, #480]	; (80073d4 <USB_EPStartXfer+0xd90>)
 80071f4:	4694      	mov	ip, r2
 80071f6:	4463      	add	r3, ip
 80071f8:	6819      	ldr	r1, [r3, #0]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	041a      	lsls	r2, r3, #16
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	00db      	lsls	r3, r3, #3
 8007206:	4873      	ldr	r0, [pc, #460]	; (80073d4 <USB_EPStartXfer+0xd90>)
 8007208:	4684      	mov	ip, r0
 800720a:	4463      	add	r3, ip
 800720c:	430a      	orrs	r2, r1
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	785b      	ldrb	r3, [r3, #1]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d168      	bne.n	80072ea <USB_EPStartXfer+0xca6>
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	00db      	lsls	r3, r3, #3
 800721e:	4a6d      	ldr	r2, [pc, #436]	; (80073d4 <USB_EPStartXfer+0xd90>)
 8007220:	4694      	mov	ip, r2
 8007222:	4463      	add	r3, ip
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	00db      	lsls	r3, r3, #3
 800722c:	4969      	ldr	r1, [pc, #420]	; (80073d4 <USB_EPStartXfer+0xd90>)
 800722e:	468c      	mov	ip, r1
 8007230:	4463      	add	r3, ip
 8007232:	0192      	lsls	r2, r2, #6
 8007234:	0992      	lsrs	r2, r2, #6
 8007236:	605a      	str	r2, [r3, #4]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	2b3e      	cmp	r3, #62	; 0x3e
 800723e:	d920      	bls.n	8007282 <USB_EPStartXfer+0xc3e>
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	095b      	lsrs	r3, r3, #5
 8007246:	633b      	str	r3, [r7, #48]	; 0x30
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	221f      	movs	r2, #31
 800724e:	4013      	ands	r3, r2
 8007250:	d102      	bne.n	8007258 <USB_EPStartXfer+0xc14>
 8007252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007254:	3b01      	subs	r3, #1
 8007256:	633b      	str	r3, [r7, #48]	; 0x30
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	00db      	lsls	r3, r3, #3
 800725e:	4a5d      	ldr	r2, [pc, #372]	; (80073d4 <USB_EPStartXfer+0xd90>)
 8007260:	4694      	mov	ip, r2
 8007262:	4463      	add	r3, ip
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007268:	069b      	lsls	r3, r3, #26
 800726a:	431a      	orrs	r2, r3
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	00db      	lsls	r3, r3, #3
 8007272:	4958      	ldr	r1, [pc, #352]	; (80073d4 <USB_EPStartXfer+0xd90>)
 8007274:	468c      	mov	ip, r1
 8007276:	4463      	add	r3, ip
 8007278:	2180      	movs	r1, #128	; 0x80
 800727a:	0609      	lsls	r1, r1, #24
 800727c:	430a      	orrs	r2, r1
 800727e:	605a      	str	r2, [r3, #4]
 8007280:	e059      	b.n	8007336 <USB_EPStartXfer+0xcf2>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d111      	bne.n	80072ae <USB_EPStartXfer+0xc6a>
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	00db      	lsls	r3, r3, #3
 8007290:	4a50      	ldr	r2, [pc, #320]	; (80073d4 <USB_EPStartXfer+0xd90>)
 8007292:	4694      	mov	ip, r2
 8007294:	4463      	add	r3, ip
 8007296:	685a      	ldr	r2, [r3, #4]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	00db      	lsls	r3, r3, #3
 800729e:	494d      	ldr	r1, [pc, #308]	; (80073d4 <USB_EPStartXfer+0xd90>)
 80072a0:	468c      	mov	ip, r1
 80072a2:	4463      	add	r3, ip
 80072a4:	2180      	movs	r1, #128	; 0x80
 80072a6:	0609      	lsls	r1, r1, #24
 80072a8:	430a      	orrs	r2, r1
 80072aa:	605a      	str	r2, [r3, #4]
 80072ac:	e043      	b.n	8007336 <USB_EPStartXfer+0xcf2>
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	085b      	lsrs	r3, r3, #1
 80072b4:	633b      	str	r3, [r7, #48]	; 0x30
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	2201      	movs	r2, #1
 80072bc:	4013      	ands	r3, r2
 80072be:	d002      	beq.n	80072c6 <USB_EPStartXfer+0xc82>
 80072c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c2:	3301      	adds	r3, #1
 80072c4:	633b      	str	r3, [r7, #48]	; 0x30
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	00db      	lsls	r3, r3, #3
 80072cc:	4a41      	ldr	r2, [pc, #260]	; (80073d4 <USB_EPStartXfer+0xd90>)
 80072ce:	4694      	mov	ip, r2
 80072d0:	4463      	add	r3, ip
 80072d2:	6859      	ldr	r1, [r3, #4]
 80072d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d6:	069a      	lsls	r2, r3, #26
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	00db      	lsls	r3, r3, #3
 80072de:	483d      	ldr	r0, [pc, #244]	; (80073d4 <USB_EPStartXfer+0xd90>)
 80072e0:	4684      	mov	ip, r0
 80072e2:	4463      	add	r3, ip
 80072e4:	430a      	orrs	r2, r1
 80072e6:	605a      	str	r2, [r3, #4]
 80072e8:	e025      	b.n	8007336 <USB_EPStartXfer+0xcf2>
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	785b      	ldrb	r3, [r3, #1]
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d121      	bne.n	8007336 <USB_EPStartXfer+0xcf2>
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	00db      	lsls	r3, r3, #3
 80072f8:	4a36      	ldr	r2, [pc, #216]	; (80073d4 <USB_EPStartXfer+0xd90>)
 80072fa:	4694      	mov	ip, r2
 80072fc:	4463      	add	r3, ip
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	00db      	lsls	r3, r3, #3
 8007306:	4933      	ldr	r1, [pc, #204]	; (80073d4 <USB_EPStartXfer+0xd90>)
 8007308:	468c      	mov	ip, r1
 800730a:	4463      	add	r3, ip
 800730c:	0412      	lsls	r2, r2, #16
 800730e:	0c12      	lsrs	r2, r2, #16
 8007310:	605a      	str	r2, [r3, #4]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	00db      	lsls	r3, r3, #3
 8007318:	4a2e      	ldr	r2, [pc, #184]	; (80073d4 <USB_EPStartXfer+0xd90>)
 800731a:	4694      	mov	ip, r2
 800731c:	4463      	add	r3, ip
 800731e:	6859      	ldr	r1, [r3, #4]
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	041a      	lsls	r2, r3, #16
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	00db      	lsls	r3, r3, #3
 800732c:	4829      	ldr	r0, [pc, #164]	; (80073d4 <USB_EPStartXfer+0xd90>)
 800732e:	4684      	mov	ip, r0
 8007330:	4463      	add	r3, ip
 8007332:	430a      	orrs	r2, r1
 8007334:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d100      	bne.n	8007340 <USB_EPStartXfer+0xcfc>
 800733e:	e170      	b.n	8007622 <USB_EPStartXfer+0xfde>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	18d3      	adds	r3, r2, r3
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	2126      	movs	r1, #38	; 0x26
 800734e:	187b      	adds	r3, r7, r1
 8007350:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007352:	187b      	adds	r3, r7, r1
 8007354:	881a      	ldrh	r2, [r3, #0]
 8007356:	2380      	movs	r3, #128	; 0x80
 8007358:	01db      	lsls	r3, r3, #7
 800735a:	4013      	ands	r3, r2
 800735c:	d004      	beq.n	8007368 <USB_EPStartXfer+0xd24>
 800735e:	187b      	adds	r3, r7, r1
 8007360:	881b      	ldrh	r3, [r3, #0]
 8007362:	2240      	movs	r2, #64	; 0x40
 8007364:	4013      	ands	r3, r2
 8007366:	d10d      	bne.n	8007384 <USB_EPStartXfer+0xd40>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007368:	2126      	movs	r1, #38	; 0x26
 800736a:	187b      	adds	r3, r7, r1
 800736c:	881a      	ldrh	r2, [r3, #0]
 800736e:	2380      	movs	r3, #128	; 0x80
 8007370:	01db      	lsls	r3, r3, #7
 8007372:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007374:	d000      	beq.n	8007378 <USB_EPStartXfer+0xd34>
 8007376:	e154      	b.n	8007622 <USB_EPStartXfer+0xfde>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007378:	187b      	adds	r3, r7, r1
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	2240      	movs	r2, #64	; 0x40
 800737e:	4013      	ands	r3, r2
 8007380:	d000      	beq.n	8007384 <USB_EPStartXfer+0xd40>
 8007382:	e14e      	b.n	8007622 <USB_EPStartXfer+0xfde>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	18d3      	adds	r3, r2, r3
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a11      	ldr	r2, [pc, #68]	; (80073d8 <USB_EPStartXfer+0xd94>)
 8007392:	4013      	ands	r3, r2
 8007394:	623b      	str	r3, [r7, #32]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	18d3      	adds	r3, r2, r3
 80073a0:	6a3a      	ldr	r2, [r7, #32]
 80073a2:	490e      	ldr	r1, [pc, #56]	; (80073dc <USB_EPStartXfer+0xd98>)
 80073a4:	430a      	orrs	r2, r1
 80073a6:	601a      	str	r2, [r3, #0]
 80073a8:	e13b      	b.n	8007622 <USB_EPStartXfer+0xfde>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	78db      	ldrb	r3, [r3, #3]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d000      	beq.n	80073b4 <USB_EPStartXfer+0xd70>
 80073b2:	e134      	b.n	800761e <USB_EPStartXfer+0xfda>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	699a      	ldr	r2, [r3, #24]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d90f      	bls.n	80073e0 <USB_EPStartXfer+0xd9c>
        {
          len = ep->maxpacket;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len -= len;
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	699a      	ldr	r2, [r3, #24]
 80073ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073cc:	1ad2      	subs	r2, r2, r3
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	619a      	str	r2, [r3, #24]
 80073d2:	e00b      	b.n	80073ec <USB_EPStartXfer+0xda8>
 80073d4:	40009800 	.word	0x40009800
 80073d8:	07ff8f8f 	.word	0x07ff8f8f
 80073dc:	000080c0 	.word	0x000080c0
        }
        else
        {
          len = ep->xfer_len;
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len = 0U;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2200      	movs	r2, #0
 80073ea:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	785b      	ldrb	r3, [r3, #1]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d162      	bne.n	80074ba <USB_EPStartXfer+0xe76>
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	00db      	lsls	r3, r3, #3
 80073fa:	4a9a      	ldr	r2, [pc, #616]	; (8007664 <USB_EPStartXfer+0x1020>)
 80073fc:	4694      	mov	ip, r2
 80073fe:	4463      	add	r3, ip
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	00db      	lsls	r3, r3, #3
 8007408:	4996      	ldr	r1, [pc, #600]	; (8007664 <USB_EPStartXfer+0x1020>)
 800740a:	468c      	mov	ip, r1
 800740c:	4463      	add	r3, ip
 800740e:	0192      	lsls	r2, r2, #6
 8007410:	0992      	lsrs	r2, r2, #6
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007416:	2b3e      	cmp	r3, #62	; 0x3e
 8007418:	d91e      	bls.n	8007458 <USB_EPStartXfer+0xe14>
 800741a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800741c:	095b      	lsrs	r3, r3, #5
 800741e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007422:	221f      	movs	r2, #31
 8007424:	4013      	ands	r3, r2
 8007426:	d102      	bne.n	800742e <USB_EPStartXfer+0xdea>
 8007428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742a:	3b01      	subs	r3, #1
 800742c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	00db      	lsls	r3, r3, #3
 8007434:	4a8b      	ldr	r2, [pc, #556]	; (8007664 <USB_EPStartXfer+0x1020>)
 8007436:	4694      	mov	ip, r2
 8007438:	4463      	add	r3, ip
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743e:	069b      	lsls	r3, r3, #26
 8007440:	431a      	orrs	r2, r3
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	00db      	lsls	r3, r3, #3
 8007448:	4986      	ldr	r1, [pc, #536]	; (8007664 <USB_EPStartXfer+0x1020>)
 800744a:	468c      	mov	ip, r1
 800744c:	4463      	add	r3, ip
 800744e:	2180      	movs	r1, #128	; 0x80
 8007450:	0609      	lsls	r1, r1, #24
 8007452:	430a      	orrs	r2, r1
 8007454:	601a      	str	r2, [r3, #0]
 8007456:	e055      	b.n	8007504 <USB_EPStartXfer+0xec0>
 8007458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800745a:	2b00      	cmp	r3, #0
 800745c:	d111      	bne.n	8007482 <USB_EPStartXfer+0xe3e>
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	00db      	lsls	r3, r3, #3
 8007464:	4a7f      	ldr	r2, [pc, #508]	; (8007664 <USB_EPStartXfer+0x1020>)
 8007466:	4694      	mov	ip, r2
 8007468:	4463      	add	r3, ip
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	00db      	lsls	r3, r3, #3
 8007472:	497c      	ldr	r1, [pc, #496]	; (8007664 <USB_EPStartXfer+0x1020>)
 8007474:	468c      	mov	ip, r1
 8007476:	4463      	add	r3, ip
 8007478:	2180      	movs	r1, #128	; 0x80
 800747a:	0609      	lsls	r1, r1, #24
 800747c:	430a      	orrs	r2, r1
 800747e:	601a      	str	r2, [r3, #0]
 8007480:	e040      	b.n	8007504 <USB_EPStartXfer+0xec0>
 8007482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007484:	085b      	lsrs	r3, r3, #1
 8007486:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800748a:	2201      	movs	r2, #1
 800748c:	4013      	ands	r3, r2
 800748e:	d002      	beq.n	8007496 <USB_EPStartXfer+0xe52>
 8007490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007492:	3301      	adds	r3, #1
 8007494:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	00db      	lsls	r3, r3, #3
 800749c:	4a71      	ldr	r2, [pc, #452]	; (8007664 <USB_EPStartXfer+0x1020>)
 800749e:	4694      	mov	ip, r2
 80074a0:	4463      	add	r3, ip
 80074a2:	6819      	ldr	r1, [r3, #0]
 80074a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a6:	069a      	lsls	r2, r3, #26
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	00db      	lsls	r3, r3, #3
 80074ae:	486d      	ldr	r0, [pc, #436]	; (8007664 <USB_EPStartXfer+0x1020>)
 80074b0:	4684      	mov	ip, r0
 80074b2:	4463      	add	r3, ip
 80074b4:	430a      	orrs	r2, r1
 80074b6:	601a      	str	r2, [r3, #0]
 80074b8:	e024      	b.n	8007504 <USB_EPStartXfer+0xec0>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	785b      	ldrb	r3, [r3, #1]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d120      	bne.n	8007504 <USB_EPStartXfer+0xec0>
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	00db      	lsls	r3, r3, #3
 80074c8:	4a66      	ldr	r2, [pc, #408]	; (8007664 <USB_EPStartXfer+0x1020>)
 80074ca:	4694      	mov	ip, r2
 80074cc:	4463      	add	r3, ip
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	00db      	lsls	r3, r3, #3
 80074d6:	4963      	ldr	r1, [pc, #396]	; (8007664 <USB_EPStartXfer+0x1020>)
 80074d8:	468c      	mov	ip, r1
 80074da:	4463      	add	r3, ip
 80074dc:	0412      	lsls	r2, r2, #16
 80074de:	0c12      	lsrs	r2, r2, #16
 80074e0:	601a      	str	r2, [r3, #0]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	00db      	lsls	r3, r3, #3
 80074e8:	4a5e      	ldr	r2, [pc, #376]	; (8007664 <USB_EPStartXfer+0x1020>)
 80074ea:	4694      	mov	ip, r2
 80074ec:	4463      	add	r3, ip
 80074ee:	6819      	ldr	r1, [r3, #0]
 80074f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074f2:	041a      	lsls	r2, r3, #16
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	00db      	lsls	r3, r3, #3
 80074fa:	485a      	ldr	r0, [pc, #360]	; (8007664 <USB_EPStartXfer+0x1020>)
 80074fc:	4684      	mov	ip, r0
 80074fe:	4463      	add	r3, ip
 8007500:	430a      	orrs	r2, r1
 8007502:	601a      	str	r2, [r3, #0]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	785b      	ldrb	r3, [r3, #1]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d162      	bne.n	80075d2 <USB_EPStartXfer+0xf8e>
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	00db      	lsls	r3, r3, #3
 8007512:	4a54      	ldr	r2, [pc, #336]	; (8007664 <USB_EPStartXfer+0x1020>)
 8007514:	4694      	mov	ip, r2
 8007516:	4463      	add	r3, ip
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	00db      	lsls	r3, r3, #3
 8007520:	4950      	ldr	r1, [pc, #320]	; (8007664 <USB_EPStartXfer+0x1020>)
 8007522:	468c      	mov	ip, r1
 8007524:	4463      	add	r3, ip
 8007526:	0192      	lsls	r2, r2, #6
 8007528:	0992      	lsrs	r2, r2, #6
 800752a:	605a      	str	r2, [r3, #4]
 800752c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800752e:	2b3e      	cmp	r3, #62	; 0x3e
 8007530:	d91e      	bls.n	8007570 <USB_EPStartXfer+0xf2c>
 8007532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007534:	095b      	lsrs	r3, r3, #5
 8007536:	62bb      	str	r3, [r7, #40]	; 0x28
 8007538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800753a:	221f      	movs	r2, #31
 800753c:	4013      	ands	r3, r2
 800753e:	d102      	bne.n	8007546 <USB_EPStartXfer+0xf02>
 8007540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007542:	3b01      	subs	r3, #1
 8007544:	62bb      	str	r3, [r7, #40]	; 0x28
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	00db      	lsls	r3, r3, #3
 800754c:	4a45      	ldr	r2, [pc, #276]	; (8007664 <USB_EPStartXfer+0x1020>)
 800754e:	4694      	mov	ip, r2
 8007550:	4463      	add	r3, ip
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007556:	069b      	lsls	r3, r3, #26
 8007558:	431a      	orrs	r2, r3
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	00db      	lsls	r3, r3, #3
 8007560:	4940      	ldr	r1, [pc, #256]	; (8007664 <USB_EPStartXfer+0x1020>)
 8007562:	468c      	mov	ip, r1
 8007564:	4463      	add	r3, ip
 8007566:	2180      	movs	r1, #128	; 0x80
 8007568:	0609      	lsls	r1, r1, #24
 800756a:	430a      	orrs	r2, r1
 800756c:	605a      	str	r2, [r3, #4]
 800756e:	e058      	b.n	8007622 <USB_EPStartXfer+0xfde>
 8007570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007572:	2b00      	cmp	r3, #0
 8007574:	d111      	bne.n	800759a <USB_EPStartXfer+0xf56>
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	4a39      	ldr	r2, [pc, #228]	; (8007664 <USB_EPStartXfer+0x1020>)
 800757e:	4694      	mov	ip, r2
 8007580:	4463      	add	r3, ip
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	00db      	lsls	r3, r3, #3
 800758a:	4936      	ldr	r1, [pc, #216]	; (8007664 <USB_EPStartXfer+0x1020>)
 800758c:	468c      	mov	ip, r1
 800758e:	4463      	add	r3, ip
 8007590:	2180      	movs	r1, #128	; 0x80
 8007592:	0609      	lsls	r1, r1, #24
 8007594:	430a      	orrs	r2, r1
 8007596:	605a      	str	r2, [r3, #4]
 8007598:	e043      	b.n	8007622 <USB_EPStartXfer+0xfde>
 800759a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800759c:	085b      	lsrs	r3, r3, #1
 800759e:	62bb      	str	r3, [r7, #40]	; 0x28
 80075a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075a2:	2201      	movs	r2, #1
 80075a4:	4013      	ands	r3, r2
 80075a6:	d002      	beq.n	80075ae <USB_EPStartXfer+0xf6a>
 80075a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075aa:	3301      	adds	r3, #1
 80075ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	00db      	lsls	r3, r3, #3
 80075b4:	4a2b      	ldr	r2, [pc, #172]	; (8007664 <USB_EPStartXfer+0x1020>)
 80075b6:	4694      	mov	ip, r2
 80075b8:	4463      	add	r3, ip
 80075ba:	6859      	ldr	r1, [r3, #4]
 80075bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075be:	069a      	lsls	r2, r3, #26
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	00db      	lsls	r3, r3, #3
 80075c6:	4827      	ldr	r0, [pc, #156]	; (8007664 <USB_EPStartXfer+0x1020>)
 80075c8:	4684      	mov	ip, r0
 80075ca:	4463      	add	r3, ip
 80075cc:	430a      	orrs	r2, r1
 80075ce:	605a      	str	r2, [r3, #4]
 80075d0:	e027      	b.n	8007622 <USB_EPStartXfer+0xfde>
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	785b      	ldrb	r3, [r3, #1]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d123      	bne.n	8007622 <USB_EPStartXfer+0xfde>
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	00db      	lsls	r3, r3, #3
 80075e0:	4a20      	ldr	r2, [pc, #128]	; (8007664 <USB_EPStartXfer+0x1020>)
 80075e2:	4694      	mov	ip, r2
 80075e4:	4463      	add	r3, ip
 80075e6:	685a      	ldr	r2, [r3, #4]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	00db      	lsls	r3, r3, #3
 80075ee:	491d      	ldr	r1, [pc, #116]	; (8007664 <USB_EPStartXfer+0x1020>)
 80075f0:	468c      	mov	ip, r1
 80075f2:	4463      	add	r3, ip
 80075f4:	0412      	lsls	r2, r2, #16
 80075f6:	0c12      	lsrs	r2, r2, #16
 80075f8:	605a      	str	r2, [r3, #4]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	00db      	lsls	r3, r3, #3
 8007600:	4a18      	ldr	r2, [pc, #96]	; (8007664 <USB_EPStartXfer+0x1020>)
 8007602:	4694      	mov	ip, r2
 8007604:	4463      	add	r3, ip
 8007606:	6859      	ldr	r1, [r3, #4]
 8007608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800760a:	041a      	lsls	r2, r3, #16
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	00db      	lsls	r3, r3, #3
 8007612:	4814      	ldr	r0, [pc, #80]	; (8007664 <USB_EPStartXfer+0x1020>)
 8007614:	4684      	mov	ip, r0
 8007616:	4463      	add	r3, ip
 8007618:	430a      	orrs	r2, r1
 800761a:	605a      	str	r2, [r3, #4]
 800761c:	e001      	b.n	8007622 <USB_EPStartXfer+0xfde>
      }
      else
      {
        return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e01c      	b.n	800765c <USB_EPStartXfer+0x1018>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	18d3      	adds	r3, r2, r3
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a0e      	ldr	r2, [pc, #56]	; (8007668 <USB_EPStartXfer+0x1024>)
 8007630:	4013      	ands	r3, r2
 8007632:	61fb      	str	r3, [r7, #28]
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	2280      	movs	r2, #128	; 0x80
 8007638:	0152      	lsls	r2, r2, #5
 800763a:	4053      	eors	r3, r2
 800763c:	61fb      	str	r3, [r7, #28]
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	2280      	movs	r2, #128	; 0x80
 8007642:	0192      	lsls	r2, r2, #6
 8007644:	4053      	eors	r3, r2
 8007646:	61fb      	str	r3, [r7, #28]
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	18d3      	adds	r3, r2, r3
 8007652:	69fa      	ldr	r2, [r7, #28]
 8007654:	4905      	ldr	r1, [pc, #20]	; (800766c <USB_EPStartXfer+0x1028>)
 8007656:	430a      	orrs	r2, r1
 8007658:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	0018      	movs	r0, r3
 800765e:	46bd      	mov	sp, r7
 8007660:	b017      	add	sp, #92	; 0x5c
 8007662:	bd90      	pop	{r4, r7, pc}
 8007664:	40009800 	.word	0x40009800
 8007668:	07ffbf8f 	.word	0x07ffbf8f
 800766c:	00008080 	.word	0x00008080

08007670 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	785b      	ldrb	r3, [r3, #1]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d016      	beq.n	80076b0 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	18d3      	adds	r3, r2, r3
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a16      	ldr	r2, [pc, #88]	; (80076e8 <USB_EPSetStall+0x78>)
 8007690:	4013      	ands	r3, r2
 8007692:	60bb      	str	r3, [r7, #8]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2210      	movs	r2, #16
 8007698:	4053      	eors	r3, r2
 800769a:	60bb      	str	r3, [r7, #8]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	18d3      	adds	r3, r2, r3
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	4910      	ldr	r1, [pc, #64]	; (80076ec <USB_EPSetStall+0x7c>)
 80076aa:	430a      	orrs	r2, r1
 80076ac:	601a      	str	r2, [r3, #0]
 80076ae:	e016      	b.n	80076de <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	18d3      	adds	r3, r2, r3
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a0c      	ldr	r2, [pc, #48]	; (80076f0 <USB_EPSetStall+0x80>)
 80076be:	4013      	ands	r3, r2
 80076c0:	60fb      	str	r3, [r7, #12]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2280      	movs	r2, #128	; 0x80
 80076c6:	0152      	lsls	r2, r2, #5
 80076c8:	4053      	eors	r3, r2
 80076ca:	60fb      	str	r3, [r7, #12]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	18d3      	adds	r3, r2, r3
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	4904      	ldr	r1, [pc, #16]	; (80076ec <USB_EPSetStall+0x7c>)
 80076da:	430a      	orrs	r2, r1
 80076dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	0018      	movs	r0, r3
 80076e2:	46bd      	mov	sp, r7
 80076e4:	b004      	add	sp, #16
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	07ff8fbf 	.word	0x07ff8fbf
 80076ec:	00008080 	.word	0x00008080
 80076f0:	07ffbf8f 	.word	0x07ffbf8f

080076f4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b088      	sub	sp, #32
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	7b1b      	ldrb	r3, [r3, #12]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d000      	beq.n	8007708 <USB_EPClearStall+0x14>
 8007706:	e075      	b.n	80077f4 <USB_EPClearStall+0x100>
  {
    if (ep->is_in != 0U)
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	785b      	ldrb	r3, [r3, #1]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d037      	beq.n	8007780 <USB_EPClearStall+0x8c>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	18d3      	adds	r3, r2, r3
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	613b      	str	r3, [r7, #16]
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	2240      	movs	r2, #64	; 0x40
 8007722:	4013      	ands	r3, r2
 8007724:	d011      	beq.n	800774a <USB_EPClearStall+0x56>
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	18d3      	adds	r3, r2, r3
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a33      	ldr	r2, [pc, #204]	; (8007800 <USB_EPClearStall+0x10c>)
 8007734:	4013      	ands	r3, r2
 8007736:	60fb      	str	r3, [r7, #12]
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	18d3      	adds	r3, r2, r3
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	492f      	ldr	r1, [pc, #188]	; (8007804 <USB_EPClearStall+0x110>)
 8007746:	430a      	orrs	r2, r1
 8007748:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	78db      	ldrb	r3, [r3, #3]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d050      	beq.n	80077f4 <USB_EPClearStall+0x100>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	18d3      	adds	r3, r2, r3
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a2a      	ldr	r2, [pc, #168]	; (8007808 <USB_EPClearStall+0x114>)
 8007760:	4013      	ands	r3, r2
 8007762:	60bb      	str	r3, [r7, #8]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2220      	movs	r2, #32
 8007768:	4053      	eors	r3, r2
 800776a:	60bb      	str	r3, [r7, #8]
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	18d3      	adds	r3, r2, r3
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	4924      	ldr	r1, [pc, #144]	; (800780c <USB_EPClearStall+0x118>)
 800777a:	430a      	orrs	r2, r1
 800777c:	601a      	str	r2, [r3, #0]
 800777e:	e039      	b.n	80077f4 <USB_EPClearStall+0x100>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	18d3      	adds	r3, r2, r3
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	61fb      	str	r3, [r7, #28]
 800778e:	69fa      	ldr	r2, [r7, #28]
 8007790:	2380      	movs	r3, #128	; 0x80
 8007792:	01db      	lsls	r3, r3, #7
 8007794:	4013      	ands	r3, r2
 8007796:	d011      	beq.n	80077bc <USB_EPClearStall+0xc8>
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	18d3      	adds	r3, r2, r3
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a16      	ldr	r2, [pc, #88]	; (8007800 <USB_EPClearStall+0x10c>)
 80077a6:	4013      	ands	r3, r2
 80077a8:	61bb      	str	r3, [r7, #24]
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	18d3      	adds	r3, r2, r3
 80077b4:	69ba      	ldr	r2, [r7, #24]
 80077b6:	4916      	ldr	r1, [pc, #88]	; (8007810 <USB_EPClearStall+0x11c>)
 80077b8:	430a      	orrs	r2, r1
 80077ba:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	18d3      	adds	r3, r2, r3
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a12      	ldr	r2, [pc, #72]	; (8007814 <USB_EPClearStall+0x120>)
 80077ca:	4013      	ands	r3, r2
 80077cc:	617b      	str	r3, [r7, #20]
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	2280      	movs	r2, #128	; 0x80
 80077d2:	0152      	lsls	r2, r2, #5
 80077d4:	4053      	eors	r3, r2
 80077d6:	617b      	str	r3, [r7, #20]
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	2280      	movs	r2, #128	; 0x80
 80077dc:	0192      	lsls	r2, r2, #6
 80077de:	4053      	eors	r3, r2
 80077e0:	617b      	str	r3, [r7, #20]
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	18d3      	adds	r3, r2, r3
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	4907      	ldr	r1, [pc, #28]	; (800780c <USB_EPClearStall+0x118>)
 80077f0:	430a      	orrs	r2, r1
 80077f2:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	0018      	movs	r0, r3
 80077f8:	46bd      	mov	sp, r7
 80077fa:	b008      	add	sp, #32
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	46c0      	nop			; (mov r8, r8)
 8007800:	07ff8f8f 	.word	0x07ff8f8f
 8007804:	000080c0 	.word	0x000080c0
 8007808:	07ff8fbf 	.word	0x07ff8fbf
 800780c:	00008080 	.word	0x00008080
 8007810:	0000c080 	.word	0x0000c080
 8007814:	07ffbf8f 	.word	0x07ffbf8f

08007818 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	000a      	movs	r2, r1
 8007822:	1cfb      	adds	r3, r7, #3
 8007824:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8007826:	1cfb      	adds	r3, r7, #3
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d102      	bne.n	8007834 <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2280      	movs	r2, #128	; 0x80
 8007832:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	0018      	movs	r0, r3
 8007838:	46bd      	mov	sp, r7
 800783a:	b002      	add	sp, #8
 800783c:	bd80      	pop	{r7, pc}

0800783e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b082      	sub	sp, #8
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800784a:	2280      	movs	r2, #128	; 0x80
 800784c:	0212      	lsls	r2, r2, #8
 800784e:	431a      	orrs	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	0018      	movs	r0, r3
 8007858:	46bd      	mov	sp, r7
 800785a:	b002      	add	sp, #8
 800785c:	bd80      	pop	{r7, pc}

0800785e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800786a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800786c:	68fb      	ldr	r3, [r7, #12]
}
 800786e:	0018      	movs	r0, r3
 8007870:	46bd      	mov	sp, r7
 8007872:	b004      	add	sp, #16
 8007874:	bd80      	pop	{r7, pc}
	...

08007878 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b08a      	sub	sp, #40	; 0x28
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	0019      	movs	r1, r3
 8007884:	1dbb      	adds	r3, r7, #6
 8007886:	801a      	strh	r2, [r3, #0]
 8007888:	1d3b      	adds	r3, r7, #4
 800788a:	1c0a      	adds	r2, r1, #0
 800788c:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800788e:	1d3b      	adds	r3, r7, #4
 8007890:	881b      	ldrh	r3, [r3, #0]
 8007892:	3303      	adds	r3, #3
 8007894:	089b      	lsrs	r3, r3, #2
 8007896:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8007898:	2016      	movs	r0, #22
 800789a:	183b      	adds	r3, r7, r0
 800789c:	1d3a      	adds	r2, r7, #4
 800789e:	8812      	ldrh	r2, [r2, #0]
 80078a0:	2103      	movs	r1, #3
 80078a2:	400a      	ands	r2, r1
 80078a4:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 80078aa:	183b      	adds	r3, r7, r0
 80078ac:	881b      	ldrh	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d002      	beq.n	80078b8 <USB_WritePMA+0x40>
  {
    NbWords--;
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	3b01      	subs	r3, #1
 80078b6:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 80078b8:	1dbb      	adds	r3, r7, #6
 80078ba:	881b      	ldrh	r3, [r3, #0]
 80078bc:	4a28      	ldr	r2, [pc, #160]	; (8007960 <USB_WritePMA+0xe8>)
 80078be:	4694      	mov	ip, r2
 80078c0:	4463      	add	r3, ip
 80078c2:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	623b      	str	r3, [r7, #32]
 80078c8:	e01f      	b.n	800790a <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	781a      	ldrb	r2, [r3, #0]
 80078ce:	7859      	ldrb	r1, [r3, #1]
 80078d0:	0209      	lsls	r1, r1, #8
 80078d2:	430a      	orrs	r2, r1
 80078d4:	7899      	ldrb	r1, [r3, #2]
 80078d6:	0409      	lsls	r1, r1, #16
 80078d8:	430a      	orrs	r2, r1
 80078da:	78db      	ldrb	r3, [r3, #3]
 80078dc:	061b      	lsls	r3, r3, #24
 80078de:	4313      	orrs	r3, r2
 80078e0:	001a      	movs	r2, r3
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	601a      	str	r2, [r3, #0]
    pdwVal++;
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	3304      	adds	r3, #4
 80078ea:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	3301      	adds	r3, #1
 80078f0:	613b      	str	r3, [r7, #16]
    pBuf++;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	3301      	adds	r3, #1
 80078f6:	613b      	str	r3, [r7, #16]
    pBuf++;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	3301      	adds	r3, #1
 80078fc:	613b      	str	r3, [r7, #16]
    pBuf++;
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	3301      	adds	r3, #1
 8007902:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 8007904:	6a3b      	ldr	r3, [r7, #32]
 8007906:	3b01      	subs	r3, #1
 8007908:	623b      	str	r3, [r7, #32]
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1dc      	bne.n	80078ca <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 8007910:	2316      	movs	r3, #22
 8007912:	18fb      	adds	r3, r7, r3
 8007914:	881b      	ldrh	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d01e      	beq.n	8007958 <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 800791a:	2300      	movs	r3, #0
 800791c:	627b      	str	r3, [r7, #36]	; 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	001a      	movs	r2, r3
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	00db      	lsls	r3, r3, #3
 8007928:	409a      	lsls	r2, r3
 800792a:	0013      	movs	r3, r2
 800792c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800792e:	4313      	orrs	r3, r2
 8007930:	627b      	str	r3, [r7, #36]	; 0x24
      count++;
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	3301      	adds	r3, #1
 8007936:	623b      	str	r3, [r7, #32]
      pBuf++;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	3301      	adds	r3, #1
 800793c:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800793e:	2116      	movs	r1, #22
 8007940:	187b      	adds	r3, r7, r1
 8007942:	881a      	ldrh	r2, [r3, #0]
 8007944:	187b      	adds	r3, r7, r1
 8007946:	3a01      	subs	r2, #1
 8007948:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800794a:	187b      	adds	r3, r7, r1
 800794c:	881b      	ldrh	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1e5      	bne.n	800791e <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007956:	601a      	str	r2, [r3, #0]
  }
}
 8007958:	46c0      	nop			; (mov r8, r8)
 800795a:	46bd      	mov	sp, r7
 800795c:	b00a      	add	sp, #40	; 0x28
 800795e:	bd80      	pop	{r7, pc}
 8007960:	40009800 	.word	0x40009800

08007964 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007964:	b590      	push	{r4, r7, lr}
 8007966:	b08b      	sub	sp, #44	; 0x2c
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	0019      	movs	r1, r3
 8007970:	1dbb      	adds	r3, r7, #6
 8007972:	801a      	strh	r2, [r3, #0]
 8007974:	1d3b      	adds	r3, r7, #4
 8007976:	1c0a      	adds	r2, r1, #0
 8007978:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800797a:	1d3b      	adds	r3, r7, #4
 800797c:	881b      	ldrh	r3, [r3, #0]
 800797e:	3303      	adds	r3, #3
 8007980:	089b      	lsrs	r3, r3, #2
 8007982:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8007984:	201a      	movs	r0, #26
 8007986:	183b      	adds	r3, r7, r0
 8007988:	1d3a      	adds	r2, r7, #4
 800798a:	8812      	ldrh	r2, [r2, #0]
 800798c:	2103      	movs	r1, #3
 800798e:	400a      	ands	r2, r1
 8007990:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8007996:	1dbb      	adds	r3, r7, #6
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	4a39      	ldr	r2, [pc, #228]	; (8007a80 <USB_ReadPMA+0x11c>)
 800799c:	4694      	mov	ip, r2
 800799e:	4463      	add	r3, ip
 80079a0:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 80079a2:	183b      	adds	r3, r7, r0
 80079a4:	881b      	ldrh	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <USB_ReadPMA+0x4c>
  {
    NbWords--;
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	3b01      	subs	r3, #1
 80079ae:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	627b      	str	r3, [r7, #36]	; 0x24
 80079b4:	e03c      	b.n	8007a30 <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 80079b6:	6a3b      	ldr	r3, [r7, #32]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	21ff      	movs	r1, #255	; 0xff
 80079be:	4011      	ands	r1, r2
 80079c0:	000c      	movs	r4, r1
 80079c2:	7819      	ldrb	r1, [r3, #0]
 80079c4:	2000      	movs	r0, #0
 80079c6:	4001      	ands	r1, r0
 80079c8:	1c08      	adds	r0, r1, #0
 80079ca:	1c21      	adds	r1, r4, #0
 80079cc:	4301      	orrs	r1, r0
 80079ce:	7019      	strb	r1, [r3, #0]
 80079d0:	0a11      	lsrs	r1, r2, #8
 80079d2:	20ff      	movs	r0, #255	; 0xff
 80079d4:	4001      	ands	r1, r0
 80079d6:	000c      	movs	r4, r1
 80079d8:	7859      	ldrb	r1, [r3, #1]
 80079da:	2000      	movs	r0, #0
 80079dc:	4001      	ands	r1, r0
 80079de:	1c08      	adds	r0, r1, #0
 80079e0:	1c21      	adds	r1, r4, #0
 80079e2:	4301      	orrs	r1, r0
 80079e4:	7059      	strb	r1, [r3, #1]
 80079e6:	0c11      	lsrs	r1, r2, #16
 80079e8:	20ff      	movs	r0, #255	; 0xff
 80079ea:	4001      	ands	r1, r0
 80079ec:	000c      	movs	r4, r1
 80079ee:	7899      	ldrb	r1, [r3, #2]
 80079f0:	2000      	movs	r0, #0
 80079f2:	4001      	ands	r1, r0
 80079f4:	1c08      	adds	r0, r1, #0
 80079f6:	1c21      	adds	r1, r4, #0
 80079f8:	4301      	orrs	r1, r0
 80079fa:	7099      	strb	r1, [r3, #2]
 80079fc:	0e10      	lsrs	r0, r2, #24
 80079fe:	78da      	ldrb	r2, [r3, #3]
 8007a00:	2100      	movs	r1, #0
 8007a02:	400a      	ands	r2, r1
 8007a04:	1c11      	adds	r1, r2, #0
 8007a06:	1c02      	adds	r2, r0, #0
 8007a08:	430a      	orrs	r2, r1
 8007a0a:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 8007a0c:	6a3b      	ldr	r3, [r7, #32]
 8007a0e:	3304      	adds	r3, #4
 8007a10:	623b      	str	r3, [r7, #32]
    pBuf++;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	3301      	adds	r3, #1
 8007a16:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	3301      	adds	r3, #1
 8007a22:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	3301      	adds	r3, #1
 8007a28:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1bf      	bne.n	80079b6 <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 8007a36:	231a      	movs	r3, #26
 8007a38:	18fb      	adds	r3, r7, r3
 8007a3a:	881b      	ldrh	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d01b      	beq.n	8007a78 <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 8007a40:	6a3b      	ldr	r3, [r7, #32]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 8007a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	00db      	lsls	r3, r3, #3
 8007a4c:	693a      	ldr	r2, [r7, #16]
 8007a4e:	40da      	lsrs	r2, r3
 8007a50:	0013      	movs	r3, r2
 8007a52:	b2da      	uxtb	r2, r3
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	701a      	strb	r2, [r3, #0]
      count++;
 8007a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	627b      	str	r3, [r7, #36]	; 0x24
      pBuf++;
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	3301      	adds	r3, #1
 8007a62:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 8007a64:	211a      	movs	r1, #26
 8007a66:	187b      	adds	r3, r7, r1
 8007a68:	881a      	ldrh	r2, [r3, #0]
 8007a6a:	187b      	adds	r3, r7, r1
 8007a6c:	3a01      	subs	r2, #1
 8007a6e:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 8007a70:	187b      	adds	r3, r7, r1
 8007a72:	881b      	ldrh	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1e6      	bne.n	8007a46 <USB_ReadPMA+0xe2>
  }
}
 8007a78:	46c0      	nop			; (mov r8, r8)
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	b00b      	add	sp, #44	; 0x2c
 8007a7e:	bd90      	pop	{r4, r7, pc}
 8007a80:	40009800 	.word	0x40009800

08007a84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	000a      	movs	r2, r1
 8007a8e:	1cfb      	adds	r3, r7, #3
 8007a90:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007a92:	2387      	movs	r3, #135	; 0x87
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	0018      	movs	r0, r3
 8007a98:	f002 ff48 	bl	800a92c <USBD_static_malloc>
 8007a9c:	0003      	movs	r3, r0
 8007a9e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d10a      	bne.n	8007abc <USBD_CDC_Init+0x38>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	23b5      	movs	r3, #181	; 0xb5
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	58d2      	ldr	r2, [r2, r3]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	32b0      	adds	r2, #176	; 0xb0
 8007ab2:	0092      	lsls	r2, r2, #2
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	50d1      	str	r1, [r2, r3]
    return (uint8_t)USBD_EMEM;
 8007ab8:	2302      	movs	r3, #2
 8007aba:	e0e9      	b.n	8007c90 <USBD_CDC_Init+0x20c>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007abc:	2387      	movs	r3, #135	; 0x87
 8007abe:	009a      	lsls	r2, r3, #2
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	0018      	movs	r0, r3
 8007ac6:	f002 ff83 	bl	800a9d0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	23b5      	movs	r3, #181	; 0xb5
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	58d2      	ldr	r2, [r2, r3]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	32b0      	adds	r2, #176	; 0xb0
 8007ad6:	0092      	lsls	r2, r2, #2
 8007ad8:	68f9      	ldr	r1, [r7, #12]
 8007ada:	50d1      	str	r1, [r2, r3]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	23b5      	movs	r3, #181	; 0xb5
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	58d2      	ldr	r2, [r2, r3]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	32b0      	adds	r2, #176	; 0xb0
 8007ae8:	0092      	lsls	r2, r2, #2
 8007aea:	58d1      	ldr	r1, [r2, r3]
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	23af      	movs	r3, #175	; 0xaf
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	50d1      	str	r1, [r2, r3]
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	7c1b      	ldrb	r3, [r3, #16]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d13c      	bne.n	8007b76 <USBD_CDC_Init+0xf2>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007afc:	4b66      	ldr	r3, [pc, #408]	; (8007c98 <USBD_CDC_Init+0x214>)
 8007afe:	7819      	ldrb	r1, [r3, #0]
 8007b00:	2380      	movs	r3, #128	; 0x80
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	2202      	movs	r2, #2
 8007b08:	f002 fd4d 	bl	800a5a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b0c:	4b62      	ldr	r3, [pc, #392]	; (8007c98 <USBD_CDC_Init+0x214>)
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	001a      	movs	r2, r3
 8007b12:	230f      	movs	r3, #15
 8007b14:	401a      	ands	r2, r3
 8007b16:	6879      	ldr	r1, [r7, #4]
 8007b18:	0013      	movs	r3, r2
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	189b      	adds	r3, r3, r2
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	18cb      	adds	r3, r1, r3
 8007b22:	3324      	adds	r3, #36	; 0x24
 8007b24:	2201      	movs	r2, #1
 8007b26:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b28:	4b5c      	ldr	r3, [pc, #368]	; (8007c9c <USBD_CDC_Init+0x218>)
 8007b2a:	7819      	ldrb	r1, [r3, #0]
 8007b2c:	2380      	movs	r3, #128	; 0x80
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	2202      	movs	r2, #2
 8007b34:	f002 fd37 	bl	800a5a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b38:	4b58      	ldr	r3, [pc, #352]	; (8007c9c <USBD_CDC_Init+0x218>)
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	001a      	movs	r2, r3
 8007b3e:	230f      	movs	r3, #15
 8007b40:	401a      	ands	r2, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	23b2      	movs	r3, #178	; 0xb2
 8007b46:	0059      	lsls	r1, r3, #1
 8007b48:	0013      	movs	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	189b      	adds	r3, r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	18c3      	adds	r3, r0, r3
 8007b52:	185b      	adds	r3, r3, r1
 8007b54:	2201      	movs	r2, #1
 8007b56:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007b58:	4b51      	ldr	r3, [pc, #324]	; (8007ca0 <USBD_CDC_Init+0x21c>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	001a      	movs	r2, r3
 8007b5e:	230f      	movs	r3, #15
 8007b60:	401a      	ands	r2, r3
 8007b62:	6879      	ldr	r1, [r7, #4]
 8007b64:	0013      	movs	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	189b      	adds	r3, r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	18cb      	adds	r3, r1, r3
 8007b6e:	3326      	adds	r3, #38	; 0x26
 8007b70:	2210      	movs	r2, #16
 8007b72:	801a      	strh	r2, [r3, #0]
 8007b74:	e039      	b.n	8007bea <USBD_CDC_Init+0x166>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b76:	4b48      	ldr	r3, [pc, #288]	; (8007c98 <USBD_CDC_Init+0x214>)
 8007b78:	7819      	ldrb	r1, [r3, #0]
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	2340      	movs	r3, #64	; 0x40
 8007b7e:	2202      	movs	r2, #2
 8007b80:	f002 fd11 	bl	800a5a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b84:	4b44      	ldr	r3, [pc, #272]	; (8007c98 <USBD_CDC_Init+0x214>)
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	001a      	movs	r2, r3
 8007b8a:	230f      	movs	r3, #15
 8007b8c:	401a      	ands	r2, r3
 8007b8e:	6879      	ldr	r1, [r7, #4]
 8007b90:	0013      	movs	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	189b      	adds	r3, r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	18cb      	adds	r3, r1, r3
 8007b9a:	3324      	adds	r3, #36	; 0x24
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007ba0:	4b3e      	ldr	r3, [pc, #248]	; (8007c9c <USBD_CDC_Init+0x218>)
 8007ba2:	7819      	ldrb	r1, [r3, #0]
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	2340      	movs	r3, #64	; 0x40
 8007ba8:	2202      	movs	r2, #2
 8007baa:	f002 fcfc 	bl	800a5a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007bae:	4b3b      	ldr	r3, [pc, #236]	; (8007c9c <USBD_CDC_Init+0x218>)
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	001a      	movs	r2, r3
 8007bb4:	230f      	movs	r3, #15
 8007bb6:	401a      	ands	r2, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	23b2      	movs	r3, #178	; 0xb2
 8007bbc:	0059      	lsls	r1, r3, #1
 8007bbe:	0013      	movs	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	189b      	adds	r3, r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	18c3      	adds	r3, r0, r3
 8007bc8:	185b      	adds	r3, r3, r1
 8007bca:	2201      	movs	r2, #1
 8007bcc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007bce:	4b34      	ldr	r3, [pc, #208]	; (8007ca0 <USBD_CDC_Init+0x21c>)
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	001a      	movs	r2, r3
 8007bd4:	230f      	movs	r3, #15
 8007bd6:	401a      	ands	r2, r3
 8007bd8:	6879      	ldr	r1, [r7, #4]
 8007bda:	0013      	movs	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	189b      	adds	r3, r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	18cb      	adds	r3, r1, r3
 8007be4:	3326      	adds	r3, #38	; 0x26
 8007be6:	2210      	movs	r2, #16
 8007be8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007bea:	4b2d      	ldr	r3, [pc, #180]	; (8007ca0 <USBD_CDC_Init+0x21c>)
 8007bec:	7819      	ldrb	r1, [r3, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	2308      	movs	r3, #8
 8007bf2:	2203      	movs	r2, #3
 8007bf4:	f002 fcd7 	bl	800a5a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007bf8:	4b29      	ldr	r3, [pc, #164]	; (8007ca0 <USBD_CDC_Init+0x21c>)
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	001a      	movs	r2, r3
 8007bfe:	230f      	movs	r3, #15
 8007c00:	401a      	ands	r2, r3
 8007c02:	6879      	ldr	r1, [r7, #4]
 8007c04:	0013      	movs	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	189b      	adds	r3, r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	18cb      	adds	r3, r1, r3
 8007c0e:	3324      	adds	r3, #36	; 0x24
 8007c10:	2201      	movs	r2, #1
 8007c12:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	2381      	movs	r3, #129	; 0x81
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	50d1      	str	r1, [r2, r3]

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	23b5      	movs	r3, #181	; 0xb5
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	58d3      	ldr	r3, [r2, r3]
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	33b0      	adds	r3, #176	; 0xb0
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	18d3      	adds	r3, r2, r3
 8007c2e:	3304      	adds	r3, #4
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	2385      	movs	r3, #133	; 0x85
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	50d1      	str	r1, [r2, r3]
  hcdc->RxState = 0U;
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	2386      	movs	r3, #134	; 0x86
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	2100      	movs	r1, #0
 8007c48:	50d1      	str	r1, [r2, r3]

  if (hcdc->RxBuffer == NULL)
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	2381      	movs	r3, #129	; 0x81
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	58d3      	ldr	r3, [r2, r3]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <USBD_CDC_Init+0x1d6>
  {
    return (uint8_t)USBD_EMEM;
 8007c56:	2302      	movs	r3, #2
 8007c58:	e01a      	b.n	8007c90 <USBD_CDC_Init+0x20c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	7c1b      	ldrb	r3, [r3, #16]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10b      	bne.n	8007c7a <USBD_CDC_Init+0x1f6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c62:	4b0e      	ldr	r3, [pc, #56]	; (8007c9c <USBD_CDC_Init+0x218>)
 8007c64:	7819      	ldrb	r1, [r3, #0]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	2381      	movs	r3, #129	; 0x81
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	58d2      	ldr	r2, [r2, r3]
 8007c6e:	2380      	movs	r3, #128	; 0x80
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f002 fdda 	bl	800a82c <USBD_LL_PrepareReceive>
 8007c78:	e009      	b.n	8007c8e <USBD_CDC_Init+0x20a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c7a:	4b08      	ldr	r3, [pc, #32]	; (8007c9c <USBD_CDC_Init+0x218>)
 8007c7c:	7819      	ldrb	r1, [r3, #0]
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	2381      	movs	r3, #129	; 0x81
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	58d2      	ldr	r2, [r2, r3]
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	2340      	movs	r3, #64	; 0x40
 8007c8a:	f002 fdcf 	bl	800a82c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	0018      	movs	r0, r3
 8007c92:	46bd      	mov	sp, r7
 8007c94:	b004      	add	sp, #16
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	20000097 	.word	0x20000097
 8007c9c:	20000098 	.word	0x20000098
 8007ca0:	20000099 	.word	0x20000099

08007ca4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	000a      	movs	r2, r1
 8007cae:	1cfb      	adds	r3, r7, #3
 8007cb0:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007cb2:	4b41      	ldr	r3, [pc, #260]	; (8007db8 <USBD_CDC_DeInit+0x114>)
 8007cb4:	781a      	ldrb	r2, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	0011      	movs	r1, r2
 8007cba:	0018      	movs	r0, r3
 8007cbc:	f002 fcaa 	bl	800a614 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007cc0:	4b3d      	ldr	r3, [pc, #244]	; (8007db8 <USBD_CDC_DeInit+0x114>)
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	001a      	movs	r2, r3
 8007cc6:	230f      	movs	r3, #15
 8007cc8:	401a      	ands	r2, r3
 8007cca:	6879      	ldr	r1, [r7, #4]
 8007ccc:	0013      	movs	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	189b      	adds	r3, r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	18cb      	adds	r3, r1, r3
 8007cd6:	3324      	adds	r3, #36	; 0x24
 8007cd8:	2200      	movs	r2, #0
 8007cda:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007cdc:	4b37      	ldr	r3, [pc, #220]	; (8007dbc <USBD_CDC_DeInit+0x118>)
 8007cde:	781a      	ldrb	r2, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	0011      	movs	r1, r2
 8007ce4:	0018      	movs	r0, r3
 8007ce6:	f002 fc95 	bl	800a614 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007cea:	4b34      	ldr	r3, [pc, #208]	; (8007dbc <USBD_CDC_DeInit+0x118>)
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	001a      	movs	r2, r3
 8007cf0:	230f      	movs	r3, #15
 8007cf2:	401a      	ands	r2, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	23b2      	movs	r3, #178	; 0xb2
 8007cf8:	0059      	lsls	r1, r3, #1
 8007cfa:	0013      	movs	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	189b      	adds	r3, r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	18c3      	adds	r3, r0, r3
 8007d04:	185b      	adds	r3, r3, r1
 8007d06:	2200      	movs	r2, #0
 8007d08:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007d0a:	4b2d      	ldr	r3, [pc, #180]	; (8007dc0 <USBD_CDC_DeInit+0x11c>)
 8007d0c:	781a      	ldrb	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	0011      	movs	r1, r2
 8007d12:	0018      	movs	r0, r3
 8007d14:	f002 fc7e 	bl	800a614 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007d18:	4b29      	ldr	r3, [pc, #164]	; (8007dc0 <USBD_CDC_DeInit+0x11c>)
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	001a      	movs	r2, r3
 8007d1e:	230f      	movs	r3, #15
 8007d20:	401a      	ands	r2, r3
 8007d22:	6879      	ldr	r1, [r7, #4]
 8007d24:	0013      	movs	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	189b      	adds	r3, r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	18cb      	adds	r3, r1, r3
 8007d2e:	3324      	adds	r3, #36	; 0x24
 8007d30:	2200      	movs	r2, #0
 8007d32:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007d34:	4b22      	ldr	r3, [pc, #136]	; (8007dc0 <USBD_CDC_DeInit+0x11c>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	001a      	movs	r2, r3
 8007d3a:	230f      	movs	r3, #15
 8007d3c:	401a      	ands	r2, r3
 8007d3e:	6879      	ldr	r1, [r7, #4]
 8007d40:	0013      	movs	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	189b      	adds	r3, r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	18cb      	adds	r3, r1, r3
 8007d4a:	3326      	adds	r3, #38	; 0x26
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	23b5      	movs	r3, #181	; 0xb5
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	58d2      	ldr	r2, [r2, r3]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	32b0      	adds	r2, #176	; 0xb0
 8007d5c:	0092      	lsls	r2, r2, #2
 8007d5e:	58d3      	ldr	r3, [r2, r3]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d024      	beq.n	8007dae <USBD_CDC_DeInit+0x10a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	23b5      	movs	r3, #181	; 0xb5
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	58d3      	ldr	r3, [r2, r3]
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	33b0      	adds	r3, #176	; 0xb0
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	18d3      	adds	r3, r2, r3
 8007d74:	3304      	adds	r3, #4
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	23b5      	movs	r3, #181	; 0xb5
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	58d2      	ldr	r2, [r2, r3]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	32b0      	adds	r2, #176	; 0xb0
 8007d88:	0092      	lsls	r2, r2, #2
 8007d8a:	58d3      	ldr	r3, [r2, r3]
 8007d8c:	0018      	movs	r0, r3
 8007d8e:	f002 fdd9 	bl	800a944 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	23b5      	movs	r3, #181	; 0xb5
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	58d2      	ldr	r2, [r2, r3]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	32b0      	adds	r2, #176	; 0xb0
 8007d9e:	0092      	lsls	r2, r2, #2
 8007da0:	2100      	movs	r1, #0
 8007da2:	50d1      	str	r1, [r2, r3]
    pdev->pClassData = NULL;
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	23af      	movs	r3, #175	; 0xaf
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	2100      	movs	r1, #0
 8007dac:	50d1      	str	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	0018      	movs	r0, r3
 8007db2:	46bd      	mov	sp, r7
 8007db4:	b002      	add	sp, #8
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	20000097 	.word	0x20000097
 8007dbc:	20000098 	.word	0x20000098
 8007dc0:	20000099 	.word	0x20000099

08007dc4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	23b5      	movs	r3, #181	; 0xb5
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	58d2      	ldr	r2, [r2, r3]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	32b0      	adds	r2, #176	; 0xb0
 8007dda:	0092      	lsls	r2, r2, #2
 8007ddc:	58d3      	ldr	r3, [r2, r3]
 8007dde:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007de0:	230d      	movs	r3, #13
 8007de2:	18fb      	adds	r3, r7, r3
 8007de4:	2200      	movs	r2, #0
 8007de6:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8007de8:	230a      	movs	r3, #10
 8007dea:	18fb      	adds	r3, r7, r3
 8007dec:	2200      	movs	r2, #0
 8007dee:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007df0:	2317      	movs	r3, #23
 8007df2:	18fb      	adds	r3, r7, r3
 8007df4:	2200      	movs	r2, #0
 8007df6:	701a      	strb	r2, [r3, #0]

  if (hcdc == NULL)
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <USBD_CDC_Setup+0x3e>
  {
    return (uint8_t)USBD_FAIL;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e0d1      	b.n	8007fa6 <USBD_CDC_Setup+0x1e2>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	001a      	movs	r2, r3
 8007e08:	2360      	movs	r3, #96	; 0x60
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	d05b      	beq.n	8007ec6 <USBD_CDC_Setup+0x102>
 8007e0e:	2b20      	cmp	r3, #32
 8007e10:	d000      	beq.n	8007e14 <USBD_CDC_Setup+0x50>
 8007e12:	e0ba      	b.n	8007f8a <USBD_CDC_Setup+0x1c6>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	88db      	ldrh	r3, [r3, #6]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d043      	beq.n	8007ea4 <USBD_CDC_Setup+0xe0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	b25b      	sxtb	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	da22      	bge.n	8007e6c <USBD_CDC_Setup+0xa8>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	23b5      	movs	r3, #181	; 0xb5
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	58d3      	ldr	r3, [r2, r3]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	33b0      	adds	r3, #176	; 0xb0
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	18d3      	adds	r3, r2, r3
 8007e36:	3304      	adds	r3, #4
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007e40:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e42:	683a      	ldr	r2, [r7, #0]
 8007e44:	88d2      	ldrh	r2, [r2, #6]
 8007e46:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	88db      	ldrh	r3, [r3, #6]
 8007e4c:	220e      	movs	r2, #14
 8007e4e:	18ba      	adds	r2, r7, r2
 8007e50:	b299      	uxth	r1, r3
 8007e52:	2907      	cmp	r1, #7
 8007e54:	d900      	bls.n	8007e58 <USBD_CDC_Setup+0x94>
 8007e56:	2307      	movs	r3, #7
 8007e58:	8013      	strh	r3, [r2, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007e5a:	6939      	ldr	r1, [r7, #16]
 8007e5c:	230e      	movs	r3, #14
 8007e5e:	18fb      	adds	r3, r7, r3
 8007e60:	881a      	ldrh	r2, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	0018      	movs	r0, r3
 8007e66:	f001 ff8b 	bl	8009d80 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007e6a:	e099      	b.n	8007fa0 <USBD_CDC_Setup+0x1dc>
          hcdc->CmdOpCode = req->bRequest;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	7859      	ldrb	r1, [r3, #1]
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	2380      	movs	r3, #128	; 0x80
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	88db      	ldrh	r3, [r3, #6]
 8007e7c:	2b3f      	cmp	r3, #63	; 0x3f
 8007e7e:	d803      	bhi.n	8007e88 <USBD_CDC_Setup+0xc4>
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	88db      	ldrh	r3, [r3, #6]
 8007e84:	b2da      	uxtb	r2, r3
 8007e86:	e000      	b.n	8007e8a <USBD_CDC_Setup+0xc6>
 8007e88:	2240      	movs	r2, #64	; 0x40
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	4948      	ldr	r1, [pc, #288]	; (8007fb0 <USBD_CDC_Setup+0x1ec>)
 8007e8e:	545a      	strb	r2, [r3, r1]
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007e90:	6939      	ldr	r1, [r7, #16]
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	4a46      	ldr	r2, [pc, #280]	; (8007fb0 <USBD_CDC_Setup+0x1ec>)
 8007e96:	5c9b      	ldrb	r3, [r3, r2]
 8007e98:	001a      	movs	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	0018      	movs	r0, r3
 8007e9e:	f001 ff9c 	bl	8009dda <USBD_CtlPrepareRx>
      break;
 8007ea2:	e07d      	b.n	8007fa0 <USBD_CDC_Setup+0x1dc>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	23b5      	movs	r3, #181	; 0xb5
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	58d3      	ldr	r3, [r2, r3]
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	33b0      	adds	r3, #176	; 0xb0
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	18d3      	adds	r3, r2, r3
 8007eb4:	3304      	adds	r3, #4
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	683a      	ldr	r2, [r7, #0]
 8007ebc:	7850      	ldrb	r0, [r2, #1]
 8007ebe:	6839      	ldr	r1, [r7, #0]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	4798      	blx	r3
      break;
 8007ec4:	e06c      	b.n	8007fa0 <USBD_CDC_Setup+0x1dc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	785b      	ldrb	r3, [r3, #1]
 8007eca:	2b0b      	cmp	r3, #11
 8007ecc:	d03c      	beq.n	8007f48 <USBD_CDC_Setup+0x184>
 8007ece:	dc4d      	bgt.n	8007f6c <USBD_CDC_Setup+0x1a8>
 8007ed0:	2b0a      	cmp	r3, #10
 8007ed2:	d01f      	beq.n	8007f14 <USBD_CDC_Setup+0x150>
 8007ed4:	dc4a      	bgt.n	8007f6c <USBD_CDC_Setup+0x1a8>
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d002      	beq.n	8007ee0 <USBD_CDC_Setup+0x11c>
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d051      	beq.n	8007f82 <USBD_CDC_Setup+0x1be>
 8007ede:	e045      	b.n	8007f6c <USBD_CDC_Setup+0x1a8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	23a7      	movs	r3, #167	; 0xa7
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	5cd3      	ldrb	r3, [r2, r3]
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	2b03      	cmp	r3, #3
 8007eec:	d107      	bne.n	8007efe <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007eee:	230a      	movs	r3, #10
 8007ef0:	18f9      	adds	r1, r7, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2202      	movs	r2, #2
 8007ef6:	0018      	movs	r0, r3
 8007ef8:	f001 ff42 	bl	8009d80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007efc:	e044      	b.n	8007f88 <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	0011      	movs	r1, r2
 8007f04:	0018      	movs	r0, r3
 8007f06:	f001 feb3 	bl	8009c70 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f0a:	2317      	movs	r3, #23
 8007f0c:	18fb      	adds	r3, r7, r3
 8007f0e:	2203      	movs	r2, #3
 8007f10:	701a      	strb	r2, [r3, #0]
          break;
 8007f12:	e039      	b.n	8007f88 <USBD_CDC_Setup+0x1c4>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	23a7      	movs	r3, #167	; 0xa7
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	5cd3      	ldrb	r3, [r2, r3]
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d107      	bne.n	8007f32 <USBD_CDC_Setup+0x16e>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f22:	230d      	movs	r3, #13
 8007f24:	18f9      	adds	r1, r7, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	0018      	movs	r0, r3
 8007f2c:	f001 ff28 	bl	8009d80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f30:	e02a      	b.n	8007f88 <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	0011      	movs	r1, r2
 8007f38:	0018      	movs	r0, r3
 8007f3a:	f001 fe99 	bl	8009c70 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f3e:	2317      	movs	r3, #23
 8007f40:	18fb      	adds	r3, r7, r3
 8007f42:	2203      	movs	r2, #3
 8007f44:	701a      	strb	r2, [r3, #0]
          break;
 8007f46:	e01f      	b.n	8007f88 <USBD_CDC_Setup+0x1c4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	23a7      	movs	r3, #167	; 0xa7
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	5cd3      	ldrb	r3, [r2, r3]
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	d017      	beq.n	8007f86 <USBD_CDC_Setup+0x1c2>
          {
            USBD_CtlError(pdev, req);
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	0011      	movs	r1, r2
 8007f5c:	0018      	movs	r0, r3
 8007f5e:	f001 fe87 	bl	8009c70 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f62:	2317      	movs	r3, #23
 8007f64:	18fb      	adds	r3, r7, r3
 8007f66:	2203      	movs	r2, #3
 8007f68:	701a      	strb	r2, [r3, #0]
          }
          break;
 8007f6a:	e00c      	b.n	8007f86 <USBD_CDC_Setup+0x1c2>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007f6c:	683a      	ldr	r2, [r7, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	0011      	movs	r1, r2
 8007f72:	0018      	movs	r0, r3
 8007f74:	f001 fe7c 	bl	8009c70 <USBD_CtlError>
          ret = USBD_FAIL;
 8007f78:	2317      	movs	r3, #23
 8007f7a:	18fb      	adds	r3, r7, r3
 8007f7c:	2203      	movs	r2, #3
 8007f7e:	701a      	strb	r2, [r3, #0]
          break;
 8007f80:	e002      	b.n	8007f88 <USBD_CDC_Setup+0x1c4>
          break;
 8007f82:	46c0      	nop			; (mov r8, r8)
 8007f84:	e00c      	b.n	8007fa0 <USBD_CDC_Setup+0x1dc>
          break;
 8007f86:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007f88:	e00a      	b.n	8007fa0 <USBD_CDC_Setup+0x1dc>

    default:
      USBD_CtlError(pdev, req);
 8007f8a:	683a      	ldr	r2, [r7, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	0011      	movs	r1, r2
 8007f90:	0018      	movs	r0, r3
 8007f92:	f001 fe6d 	bl	8009c70 <USBD_CtlError>
      ret = USBD_FAIL;
 8007f96:	2317      	movs	r3, #23
 8007f98:	18fb      	adds	r3, r7, r3
 8007f9a:	2203      	movs	r2, #3
 8007f9c:	701a      	strb	r2, [r3, #0]
      break;
 8007f9e:	46c0      	nop			; (mov r8, r8)
  }

  return (uint8_t)ret;
 8007fa0:	2317      	movs	r3, #23
 8007fa2:	18fb      	adds	r3, r7, r3
 8007fa4:	781b      	ldrb	r3, [r3, #0]
}
 8007fa6:	0018      	movs	r0, r3
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	b006      	add	sp, #24
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	46c0      	nop			; (mov r8, r8)
 8007fb0:	00000201 	.word	0x00000201

08007fb4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fb4:	b590      	push	{r4, r7, lr}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	000a      	movs	r2, r1
 8007fbe:	1cfb      	adds	r3, r7, #3
 8007fc0:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	23b2      	movs	r3, #178	; 0xb2
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	58d3      	ldr	r3, [r2, r3]
 8007fca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	23b5      	movs	r3, #181	; 0xb5
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	58d2      	ldr	r2, [r2, r3]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	32b0      	adds	r2, #176	; 0xb0
 8007fd8:	0092      	lsls	r2, r2, #2
 8007fda:	58d3      	ldr	r3, [r2, r3]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d101      	bne.n	8007fe4 <USBD_CDC_DataIn+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e072      	b.n	80080ca <USBD_CDC_DataIn+0x116>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	23b5      	movs	r3, #181	; 0xb5
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	58d2      	ldr	r2, [r2, r3]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	32b0      	adds	r2, #176	; 0xb0
 8007ff0:	0092      	lsls	r2, r2, #2
 8007ff2:	58d3      	ldr	r3, [r2, r3]
 8007ff4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007ff6:	1cfb      	adds	r3, r7, #3
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	220f      	movs	r2, #15
 8007ffc:	401a      	ands	r2, r3
 8007ffe:	6879      	ldr	r1, [r7, #4]
 8008000:	0013      	movs	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	189b      	adds	r3, r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	18cb      	adds	r3, r1, r3
 800800a:	3318      	adds	r3, #24
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d031      	beq.n	8008076 <USBD_CDC_DataIn+0xc2>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008012:	1cfb      	adds	r3, r7, #3
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	220f      	movs	r2, #15
 8008018:	401a      	ands	r2, r3
 800801a:	6879      	ldr	r1, [r7, #4]
 800801c:	0013      	movs	r3, r2
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	189b      	adds	r3, r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	18cb      	adds	r3, r1, r3
 8008026:	3318      	adds	r3, #24
 8008028:	6818      	ldr	r0, [r3, #0]
 800802a:	1cfb      	adds	r3, r7, #3
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	220f      	movs	r2, #15
 8008030:	401a      	ands	r2, r3
 8008032:	68f9      	ldr	r1, [r7, #12]
 8008034:	0013      	movs	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	189b      	adds	r3, r3, r2
 800803a:	00db      	lsls	r3, r3, #3
 800803c:	18cb      	adds	r3, r1, r3
 800803e:	3324      	adds	r3, #36	; 0x24
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	0019      	movs	r1, r3
 8008044:	f7f8 f8ea 	bl	800021c <__aeabi_uidivmod>
 8008048:	1e0b      	subs	r3, r1, #0
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800804a:	d114      	bne.n	8008076 <USBD_CDC_DataIn+0xc2>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800804c:	1cfb      	adds	r3, r7, #3
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	220f      	movs	r2, #15
 8008052:	401a      	ands	r2, r3
 8008054:	6879      	ldr	r1, [r7, #4]
 8008056:	0013      	movs	r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	189b      	adds	r3, r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	18cb      	adds	r3, r1, r3
 8008060:	3318      	adds	r3, #24
 8008062:	2200      	movs	r2, #0
 8008064:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008066:	1cfb      	adds	r3, r7, #3
 8008068:	7819      	ldrb	r1, [r3, #0]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	2300      	movs	r3, #0
 800806e:	2200      	movs	r2, #0
 8008070:	f002 fbac 	bl	800a7cc <USBD_LL_Transmit>
 8008074:	e028      	b.n	80080c8 <USBD_CDC_DataIn+0x114>
  }
  else
  {
    hcdc->TxState = 0U;
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	2385      	movs	r3, #133	; 0x85
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	2100      	movs	r1, #0
 800807e:	50d1      	str	r1, [r2, r3]

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	23b5      	movs	r3, #181	; 0xb5
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	58d3      	ldr	r3, [r2, r3]
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	33b0      	adds	r3, #176	; 0xb0
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	18d3      	adds	r3, r2, r3
 8008090:	3304      	adds	r3, #4
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d016      	beq.n	80080c8 <USBD_CDC_DataIn+0x114>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	23b5      	movs	r3, #181	; 0xb5
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	58d3      	ldr	r3, [r2, r3]
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	33b0      	adds	r3, #176	; 0xb0
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	18d3      	adds	r3, r2, r3
 80080aa:	3304      	adds	r3, #4
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	691c      	ldr	r4, [r3, #16]
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	2382      	movs	r3, #130	; 0x82
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	58d0      	ldr	r0, [r2, r3]
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	2284      	movs	r2, #132	; 0x84
 80080bc:	0092      	lsls	r2, r2, #2
 80080be:	1899      	adds	r1, r3, r2
 80080c0:	1cfb      	adds	r3, r7, #3
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	001a      	movs	r2, r3
 80080c6:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	0018      	movs	r0, r3
 80080cc:	46bd      	mov	sp, r7
 80080ce:	b005      	add	sp, #20
 80080d0:	bd90      	pop	{r4, r7, pc}

080080d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b084      	sub	sp, #16
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
 80080da:	000a      	movs	r2, r1
 80080dc:	1cfb      	adds	r3, r7, #3
 80080de:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	23b5      	movs	r3, #181	; 0xb5
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	58d2      	ldr	r2, [r2, r3]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	32b0      	adds	r2, #176	; 0xb0
 80080ec:	0092      	lsls	r2, r2, #2
 80080ee:	58d3      	ldr	r3, [r2, r3]
 80080f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	23b5      	movs	r3, #181	; 0xb5
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	58d2      	ldr	r2, [r2, r3]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	32b0      	adds	r2, #176	; 0xb0
 80080fe:	0092      	lsls	r2, r2, #2
 8008100:	58d3      	ldr	r3, [r2, r3]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <USBD_CDC_DataOut+0x38>
  {
    return (uint8_t)USBD_FAIL;
 8008106:	2303      	movs	r3, #3
 8008108:	e022      	b.n	8008150 <USBD_CDC_DataOut+0x7e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800810a:	1cfb      	adds	r3, r7, #3
 800810c:	781a      	ldrb	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	0011      	movs	r1, r2
 8008112:	0018      	movs	r0, r3
 8008114:	f002 fbba 	bl	800a88c <USBD_LL_GetRxDataSize>
 8008118:	0001      	movs	r1, r0
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	2383      	movs	r3, #131	; 0x83
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	23b5      	movs	r3, #181	; 0xb5
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	58d3      	ldr	r3, [r2, r3]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	33b0      	adds	r3, #176	; 0xb0
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	18d3      	adds	r3, r2, r3
 8008132:	3304      	adds	r3, #4
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68da      	ldr	r2, [r3, #12]
 8008138:	68f9      	ldr	r1, [r7, #12]
 800813a:	2381      	movs	r3, #129	; 0x81
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	58c8      	ldr	r0, [r1, r3]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2183      	movs	r1, #131	; 0x83
 8008144:	0089      	lsls	r1, r1, #2
 8008146:	468c      	mov	ip, r1
 8008148:	4463      	add	r3, ip
 800814a:	0019      	movs	r1, r3
 800814c:	4790      	blx	r2

  return (uint8_t)USBD_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	0018      	movs	r0, r3
 8008152:	46bd      	mov	sp, r7
 8008154:	b004      	add	sp, #16
 8008156:	bd80      	pop	{r7, pc}

08008158 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008158:	b590      	push	{r4, r7, lr}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	23b5      	movs	r3, #181	; 0xb5
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	58d2      	ldr	r2, [r2, r3]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	32b0      	adds	r2, #176	; 0xb0
 800816c:	0092      	lsls	r2, r2, #2
 800816e:	58d3      	ldr	r3, [r2, r3]
 8008170:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d101      	bne.n	800817c <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008178:	2303      	movs	r3, #3
 800817a:	e02c      	b.n	80081d6 <USBD_CDC_EP0_RxReady+0x7e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	23b5      	movs	r3, #181	; 0xb5
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	58d3      	ldr	r3, [r2, r3]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	33b0      	adds	r3, #176	; 0xb0
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	18d3      	adds	r3, r2, r3
 800818c:	3304      	adds	r3, #4
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d01f      	beq.n	80081d4 <USBD_CDC_EP0_RxReady+0x7c>
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	2380      	movs	r3, #128	; 0x80
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	5cd3      	ldrb	r3, [r2, r3]
 800819c:	2bff      	cmp	r3, #255	; 0xff
 800819e:	d019      	beq.n	80081d4 <USBD_CDC_EP0_RxReady+0x7c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	23b5      	movs	r3, #181	; 0xb5
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	58d3      	ldr	r3, [r2, r3]
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	33b0      	adds	r3, #176	; 0xb0
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	18d3      	adds	r3, r2, r3
 80081b0:	3304      	adds	r3, #4
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	68f9      	ldr	r1, [r7, #12]
 80081b8:	2280      	movs	r2, #128	; 0x80
 80081ba:	0092      	lsls	r2, r2, #2
 80081bc:	5c88      	ldrb	r0, [r1, r2]
                                                                     (uint8_t *)hcdc->data,
 80081be:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	4c07      	ldr	r4, [pc, #28]	; (80081e0 <USBD_CDC_EP0_RxReady+0x88>)
 80081c4:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80081c6:	b292      	uxth	r2, r2
 80081c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	2380      	movs	r3, #128	; 0x80
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	21ff      	movs	r1, #255	; 0xff
 80081d2:	54d1      	strb	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	0018      	movs	r0, r3
 80081d8:	46bd      	mov	sp, r7
 80081da:	b005      	add	sp, #20
 80081dc:	bd90      	pop	{r4, r7, pc}
 80081de:	46c0      	nop			; (mov r8, r8)
 80081e0:	00000201 	.word	0x00000201

080081e4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80081ec:	4b20      	ldr	r3, [pc, #128]	; (8008270 <USBD_CDC_GetFSCfgDesc+0x8c>)
 80081ee:	2182      	movs	r1, #130	; 0x82
 80081f0:	0018      	movs	r0, r3
 80081f2:	f000 fd9c 	bl	8008d2e <USBD_GetEpDesc>
 80081f6:	0003      	movs	r3, r0
 80081f8:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80081fa:	4b1d      	ldr	r3, [pc, #116]	; (8008270 <USBD_CDC_GetFSCfgDesc+0x8c>)
 80081fc:	2101      	movs	r1, #1
 80081fe:	0018      	movs	r0, r3
 8008200:	f000 fd95 	bl	8008d2e <USBD_GetEpDesc>
 8008204:	0003      	movs	r3, r0
 8008206:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008208:	4b19      	ldr	r3, [pc, #100]	; (8008270 <USBD_CDC_GetFSCfgDesc+0x8c>)
 800820a:	2181      	movs	r1, #129	; 0x81
 800820c:	0018      	movs	r0, r3
 800820e:	f000 fd8e 	bl	8008d2e <USBD_GetEpDesc>
 8008212:	0003      	movs	r3, r0
 8008214:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d002      	beq.n	8008222 <USBD_CDC_GetFSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	2210      	movs	r2, #16
 8008220:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00b      	beq.n	8008240 <USBD_CDC_GetFSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	791a      	ldrb	r2, [r3, #4]
 800822c:	2100      	movs	r1, #0
 800822e:	400a      	ands	r2, r1
 8008230:	1c11      	adds	r1, r2, #0
 8008232:	2240      	movs	r2, #64	; 0x40
 8008234:	430a      	orrs	r2, r1
 8008236:	711a      	strb	r2, [r3, #4]
 8008238:	795a      	ldrb	r2, [r3, #5]
 800823a:	2100      	movs	r1, #0
 800823c:	400a      	ands	r2, r1
 800823e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00b      	beq.n	800825e <USBD_CDC_GetFSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	791a      	ldrb	r2, [r3, #4]
 800824a:	2100      	movs	r1, #0
 800824c:	400a      	ands	r2, r1
 800824e:	1c11      	adds	r1, r2, #0
 8008250:	2240      	movs	r2, #64	; 0x40
 8008252:	430a      	orrs	r2, r1
 8008254:	711a      	strb	r2, [r3, #4]
 8008256:	795a      	ldrb	r2, [r3, #5]
 8008258:	2100      	movs	r1, #0
 800825a:	400a      	ands	r2, r1
 800825c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2243      	movs	r2, #67	; 0x43
 8008262:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008264:	4b02      	ldr	r3, [pc, #8]	; (8008270 <USBD_CDC_GetFSCfgDesc+0x8c>)
}
 8008266:	0018      	movs	r0, r3
 8008268:	46bd      	mov	sp, r7
 800826a:	b006      	add	sp, #24
 800826c:	bd80      	pop	{r7, pc}
 800826e:	46c0      	nop			; (mov r8, r8)
 8008270:	20000054 	.word	0x20000054

08008274 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b086      	sub	sp, #24
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800827c:	4b20      	ldr	r3, [pc, #128]	; (8008300 <USBD_CDC_GetHSCfgDesc+0x8c>)
 800827e:	2182      	movs	r1, #130	; 0x82
 8008280:	0018      	movs	r0, r3
 8008282:	f000 fd54 	bl	8008d2e <USBD_GetEpDesc>
 8008286:	0003      	movs	r3, r0
 8008288:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800828a:	4b1d      	ldr	r3, [pc, #116]	; (8008300 <USBD_CDC_GetHSCfgDesc+0x8c>)
 800828c:	2101      	movs	r1, #1
 800828e:	0018      	movs	r0, r3
 8008290:	f000 fd4d 	bl	8008d2e <USBD_GetEpDesc>
 8008294:	0003      	movs	r3, r0
 8008296:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008298:	4b19      	ldr	r3, [pc, #100]	; (8008300 <USBD_CDC_GetHSCfgDesc+0x8c>)
 800829a:	2181      	movs	r1, #129	; 0x81
 800829c:	0018      	movs	r0, r3
 800829e:	f000 fd46 	bl	8008d2e <USBD_GetEpDesc>
 80082a2:	0003      	movs	r3, r0
 80082a4:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d002      	beq.n	80082b2 <USBD_CDC_GetHSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	2210      	movs	r2, #16
 80082b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00b      	beq.n	80082d0 <USBD_CDC_GetHSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	791a      	ldrb	r2, [r3, #4]
 80082bc:	2100      	movs	r1, #0
 80082be:	400a      	ands	r2, r1
 80082c0:	711a      	strb	r2, [r3, #4]
 80082c2:	795a      	ldrb	r2, [r3, #5]
 80082c4:	2100      	movs	r1, #0
 80082c6:	400a      	ands	r2, r1
 80082c8:	1c11      	adds	r1, r2, #0
 80082ca:	2202      	movs	r2, #2
 80082cc:	430a      	orrs	r2, r1
 80082ce:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00b      	beq.n	80082ee <USBD_CDC_GetHSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	791a      	ldrb	r2, [r3, #4]
 80082da:	2100      	movs	r1, #0
 80082dc:	400a      	ands	r2, r1
 80082de:	711a      	strb	r2, [r3, #4]
 80082e0:	795a      	ldrb	r2, [r3, #5]
 80082e2:	2100      	movs	r1, #0
 80082e4:	400a      	ands	r2, r1
 80082e6:	1c11      	adds	r1, r2, #0
 80082e8:	2202      	movs	r2, #2
 80082ea:	430a      	orrs	r2, r1
 80082ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2243      	movs	r2, #67	; 0x43
 80082f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80082f4:	4b02      	ldr	r3, [pc, #8]	; (8008300 <USBD_CDC_GetHSCfgDesc+0x8c>)
}
 80082f6:	0018      	movs	r0, r3
 80082f8:	46bd      	mov	sp, r7
 80082fa:	b006      	add	sp, #24
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	46c0      	nop			; (mov r8, r8)
 8008300:	20000054 	.word	0x20000054

08008304 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800830c:	4b20      	ldr	r3, [pc, #128]	; (8008390 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 800830e:	2182      	movs	r1, #130	; 0x82
 8008310:	0018      	movs	r0, r3
 8008312:	f000 fd0c 	bl	8008d2e <USBD_GetEpDesc>
 8008316:	0003      	movs	r3, r0
 8008318:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800831a:	4b1d      	ldr	r3, [pc, #116]	; (8008390 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 800831c:	2101      	movs	r1, #1
 800831e:	0018      	movs	r0, r3
 8008320:	f000 fd05 	bl	8008d2e <USBD_GetEpDesc>
 8008324:	0003      	movs	r3, r0
 8008326:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008328:	4b19      	ldr	r3, [pc, #100]	; (8008390 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 800832a:	2181      	movs	r1, #129	; 0x81
 800832c:	0018      	movs	r0, r3
 800832e:	f000 fcfe 	bl	8008d2e <USBD_GetEpDesc>
 8008332:	0003      	movs	r3, r0
 8008334:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <USBD_CDC_GetOtherSpeedCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	2210      	movs	r2, #16
 8008340:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00b      	beq.n	8008360 <USBD_CDC_GetOtherSpeedCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	791a      	ldrb	r2, [r3, #4]
 800834c:	2100      	movs	r1, #0
 800834e:	400a      	ands	r2, r1
 8008350:	1c11      	adds	r1, r2, #0
 8008352:	2240      	movs	r2, #64	; 0x40
 8008354:	430a      	orrs	r2, r1
 8008356:	711a      	strb	r2, [r3, #4]
 8008358:	795a      	ldrb	r2, [r3, #5]
 800835a:	2100      	movs	r1, #0
 800835c:	400a      	ands	r2, r1
 800835e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00b      	beq.n	800837e <USBD_CDC_GetOtherSpeedCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	791a      	ldrb	r2, [r3, #4]
 800836a:	2100      	movs	r1, #0
 800836c:	400a      	ands	r2, r1
 800836e:	1c11      	adds	r1, r2, #0
 8008370:	2240      	movs	r2, #64	; 0x40
 8008372:	430a      	orrs	r2, r1
 8008374:	711a      	strb	r2, [r3, #4]
 8008376:	795a      	ldrb	r2, [r3, #5]
 8008378:	2100      	movs	r1, #0
 800837a:	400a      	ands	r2, r1
 800837c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2243      	movs	r2, #67	; 0x43
 8008382:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008384:	4b02      	ldr	r3, [pc, #8]	; (8008390 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
}
 8008386:	0018      	movs	r0, r3
 8008388:	46bd      	mov	sp, r7
 800838a:	b006      	add	sp, #24
 800838c:	bd80      	pop	{r7, pc}
 800838e:	46c0      	nop			; (mov r8, r8)
 8008390:	20000054 	.word	0x20000054

08008394 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	220a      	movs	r2, #10
 80083a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80083a2:	4b02      	ldr	r3, [pc, #8]	; (80083ac <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 80083a4:	0018      	movs	r0, r3
 80083a6:	46bd      	mov	sp, r7
 80083a8:	b002      	add	sp, #8
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	20000010 	.word	0x20000010

080083b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80083c0:	2303      	movs	r3, #3
 80083c2:	e00b      	b.n	80083dc <USBD_CDC_RegisterInterface+0x2c>
  }

  pdev->pUserData[pdev->classId] = fops;
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	23b5      	movs	r3, #181	; 0xb5
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	58d3      	ldr	r3, [r2, r3]
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	33b0      	adds	r3, #176	; 0xb0
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	18d3      	adds	r3, r2, r3
 80083d4:	3304      	adds	r3, #4
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	601a      	str	r2, [r3, #0]

  return (uint8_t)USBD_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	0018      	movs	r0, r3
 80083de:	46bd      	mov	sp, r7
 80083e0:	b002      	add	sp, #8
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	23b5      	movs	r3, #181	; 0xb5
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	58d2      	ldr	r2, [r2, r3]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	32b0      	adds	r2, #176	; 0xb0
 80083fc:	0092      	lsls	r2, r2, #2
 80083fe:	58d3      	ldr	r3, [r2, r3]
 8008400:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <USBD_CDC_SetTxBuffer+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008408:	2303      	movs	r3, #3
 800840a:	e00a      	b.n	8008422 <USBD_CDC_SetTxBuffer+0x3e>
  }

  hcdc->TxBuffer = pbuff;
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	2382      	movs	r3, #130	; 0x82
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	68b9      	ldr	r1, [r7, #8]
 8008414:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	2384      	movs	r3, #132	; 0x84
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	6879      	ldr	r1, [r7, #4]
 800841e:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	0018      	movs	r0, r3
 8008424:	46bd      	mov	sp, r7
 8008426:	b006      	add	sp, #24
 8008428:	bd80      	pop	{r7, pc}

0800842a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b084      	sub	sp, #16
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	23b5      	movs	r3, #181	; 0xb5
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	58d2      	ldr	r2, [r2, r3]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	32b0      	adds	r2, #176	; 0xb0
 8008440:	0092      	lsls	r2, r2, #2
 8008442:	58d3      	ldr	r3, [r2, r3]
 8008444:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d101      	bne.n	8008450 <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800844c:	2303      	movs	r3, #3
 800844e:	e005      	b.n	800845c <USBD_CDC_SetRxBuffer+0x32>
  }

  hcdc->RxBuffer = pbuff;
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	2381      	movs	r3, #129	; 0x81
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	0018      	movs	r0, r3
 800845e:	46bd      	mov	sp, r7
 8008460:	b004      	add	sp, #16
 8008462:	bd80      	pop	{r7, pc}

08008464 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008464:	b590      	push	{r4, r7, lr}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	23b5      	movs	r3, #181	; 0xb5
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	58d2      	ldr	r2, [r2, r3]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	32b0      	adds	r2, #176	; 0xb0
 8008478:	0092      	lsls	r2, r2, #2
 800847a:	58d3      	ldr	r3, [r2, r3]
 800847c:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800847e:	230f      	movs	r3, #15
 8008480:	18fb      	adds	r3, r7, r3
 8008482:	2201      	movs	r2, #1
 8008484:	701a      	strb	r2, [r3, #0]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d101      	bne.n	8008490 <USBD_CDC_TransmitPacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800848c:	2303      	movs	r3, #3
 800848e:	e030      	b.n	80084f2 <USBD_CDC_TransmitPacket+0x8e>
  }

  if (hcdc->TxState == 0U)
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	2385      	movs	r3, #133	; 0x85
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	58d3      	ldr	r3, [r2, r3]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d127      	bne.n	80084ec <USBD_CDC_TransmitPacket+0x88>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	2385      	movs	r3, #133	; 0x85
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	2101      	movs	r1, #1
 80084a4:	50d1      	str	r1, [r2, r3]

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80084a6:	4b15      	ldr	r3, [pc, #84]	; (80084fc <USBD_CDC_TransmitPacket+0x98>)
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	001a      	movs	r2, r3
 80084ac:	230f      	movs	r3, #15
 80084ae:	401a      	ands	r2, r3
 80084b0:	68b9      	ldr	r1, [r7, #8]
 80084b2:	2384      	movs	r3, #132	; 0x84
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	58c9      	ldr	r1, [r1, r3]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	0013      	movs	r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	189b      	adds	r3, r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	18c3      	adds	r3, r0, r3
 80084c4:	3318      	adds	r3, #24
 80084c6:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80084c8:	4b0c      	ldr	r3, [pc, #48]	; (80084fc <USBD_CDC_TransmitPacket+0x98>)
 80084ca:	7819      	ldrb	r1, [r3, #0]
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	2382      	movs	r3, #130	; 0x82
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	58d4      	ldr	r4, [r2, r3]
 80084d4:	68ba      	ldr	r2, [r7, #8]
 80084d6:	2384      	movs	r3, #132	; 0x84
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	58d3      	ldr	r3, [r2, r3]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	0022      	movs	r2, r4
 80084e0:	f002 f974 	bl	800a7cc <USBD_LL_Transmit>

    ret = USBD_OK;
 80084e4:	230f      	movs	r3, #15
 80084e6:	18fb      	adds	r3, r7, r3
 80084e8:	2200      	movs	r2, #0
 80084ea:	701a      	strb	r2, [r3, #0]
  }

  return (uint8_t)ret;
 80084ec:	230f      	movs	r3, #15
 80084ee:	18fb      	adds	r3, r7, r3
 80084f0:	781b      	ldrb	r3, [r3, #0]
}
 80084f2:	0018      	movs	r0, r3
 80084f4:	46bd      	mov	sp, r7
 80084f6:	b005      	add	sp, #20
 80084f8:	bd90      	pop	{r4, r7, pc}
 80084fa:	46c0      	nop			; (mov r8, r8)
 80084fc:	20000097 	.word	0x20000097

08008500 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	23b5      	movs	r3, #181	; 0xb5
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	58d2      	ldr	r2, [r2, r3]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	32b0      	adds	r2, #176	; 0xb0
 8008514:	0092      	lsls	r2, r2, #2
 8008516:	58d3      	ldr	r3, [r2, r3]
 8008518:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	23b5      	movs	r3, #181	; 0xb5
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	58d2      	ldr	r2, [r2, r3]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	32b0      	adds	r2, #176	; 0xb0
 8008526:	0092      	lsls	r2, r2, #2
 8008528:	58d3      	ldr	r3, [r2, r3]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d101      	bne.n	8008532 <USBD_CDC_ReceivePacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800852e:	2303      	movs	r3, #3
 8008530:	e01a      	b.n	8008568 <USBD_CDC_ReceivePacket+0x68>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	7c1b      	ldrb	r3, [r3, #16]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d10b      	bne.n	8008552 <USBD_CDC_ReceivePacket+0x52>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800853a:	4b0d      	ldr	r3, [pc, #52]	; (8008570 <USBD_CDC_ReceivePacket+0x70>)
 800853c:	7819      	ldrb	r1, [r3, #0]
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	2381      	movs	r3, #129	; 0x81
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	58d2      	ldr	r2, [r2, r3]
 8008546:	2380      	movs	r3, #128	; 0x80
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f002 f96e 	bl	800a82c <USBD_LL_PrepareReceive>
 8008550:	e009      	b.n	8008566 <USBD_CDC_ReceivePacket+0x66>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008552:	4b07      	ldr	r3, [pc, #28]	; (8008570 <USBD_CDC_ReceivePacket+0x70>)
 8008554:	7819      	ldrb	r1, [r3, #0]
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	2381      	movs	r3, #129	; 0x81
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	58d2      	ldr	r2, [r2, r3]
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	2340      	movs	r3, #64	; 0x40
 8008562:	f002 f963 	bl	800a82c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	0018      	movs	r0, r3
 800856a:	46bd      	mov	sp, r7
 800856c:	b004      	add	sp, #16
 800856e:	bd80      	pop	{r7, pc}
 8008570:	20000098 	.word	0x20000098

08008574 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008574:	b5b0      	push	{r4, r5, r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	1dfb      	adds	r3, r7, #7
 8008580:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d101      	bne.n	800858c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008588:	2303      	movs	r3, #3
 800858a:	e029      	b.n	80085e0 <USBD_Init+0x6c>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	23ae      	movs	r3, #174	; 0xae
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	2100      	movs	r1, #0
 8008594:	50d1      	str	r1, [r2, r3]
  pdev->pUserData[0] = NULL;
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	23b1      	movs	r3, #177	; 0xb1
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	2100      	movs	r1, #0
 800859e:	50d1      	str	r1, [r2, r3]
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	23b4      	movs	r3, #180	; 0xb4
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	2100      	movs	r1, #0
 80085a8:	50d1      	str	r1, [r2, r3]

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d004      	beq.n	80085ba <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	23ad      	movs	r3, #173	; 0xad
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	68b9      	ldr	r1, [r7, #8]
 80085b8:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	23a7      	movs	r3, #167	; 0xa7
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	2101      	movs	r1, #1
 80085c2:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	1dfa      	adds	r2, r7, #7
 80085c8:	7812      	ldrb	r2, [r2, #0]
 80085ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80085cc:	2517      	movs	r5, #23
 80085ce:	197c      	adds	r4, r7, r5
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	0018      	movs	r0, r3
 80085d4:	f001 ff50 	bl	800a478 <USBD_LL_Init>
 80085d8:	0003      	movs	r3, r0
 80085da:	7023      	strb	r3, [r4, #0]

  return ret;
 80085dc:	197b      	adds	r3, r7, r5
 80085de:	781b      	ldrb	r3, [r3, #0]
}
 80085e0:	0018      	movs	r0, r3
 80085e2:	46bd      	mov	sp, r7
 80085e4:	b006      	add	sp, #24
 80085e6:	bdb0      	pop	{r4, r5, r7, pc}

080085e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80085f2:	230e      	movs	r3, #14
 80085f4:	18fb      	adds	r3, r7, r3
 80085f6:	2200      	movs	r2, #0
 80085f8:	801a      	strh	r2, [r3, #0]

  if (pclass == NULL)
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d101      	bne.n	8008604 <USBD_RegisterClass+0x1c>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008600:	2303      	movs	r3, #3
 8008602:	e02b      	b.n	800865c <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	23ae      	movs	r3, #174	; 0xae
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	50d1      	str	r1, [r2, r3]
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	23b5      	movs	r3, #181	; 0xb5
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	58d2      	ldr	r2, [r2, r3]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	32ae      	adds	r2, #174	; 0xae
 800861a:	0092      	lsls	r2, r2, #2
 800861c:	58d3      	ldr	r3, [r2, r3]
 800861e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008620:	2b00      	cmp	r3, #0
 8008622:	d011      	beq.n	8008648 <USBD_RegisterClass+0x60>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	23b5      	movs	r3, #181	; 0xb5
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	58d2      	ldr	r2, [r2, r3]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	32ae      	adds	r2, #174	; 0xae
 8008630:	0092      	lsls	r2, r2, #2
 8008632:	58d3      	ldr	r3, [r2, r3]
 8008634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008636:	220e      	movs	r2, #14
 8008638:	18ba      	adds	r2, r7, r2
 800863a:	0010      	movs	r0, r2
 800863c:	4798      	blx	r3
 800863e:	0001      	movs	r1, r0
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	23b4      	movs	r3, #180	; 0xb4
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	50d1      	str	r1, [r2, r3]
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	23b6      	movs	r3, #182	; 0xb6
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	58d3      	ldr	r3, [r2, r3]
 8008650:	1c59      	adds	r1, r3, #1
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	23b6      	movs	r3, #182	; 0xb6
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	0018      	movs	r0, r3
 800865e:	46bd      	mov	sp, r7
 8008660:	b004      	add	sp, #16
 8008662:	bd80      	pop	{r7, pc}

08008664 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	0018      	movs	r0, r3
 8008670:	f001 ff74 	bl	800a55c <USBD_LL_Start>
 8008674:	0003      	movs	r3, r0
}
 8008676:	0018      	movs	r0, r3
 8008678:	46bd      	mov	sp, r7
 800867a:	b002      	add	sp, #8
 800867c:	bd80      	pop	{r7, pc}

0800867e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b082      	sub	sp, #8
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008686:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008688:	0018      	movs	r0, r3
 800868a:	46bd      	mov	sp, r7
 800868c:	b002      	add	sp, #8
 800868e:	bd80      	pop	{r7, pc}

08008690 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008690:	b590      	push	{r4, r7, lr}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	000a      	movs	r2, r1
 800869a:	1cfb      	adds	r3, r7, #3
 800869c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800869e:	210f      	movs	r1, #15
 80086a0:	187b      	adds	r3, r7, r1
 80086a2:	2200      	movs	r2, #0
 80086a4:	701a      	strb	r2, [r3, #0]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	23ae      	movs	r3, #174	; 0xae
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	58d3      	ldr	r3, [r2, r3]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00c      	beq.n	80086cc <USBD_SetClassConfig+0x3c>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	23ae      	movs	r3, #174	; 0xae
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	58d3      	ldr	r3, [r2, r3]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	187c      	adds	r4, r7, r1
 80086be:	1cfa      	adds	r2, r7, #3
 80086c0:	7811      	ldrb	r1, [r2, #0]
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	0010      	movs	r0, r2
 80086c6:	4798      	blx	r3
 80086c8:	0003      	movs	r3, r0
 80086ca:	7023      	strb	r3, [r4, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80086cc:	230f      	movs	r3, #15
 80086ce:	18fb      	adds	r3, r7, r3
 80086d0:	781b      	ldrb	r3, [r3, #0]
}
 80086d2:	0018      	movs	r0, r3
 80086d4:	46bd      	mov	sp, r7
 80086d6:	b005      	add	sp, #20
 80086d8:	bd90      	pop	{r4, r7, pc}

080086da <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086da:	b590      	push	{r4, r7, lr}
 80086dc:	b085      	sub	sp, #20
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
 80086e2:	000a      	movs	r2, r1
 80086e4:	1cfb      	adds	r3, r7, #3
 80086e6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086e8:	240f      	movs	r4, #15
 80086ea:	193b      	adds	r3, r7, r4
 80086ec:	2200      	movs	r2, #0
 80086ee:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	23ae      	movs	r3, #174	; 0xae
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	58d3      	ldr	r3, [r2, r3]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	1cfa      	adds	r2, r7, #3
 80086fc:	7811      	ldrb	r1, [r2, #0]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	0010      	movs	r0, r2
 8008702:	4798      	blx	r3
 8008704:	1e03      	subs	r3, r0, #0
 8008706:	d002      	beq.n	800870e <USBD_ClrClassConfig+0x34>
  {
    ret = USBD_FAIL;
 8008708:	193b      	adds	r3, r7, r4
 800870a:	2203      	movs	r2, #3
 800870c:	701a      	strb	r2, [r3, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800870e:	230f      	movs	r3, #15
 8008710:	18fb      	adds	r3, r7, r3
 8008712:	781b      	ldrb	r3, [r3, #0]
}
 8008714:	0018      	movs	r0, r3
 8008716:	46bd      	mov	sp, r7
 8008718:	b005      	add	sp, #20
 800871a:	bd90      	pop	{r4, r7, pc}

0800871c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800871c:	b590      	push	{r4, r7, lr}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a30      	ldr	r2, [pc, #192]	; (80087ec <USBD_LL_SetupStage+0xd0>)
 800872a:	4694      	mov	ip, r2
 800872c:	4463      	add	r3, ip
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	0011      	movs	r1, r2
 8008732:	0018      	movs	r0, r3
 8008734:	f001 fa5f 	bl	8009bf6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	23a5      	movs	r3, #165	; 0xa5
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	2101      	movs	r1, #1
 8008740:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	23ac      	movs	r3, #172	; 0xac
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	5ad3      	ldrh	r3, [r2, r3]
 800874a:	0019      	movs	r1, r3
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	23a6      	movs	r3, #166	; 0xa6
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a25      	ldr	r2, [pc, #148]	; (80087ec <USBD_LL_SetupStage+0xd0>)
 8008758:	5c9b      	ldrb	r3, [r3, r2]
 800875a:	001a      	movs	r2, r3
 800875c:	231f      	movs	r3, #31
 800875e:	4013      	ands	r3, r2
 8008760:	2b02      	cmp	r3, #2
 8008762:	d01f      	beq.n	80087a4 <USBD_LL_SetupStage+0x88>
 8008764:	d82b      	bhi.n	80087be <USBD_LL_SetupStage+0xa2>
 8008766:	2b00      	cmp	r3, #0
 8008768:	d002      	beq.n	8008770 <USBD_LL_SetupStage+0x54>
 800876a:	2b01      	cmp	r3, #1
 800876c:	d00d      	beq.n	800878a <USBD_LL_SetupStage+0x6e>
 800876e:	e026      	b.n	80087be <USBD_LL_SetupStage+0xa2>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a1e      	ldr	r2, [pc, #120]	; (80087ec <USBD_LL_SetupStage+0xd0>)
 8008774:	189a      	adds	r2, r3, r2
 8008776:	230f      	movs	r3, #15
 8008778:	18fc      	adds	r4, r7, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	0011      	movs	r1, r2
 800877e:	0018      	movs	r0, r3
 8008780:	f000 fb5e 	bl	8008e40 <USBD_StdDevReq>
 8008784:	0003      	movs	r3, r0
 8008786:	7023      	strb	r3, [r4, #0]
      break;
 8008788:	e029      	b.n	80087de <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a17      	ldr	r2, [pc, #92]	; (80087ec <USBD_LL_SetupStage+0xd0>)
 800878e:	189a      	adds	r2, r3, r2
 8008790:	230f      	movs	r3, #15
 8008792:	18fc      	adds	r4, r7, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	0011      	movs	r1, r2
 8008798:	0018      	movs	r0, r3
 800879a:	f000 fbcf 	bl	8008f3c <USBD_StdItfReq>
 800879e:	0003      	movs	r3, r0
 80087a0:	7023      	strb	r3, [r4, #0]
      break;
 80087a2:	e01c      	b.n	80087de <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a11      	ldr	r2, [pc, #68]	; (80087ec <USBD_LL_SetupStage+0xd0>)
 80087a8:	189a      	adds	r2, r3, r2
 80087aa:	230f      	movs	r3, #15
 80087ac:	18fc      	adds	r4, r7, r3
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	0011      	movs	r1, r2
 80087b2:	0018      	movs	r0, r3
 80087b4:	f000 fc4f 	bl	8009056 <USBD_StdEPReq>
 80087b8:	0003      	movs	r3, r0
 80087ba:	7023      	strb	r3, [r4, #0]
      break;
 80087bc:	e00f      	b.n	80087de <USBD_LL_SetupStage+0xc2>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a0a      	ldr	r2, [pc, #40]	; (80087ec <USBD_LL_SetupStage+0xd0>)
 80087c2:	5c9b      	ldrb	r3, [r3, r2]
 80087c4:	227f      	movs	r2, #127	; 0x7f
 80087c6:	4393      	bics	r3, r2
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	230f      	movs	r3, #15
 80087cc:	18fc      	adds	r4, r7, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	0011      	movs	r1, r2
 80087d2:	0018      	movs	r0, r3
 80087d4:	f001 ff49 	bl	800a66a <USBD_LL_StallEP>
 80087d8:	0003      	movs	r3, r0
 80087da:	7023      	strb	r3, [r4, #0]
      break;
 80087dc:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80087de:	230f      	movs	r3, #15
 80087e0:	18fb      	adds	r3, r7, r3
 80087e2:	781b      	ldrb	r3, [r3, #0]
}
 80087e4:	0018      	movs	r0, r3
 80087e6:	46bd      	mov	sp, r7
 80087e8:	b005      	add	sp, #20
 80087ea:	bd90      	pop	{r4, r7, pc}
 80087ec:	000002aa 	.word	0x000002aa

080087f0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80087f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087f2:	b087      	sub	sp, #28
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	607a      	str	r2, [r7, #4]
 80087fa:	200b      	movs	r0, #11
 80087fc:	183b      	adds	r3, r7, r0
 80087fe:	1c0a      	adds	r2, r1, #0
 8008800:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008802:	2317      	movs	r3, #23
 8008804:	18fb      	adds	r3, r7, r3
 8008806:	2200      	movs	r2, #0
 8008808:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  if (epnum == 0U)
 800880a:	183b      	adds	r3, r7, r0
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d000      	beq.n	8008814 <USBD_LL_DataOutStage+0x24>
 8008812:	e084      	b.n	800891e <USBD_LL_DataOutStage+0x12e>
  {
    pep = &pdev->ep_out[0];
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	3355      	adds	r3, #85	; 0x55
 8008818:	33ff      	adds	r3, #255	; 0xff
 800881a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	23a5      	movs	r3, #165	; 0xa5
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	58d3      	ldr	r3, [r2, r3]
 8008824:	2b03      	cmp	r3, #3
 8008826:	d000      	beq.n	800882a <USBD_LL_DataOutStage+0x3a>
 8008828:	e0c0      	b.n	80089ac <USBD_LL_DataOutStage+0x1bc>
    {
      if (pep->rem_length > pep->maxpacket)
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	689a      	ldr	r2, [r3, #8]
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	429a      	cmp	r2, r3
 8008834:	d914      	bls.n	8008860 <USBD_LL_DataOutStage+0x70>
      {
        pep->rem_length -= pep->maxpacket;
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	689a      	ldr	r2, [r3, #8]
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	1ad2      	subs	r2, r2, r3
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	68d9      	ldr	r1, [r3, #12]
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	689a      	ldr	r2, [r3, #8]
 800884c:	000b      	movs	r3, r1
 800884e:	4293      	cmp	r3, r2
 8008850:	d900      	bls.n	8008854 <USBD_LL_DataOutStage+0x64>
 8008852:	0013      	movs	r3, r2
 8008854:	6879      	ldr	r1, [r7, #4]
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	001a      	movs	r2, r3
 800885a:	f001 fade 	bl	8009e1a <USBD_CtlContinueRx>
 800885e:	e0a5      	b.n	80089ac <USBD_LL_DataOutStage+0x1bc>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	4a55      	ldr	r2, [pc, #340]	; (80089b8 <USBD_LL_DataOutStage+0x1c8>)
 8008864:	5c9b      	ldrb	r3, [r3, r2]
 8008866:	001a      	movs	r2, r3
 8008868:	231f      	movs	r3, #31
 800886a:	4013      	ands	r3, r2
 800886c:	2b02      	cmp	r3, #2
 800886e:	d018      	beq.n	80088a2 <USBD_LL_DataOutStage+0xb2>
 8008870:	d825      	bhi.n	80088be <USBD_LL_DataOutStage+0xce>
 8008872:	2b00      	cmp	r3, #0
 8008874:	d002      	beq.n	800887c <USBD_LL_DataOutStage+0x8c>
 8008876:	2b01      	cmp	r3, #1
 8008878:	d005      	beq.n	8008886 <USBD_LL_DataOutStage+0x96>
 800887a:	e020      	b.n	80088be <USBD_LL_DataOutStage+0xce>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800887c:	2316      	movs	r3, #22
 800887e:	18fb      	adds	r3, r7, r3
 8008880:	2200      	movs	r2, #0
 8008882:	701a      	strb	r2, [r3, #0]
            break;
 8008884:	e020      	b.n	80088c8 <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	4a4c      	ldr	r2, [pc, #304]	; (80089bc <USBD_LL_DataOutStage+0x1cc>)
 800888a:	5a9b      	ldrh	r3, [r3, r2]
 800888c:	b2da      	uxtb	r2, r3
 800888e:	2316      	movs	r3, #22
 8008890:	18fc      	adds	r4, r7, r3
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	0011      	movs	r1, r2
 8008896:	0018      	movs	r0, r3
 8008898:	f000 fa31 	bl	8008cfe <USBD_CoreFindIF>
 800889c:	0003      	movs	r3, r0
 800889e:	7023      	strb	r3, [r4, #0]
            break;
 80088a0:	e012      	b.n	80088c8 <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	4a45      	ldr	r2, [pc, #276]	; (80089bc <USBD_LL_DataOutStage+0x1cc>)
 80088a6:	5a9b      	ldrh	r3, [r3, r2]
 80088a8:	b2da      	uxtb	r2, r3
 80088aa:	2316      	movs	r3, #22
 80088ac:	18fc      	adds	r4, r7, r3
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	0011      	movs	r1, r2
 80088b2:	0018      	movs	r0, r3
 80088b4:	f000 fa2f 	bl	8008d16 <USBD_CoreFindEP>
 80088b8:	0003      	movs	r3, r0
 80088ba:	7023      	strb	r3, [r4, #0]
            break;
 80088bc:	e004      	b.n	80088c8 <USBD_LL_DataOutStage+0xd8>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80088be:	2316      	movs	r3, #22
 80088c0:	18fb      	adds	r3, r7, r3
 80088c2:	2200      	movs	r2, #0
 80088c4:	701a      	strb	r2, [r3, #0]
            break;
 80088c6:	46c0      	nop			; (mov r8, r8)
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80088c8:	2116      	movs	r1, #22
 80088ca:	187b      	adds	r3, r7, r1
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d120      	bne.n	8008914 <USBD_LL_DataOutStage+0x124>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	23a7      	movs	r3, #167	; 0xa7
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	5cd3      	ldrb	r3, [r2, r3]
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	2b03      	cmp	r3, #3
 80088de:	d119      	bne.n	8008914 <USBD_LL_DataOutStage+0x124>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80088e0:	187b      	adds	r3, r7, r1
 80088e2:	781a      	ldrb	r2, [r3, #0]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	32ae      	adds	r2, #174	; 0xae
 80088e8:	0092      	lsls	r2, r2, #2
 80088ea:	58d3      	ldr	r3, [r2, r3]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d010      	beq.n	8008914 <USBD_LL_DataOutStage+0x124>
            {
              pdev->classId = idx;
 80088f2:	0008      	movs	r0, r1
 80088f4:	187b      	adds	r3, r7, r1
 80088f6:	7819      	ldrb	r1, [r3, #0]
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	23b5      	movs	r3, #181	; 0xb5
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	50d1      	str	r1, [r2, r3]
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008900:	183b      	adds	r3, r7, r0
 8008902:	781a      	ldrb	r2, [r3, #0]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	32ae      	adds	r2, #174	; 0xae
 8008908:	0092      	lsls	r2, r2, #2
 800890a:	58d3      	ldr	r3, [r2, r3]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	0010      	movs	r0, r2
 8008912:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	0018      	movs	r0, r3
 8008918:	f001 fa90 	bl	8009e3c <USBD_CtlSendStatus>
 800891c:	e046      	b.n	80089ac <USBD_LL_DataOutStage+0x1bc>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800891e:	260b      	movs	r6, #11
 8008920:	19bb      	adds	r3, r7, r6
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	227f      	movs	r2, #127	; 0x7f
 8008926:	4013      	ands	r3, r2
 8008928:	b2da      	uxtb	r2, r3
 800892a:	2516      	movs	r5, #22
 800892c:	197c      	adds	r4, r7, r5
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	0011      	movs	r1, r2
 8008932:	0018      	movs	r0, r3
 8008934:	f000 f9ef 	bl	8008d16 <USBD_CoreFindEP>
 8008938:	0003      	movs	r3, r0
 800893a:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800893c:	0029      	movs	r1, r5
 800893e:	187b      	adds	r3, r7, r1
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	2bff      	cmp	r3, #255	; 0xff
 8008944:	d032      	beq.n	80089ac <USBD_LL_DataOutStage+0x1bc>
 8008946:	187b      	adds	r3, r7, r1
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d12e      	bne.n	80089ac <USBD_LL_DataOutStage+0x1bc>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	23a7      	movs	r3, #167	; 0xa7
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	5cd3      	ldrb	r3, [r2, r3]
 8008956:	b2db      	uxtb	r3, r3
 8008958:	2b03      	cmp	r3, #3
 800895a:	d11f      	bne.n	800899c <USBD_LL_DataOutStage+0x1ac>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800895c:	187b      	adds	r3, r7, r1
 800895e:	781a      	ldrb	r2, [r3, #0]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	32ae      	adds	r2, #174	; 0xae
 8008964:	0092      	lsls	r2, r2, #2
 8008966:	58d3      	ldr	r3, [r2, r3]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d016      	beq.n	800899c <USBD_LL_DataOutStage+0x1ac>
        {
          pdev->classId = idx;
 800896e:	0008      	movs	r0, r1
 8008970:	187b      	adds	r3, r7, r1
 8008972:	7819      	ldrb	r1, [r3, #0]
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	23b5      	movs	r3, #181	; 0xb5
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800897c:	183b      	adds	r3, r7, r0
 800897e:	781a      	ldrb	r2, [r3, #0]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	32ae      	adds	r2, #174	; 0xae
 8008984:	0092      	lsls	r2, r2, #2
 8008986:	58d3      	ldr	r3, [r2, r3]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	2217      	movs	r2, #23
 800898c:	18bc      	adds	r4, r7, r2
 800898e:	19ba      	adds	r2, r7, r6
 8008990:	7811      	ldrb	r1, [r2, #0]
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	0010      	movs	r0, r2
 8008996:	4798      	blx	r3
 8008998:	0003      	movs	r3, r0
 800899a:	7023      	strb	r3, [r4, #0]
        }
      }
      if (ret != USBD_OK)
 800899c:	2217      	movs	r2, #23
 800899e:	18bb      	adds	r3, r7, r2
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d002      	beq.n	80089ac <USBD_LL_DataOutStage+0x1bc>
      {
        return ret;
 80089a6:	18bb      	adds	r3, r7, r2
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	e000      	b.n	80089ae <USBD_LL_DataOutStage+0x1be>
      }
    }
  }

  return USBD_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	0018      	movs	r0, r3
 80089b0:	46bd      	mov	sp, r7
 80089b2:	b007      	add	sp, #28
 80089b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089b6:	46c0      	nop			; (mov r8, r8)
 80089b8:	000002aa 	.word	0x000002aa
 80089bc:	000002ae 	.word	0x000002ae

080089c0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80089c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089c2:	b087      	sub	sp, #28
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	607a      	str	r2, [r7, #4]
 80089ca:	200b      	movs	r0, #11
 80089cc:	183b      	adds	r3, r7, r0
 80089ce:	1c0a      	adds	r2, r1, #0
 80089d0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80089d2:	183b      	adds	r3, r7, r0
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d000      	beq.n	80089dc <USBD_LL_DataInStage+0x1c>
 80089da:	e07d      	b.n	8008ad8 <USBD_LL_DataInStage+0x118>
  {
    pep = &pdev->ep_in[0];
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3314      	adds	r3, #20
 80089e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	23a5      	movs	r3, #165	; 0xa5
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	58d3      	ldr	r3, [r2, r3]
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d164      	bne.n	8008ab8 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	689a      	ldr	r2, [r3, #8]
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d914      	bls.n	8008a24 <USBD_LL_DataInStage+0x64>
      {
        pep->rem_length -= pep->maxpacket;
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	689a      	ldr	r2, [r3, #8]
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	1ad2      	subs	r2, r2, r3
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	689a      	ldr	r2, [r3, #8]
 8008a0c:	6879      	ldr	r1, [r7, #4]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	0018      	movs	r0, r3
 8008a12:	f001 f9d1 	bl	8009db8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	2300      	movs	r3, #0
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	f001 ff05 	bl	800a82c <USBD_LL_PrepareReceive>
 8008a22:	e049      	b.n	8008ab8 <USBD_LL_DataInStage+0xf8>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	68da      	ldr	r2, [r3, #12]
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d11f      	bne.n	8008a70 <USBD_LL_DataInStage+0xb0>
            (pep->total_length >= pep->maxpacket) &&
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	685a      	ldr	r2, [r3, #4]
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d319      	bcc.n	8008a70 <USBD_LL_DataInStage+0xb0>
            (pep->total_length < pdev->ep0_data_len))
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	685a      	ldr	r2, [r3, #4]
 8008a40:	68f9      	ldr	r1, [r7, #12]
 8008a42:	23a6      	movs	r3, #166	; 0xa6
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d211      	bcs.n	8008a70 <USBD_LL_DataInStage+0xb0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	2100      	movs	r1, #0
 8008a52:	0018      	movs	r0, r3
 8008a54:	f001 f9b0 	bl	8009db8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	23a6      	movs	r3, #166	; 0xa6
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	2100      	movs	r1, #0
 8008a60:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	2300      	movs	r3, #0
 8008a66:	2200      	movs	r2, #0
 8008a68:	2100      	movs	r1, #0
 8008a6a:	f001 fedf 	bl	800a82c <USBD_LL_PrepareReceive>
 8008a6e:	e023      	b.n	8008ab8 <USBD_LL_DataInStage+0xf8>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	23a7      	movs	r3, #167	; 0xa7
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	5cd3      	ldrb	r3, [r2, r3]
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d113      	bne.n	8008aa6 <USBD_LL_DataInStage+0xe6>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	23ae      	movs	r3, #174	; 0xae
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	58d3      	ldr	r3, [r2, r3]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00c      	beq.n	8008aa6 <USBD_LL_DataInStage+0xe6>
            {
              pdev->classId = 0U;
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	23b5      	movs	r3, #181	; 0xb5
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	2100      	movs	r1, #0
 8008a94:	50d1      	str	r1, [r2, r3]
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	23ae      	movs	r3, #174	; 0xae
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	58d3      	ldr	r3, [r2, r3]
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	0010      	movs	r0, r2
 8008aa4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2180      	movs	r1, #128	; 0x80
 8008aaa:	0018      	movs	r0, r3
 8008aac:	f001 fddd 	bl	800a66a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	0018      	movs	r0, r3
 8008ab4:	f001 f9d6 	bl	8009e64 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	23a8      	movs	r3, #168	; 0xa8
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	5cd3      	ldrb	r3, [r2, r3]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d050      	beq.n	8008b66 <USBD_LL_DataInStage+0x1a6>
    {
      (void)USBD_RunTestMode(pdev);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	0018      	movs	r0, r3
 8008ac8:	f7ff fdd9 	bl	800867e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	23a8      	movs	r3, #168	; 0xa8
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	54d1      	strb	r1, [r2, r3]
 8008ad6:	e046      	b.n	8008b66 <USBD_LL_DataInStage+0x1a6>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008ad8:	260b      	movs	r6, #11
 8008ada:	19bb      	adds	r3, r7, r6
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	2280      	movs	r2, #128	; 0x80
 8008ae0:	4252      	negs	r2, r2
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	2517      	movs	r5, #23
 8008ae8:	197c      	adds	r4, r7, r5
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	0011      	movs	r1, r2
 8008aee:	0018      	movs	r0, r3
 8008af0:	f000 f911 	bl	8008d16 <USBD_CoreFindEP>
 8008af4:	0003      	movs	r3, r0
 8008af6:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008af8:	0029      	movs	r1, r5
 8008afa:	187b      	adds	r3, r7, r1
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	2bff      	cmp	r3, #255	; 0xff
 8008b00:	d031      	beq.n	8008b66 <USBD_LL_DataInStage+0x1a6>
 8008b02:	187b      	adds	r3, r7, r1
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d12d      	bne.n	8008b66 <USBD_LL_DataInStage+0x1a6>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	23a7      	movs	r3, #167	; 0xa7
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	5cd3      	ldrb	r3, [r2, r3]
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	2b03      	cmp	r3, #3
 8008b16:	d126      	bne.n	8008b66 <USBD_LL_DataInStage+0x1a6>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008b18:	187b      	adds	r3, r7, r1
 8008b1a:	781a      	ldrb	r2, [r3, #0]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	32ae      	adds	r2, #174	; 0xae
 8008b20:	0092      	lsls	r2, r2, #2
 8008b22:	58d3      	ldr	r3, [r2, r3]
 8008b24:	695b      	ldr	r3, [r3, #20]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d01d      	beq.n	8008b66 <USBD_LL_DataInStage+0x1a6>
        {
          pdev->classId = idx;
 8008b2a:	0008      	movs	r0, r1
 8008b2c:	187b      	adds	r3, r7, r1
 8008b2e:	7819      	ldrb	r1, [r3, #0]
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	23b5      	movs	r3, #181	; 0xb5
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008b38:	183b      	adds	r3, r7, r0
 8008b3a:	781a      	ldrb	r2, [r3, #0]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	32ae      	adds	r2, #174	; 0xae
 8008b40:	0092      	lsls	r2, r2, #2
 8008b42:	58d3      	ldr	r3, [r2, r3]
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	2516      	movs	r5, #22
 8008b48:	197c      	adds	r4, r7, r5
 8008b4a:	19ba      	adds	r2, r7, r6
 8008b4c:	7811      	ldrb	r1, [r2, #0]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	0010      	movs	r0, r2
 8008b52:	4798      	blx	r3
 8008b54:	0003      	movs	r3, r0
 8008b56:	7023      	strb	r3, [r4, #0]

          if (ret != USBD_OK)
 8008b58:	197b      	adds	r3, r7, r5
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d002      	beq.n	8008b66 <USBD_LL_DataInStage+0x1a6>
          {
            return ret;
 8008b60:	197b      	adds	r3, r7, r5
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	e000      	b.n	8008b68 <USBD_LL_DataInStage+0x1a8>
        }
      }
    }
  }

  return USBD_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	0018      	movs	r0, r3
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	b007      	add	sp, #28
 8008b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b70 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008b70:	b590      	push	{r4, r7, lr}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b78:	240f      	movs	r4, #15
 8008b7a:	193b      	adds	r3, r7, r4
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	701a      	strb	r2, [r3, #0]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	23a7      	movs	r3, #167	; 0xa7
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	2101      	movs	r1, #1
 8008b88:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	23a5      	movs	r3, #165	; 0xa5
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	2100      	movs	r1, #0
 8008b92:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	23a9      	movs	r3, #169	; 0xa9
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	2100      	movs	r1, #0
 8008ba2:	50d1      	str	r1, [r2, r3]
  pdev->dev_test_mode = 0U;
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	23a8      	movs	r3, #168	; 0xa8
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	2100      	movs	r1, #0
 8008bac:	54d1      	strb	r1, [r2, r3]
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	23ae      	movs	r3, #174	; 0xae
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	58d3      	ldr	r3, [r2, r3]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d016      	beq.n	8008be8 <USBD_LL_Reset+0x78>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	23ae      	movs	r3, #174	; 0xae
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	58d3      	ldr	r3, [r2, r3]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00f      	beq.n	8008be8 <USBD_LL_Reset+0x78>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	23ae      	movs	r3, #174	; 0xae
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	58d3      	ldr	r3, [r2, r3]
 8008bd0:	685a      	ldr	r2, [r3, #4]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	b2d9      	uxtb	r1, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	0018      	movs	r0, r3
 8008bdc:	4790      	blx	r2
 8008bde:	1e03      	subs	r3, r0, #0
 8008be0:	d002      	beq.n	8008be8 <USBD_LL_Reset+0x78>
      {
        ret = USBD_FAIL;
 8008be2:	193b      	adds	r3, r7, r4
 8008be4:	2203      	movs	r2, #3
 8008be6:	701a      	strb	r2, [r3, #0]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	2340      	movs	r3, #64	; 0x40
 8008bec:	2200      	movs	r2, #0
 8008bee:	2100      	movs	r1, #0
 8008bf0:	f001 fcd9 	bl	800a5a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	23b2      	movs	r3, #178	; 0xb2
 8008bf8:	005b      	lsls	r3, r3, #1
 8008bfa:	2101      	movs	r1, #1
 8008bfc:	52d1      	strh	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	23b0      	movs	r3, #176	; 0xb0
 8008c02:	005b      	lsls	r3, r3, #1
 8008c04:	2140      	movs	r1, #64	; 0x40
 8008c06:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	2340      	movs	r3, #64	; 0x40
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	2180      	movs	r1, #128	; 0x80
 8008c10:	f001 fcc9 	bl	800a5a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2240      	movs	r2, #64	; 0x40
 8008c1e:	621a      	str	r2, [r3, #32]

  return ret;
 8008c20:	230f      	movs	r3, #15
 8008c22:	18fb      	adds	r3, r7, r3
 8008c24:	781b      	ldrb	r3, [r3, #0]
}
 8008c26:	0018      	movs	r0, r3
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	b005      	add	sp, #20
 8008c2c:	bd90      	pop	{r4, r7, pc}

08008c2e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b082      	sub	sp, #8
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	000a      	movs	r2, r1
 8008c38:	1cfb      	adds	r3, r7, #3
 8008c3a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	1cfa      	adds	r2, r7, #3
 8008c40:	7812      	ldrb	r2, [r2, #0]
 8008c42:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	0018      	movs	r0, r3
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	b002      	add	sp, #8
 8008c4c:	bd80      	pop	{r7, pc}
	...

08008c50 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	23a7      	movs	r3, #167	; 0xa7
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	5cd3      	ldrb	r3, [r2, r3]
 8008c60:	b2d9      	uxtb	r1, r3
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a05      	ldr	r2, [pc, #20]	; (8008c7c <USBD_LL_Suspend+0x2c>)
 8008c66:	5499      	strb	r1, [r3, r2]
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	23a7      	movs	r3, #167	; 0xa7
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	2104      	movs	r1, #4
 8008c70:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	0018      	movs	r0, r3
 8008c76:	46bd      	mov	sp, r7
 8008c78:	b002      	add	sp, #8
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	0000029d 	.word	0x0000029d

08008c80 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	23a7      	movs	r3, #167	; 0xa7
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	5cd3      	ldrb	r3, [r2, r3]
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b04      	cmp	r3, #4
 8008c94:	d107      	bne.n	8008ca6 <USBD_LL_Resume+0x26>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a05      	ldr	r2, [pc, #20]	; (8008cb0 <USBD_LL_Resume+0x30>)
 8008c9a:	5c9b      	ldrb	r3, [r3, r2]
 8008c9c:	b2d9      	uxtb	r1, r3
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	23a7      	movs	r3, #167	; 0xa7
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	0018      	movs	r0, r3
 8008caa:	46bd      	mov	sp, r7
 8008cac:	b002      	add	sp, #8
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	0000029d 	.word	0x0000029d

08008cb4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	23a7      	movs	r3, #167	; 0xa7
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	5cd3      	ldrb	r3, [r2, r3]
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	2b03      	cmp	r3, #3
 8008cc8:	d114      	bne.n	8008cf4 <USBD_LL_SOF+0x40>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	23ae      	movs	r3, #174	; 0xae
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	58d3      	ldr	r3, [r2, r3]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00e      	beq.n	8008cf4 <USBD_LL_SOF+0x40>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	23ae      	movs	r3, #174	; 0xae
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	58d3      	ldr	r3, [r2, r3]
 8008cde:	69db      	ldr	r3, [r3, #28]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d007      	beq.n	8008cf4 <USBD_LL_SOF+0x40>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	23ae      	movs	r3, #174	; 0xae
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	58d3      	ldr	r3, [r2, r3]
 8008cec:	69db      	ldr	r3, [r3, #28]
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	0010      	movs	r0, r2
 8008cf2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	0018      	movs	r0, r3
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	b002      	add	sp, #8
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b082      	sub	sp, #8
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	000a      	movs	r2, r1
 8008d08:	1cfb      	adds	r3, r7, #3
 8008d0a:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008d0c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008d0e:	0018      	movs	r0, r3
 8008d10:	46bd      	mov	sp, r7
 8008d12:	b002      	add	sp, #8
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b082      	sub	sp, #8
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	000a      	movs	r2, r1
 8008d20:	1cfb      	adds	r3, r7, #3
 8008d22:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008d24:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008d26:	0018      	movs	r0, r3
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	b002      	add	sp, #8
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b086      	sub	sp, #24
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	000a      	movs	r2, r1
 8008d38:	1cfb      	adds	r3, r7, #3
 8008d3a:	701a      	strb	r2, [r3, #0]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008d44:	2300      	movs	r3, #0
 8008d46:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	789a      	ldrb	r2, [r3, #2]
 8008d4c:	78db      	ldrb	r3, [r3, #3]
 8008d4e:	021b      	lsls	r3, r3, #8
 8008d50:	4313      	orrs	r3, r2
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d92a      	bls.n	8008db4 <USBD_GetEpDesc+0x86>
  {
    ptr = desc->bLength;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	230a      	movs	r3, #10
 8008d66:	18fb      	adds	r3, r7, r3
 8008d68:	801a      	strh	r2, [r3, #0]

    while (ptr < desc->wTotalLength)
 8008d6a:	e016      	b.n	8008d9a <USBD_GetEpDesc+0x6c>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008d6c:	230a      	movs	r3, #10
 8008d6e:	18fa      	adds	r2, r7, r3
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	0011      	movs	r1, r2
 8008d74:	0018      	movs	r0, r3
 8008d76:	f000 f822 	bl	8008dbe <USBD_GetNextDesc>
 8008d7a:	0003      	movs	r3, r0
 8008d7c:	617b      	str	r3, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	785b      	ldrb	r3, [r3, #1]
 8008d82:	2b05      	cmp	r3, #5
 8008d84:	d109      	bne.n	8008d9a <USBD_GetEpDesc+0x6c>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	789b      	ldrb	r3, [r3, #2]
 8008d8e:	1cfa      	adds	r2, r7, #3
 8008d90:	7812      	ldrb	r2, [r2, #0]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d00d      	beq.n	8008db2 <USBD_GetEpDesc+0x84>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008d96:	2300      	movs	r3, #0
 8008d98:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	789a      	ldrb	r2, [r3, #2]
 8008d9e:	78db      	ldrb	r3, [r3, #3]
 8008da0:	021b      	lsls	r3, r3, #8
 8008da2:	4313      	orrs	r3, r2
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	230a      	movs	r3, #10
 8008da8:	18fb      	adds	r3, r7, r3
 8008daa:	881b      	ldrh	r3, [r3, #0]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d8dd      	bhi.n	8008d6c <USBD_GetEpDesc+0x3e>
 8008db0:	e000      	b.n	8008db4 <USBD_GetEpDesc+0x86>
          break;
 8008db2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008db4:	693b      	ldr	r3, [r7, #16]
}
 8008db6:	0018      	movs	r0, r3
 8008db8:	46bd      	mov	sp, r7
 8008dba:	b006      	add	sp, #24
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b084      	sub	sp, #16
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	881a      	ldrh	r2, [r3, #0]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	18d3      	adds	r3, r2, r3
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	001a      	movs	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	189b      	adds	r3, r3, r2
 8008de8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008dea:	68fb      	ldr	r3, [r7, #12]
}
 8008dec:	0018      	movs	r0, r3
 8008dee:	46bd      	mov	sp, r7
 8008df0:	b004      	add	sp, #16
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b086      	sub	sp, #24
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	781a      	ldrb	r2, [r3, #0]
 8008e04:	2112      	movs	r1, #18
 8008e06:	187b      	adds	r3, r7, r1
 8008e08:	801a      	strh	r2, [r3, #0]
  _pbuff++;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	781a      	ldrb	r2, [r3, #0]
 8008e14:	2010      	movs	r0, #16
 8008e16:	183b      	adds	r3, r7, r0
 8008e18:	801a      	strh	r2, [r3, #0]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008e1a:	183b      	adds	r3, r7, r0
 8008e1c:	881b      	ldrh	r3, [r3, #0]
 8008e1e:	021b      	lsls	r3, r3, #8
 8008e20:	b21a      	sxth	r2, r3
 8008e22:	187b      	adds	r3, r7, r1
 8008e24:	2100      	movs	r1, #0
 8008e26:	5e5b      	ldrsh	r3, [r3, r1]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	b21a      	sxth	r2, r3
 8008e2c:	210e      	movs	r1, #14
 8008e2e:	187b      	adds	r3, r7, r1
 8008e30:	801a      	strh	r2, [r3, #0]

  return _SwapVal;
 8008e32:	187b      	adds	r3, r7, r1
 8008e34:	881b      	ldrh	r3, [r3, #0]
}
 8008e36:	0018      	movs	r0, r3
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	b006      	add	sp, #24
 8008e3c:	bd80      	pop	{r7, pc}
	...

08008e40 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e40:	b590      	push	{r4, r7, lr}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e4a:	230f      	movs	r3, #15
 8008e4c:	18fb      	adds	r3, r7, r3
 8008e4e:	2200      	movs	r2, #0
 8008e50:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	001a      	movs	r2, r3
 8008e58:	2360      	movs	r3, #96	; 0x60
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	2b40      	cmp	r3, #64	; 0x40
 8008e5e:	d004      	beq.n	8008e6a <USBD_StdDevReq+0x2a>
 8008e60:	d85b      	bhi.n	8008f1a <USBD_StdDevReq+0xda>
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d013      	beq.n	8008e8e <USBD_StdDevReq+0x4e>
 8008e66:	2b20      	cmp	r3, #32
 8008e68:	d157      	bne.n	8008f1a <USBD_StdDevReq+0xda>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	23b5      	movs	r3, #181	; 0xb5
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	58d2      	ldr	r2, [r2, r3]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	32ae      	adds	r2, #174	; 0xae
 8008e76:	0092      	lsls	r2, r2, #2
 8008e78:	58d3      	ldr	r3, [r2, r3]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	220f      	movs	r2, #15
 8008e7e:	18bc      	adds	r4, r7, r2
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	0010      	movs	r0, r2
 8008e86:	4798      	blx	r3
 8008e88:	0003      	movs	r3, r0
 8008e8a:	7023      	strb	r3, [r4, #0]
      break;
 8008e8c:	e04c      	b.n	8008f28 <USBD_StdDevReq+0xe8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	785b      	ldrb	r3, [r3, #1]
 8008e92:	2b09      	cmp	r3, #9
 8008e94:	d839      	bhi.n	8008f0a <USBD_StdDevReq+0xca>
 8008e96:	009a      	lsls	r2, r3, #2
 8008e98:	4b27      	ldr	r3, [pc, #156]	; (8008f38 <USBD_StdDevReq+0xf8>)
 8008e9a:	18d3      	adds	r3, r2, r3
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ea0:	683a      	ldr	r2, [r7, #0]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	0011      	movs	r1, r2
 8008ea6:	0018      	movs	r0, r3
 8008ea8:	f000 fada 	bl	8009460 <USBD_GetDescriptor>
          break;
 8008eac:	e034      	b.n	8008f18 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008eae:	683a      	ldr	r2, [r7, #0]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	0011      	movs	r1, r2
 8008eb4:	0018      	movs	r0, r3
 8008eb6:	f000 fcad 	bl	8009814 <USBD_SetAddress>
          break;
 8008eba:	e02d      	b.n	8008f18 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008ebc:	230f      	movs	r3, #15
 8008ebe:	18fc      	adds	r4, r7, r3
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	0011      	movs	r1, r2
 8008ec6:	0018      	movs	r0, r3
 8008ec8:	f000 fcfa 	bl	80098c0 <USBD_SetConfig>
 8008ecc:	0003      	movs	r3, r0
 8008ece:	7023      	strb	r3, [r4, #0]
          break;
 8008ed0:	e022      	b.n	8008f18 <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008ed2:	683a      	ldr	r2, [r7, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	0011      	movs	r1, r2
 8008ed8:	0018      	movs	r0, r3
 8008eda:	f000 fdbf 	bl	8009a5c <USBD_GetConfig>
          break;
 8008ede:	e01b      	b.n	8008f18 <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008ee0:	683a      	ldr	r2, [r7, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	0011      	movs	r1, r2
 8008ee6:	0018      	movs	r0, r3
 8008ee8:	f000 fdf4 	bl	8009ad4 <USBD_GetStatus>
          break;
 8008eec:	e014      	b.n	8008f18 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008eee:	683a      	ldr	r2, [r7, #0]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	0011      	movs	r1, r2
 8008ef4:	0018      	movs	r0, r3
 8008ef6:	f000 fe28 	bl	8009b4a <USBD_SetFeature>
          break;
 8008efa:	e00d      	b.n	8008f18 <USBD_StdDevReq+0xd8>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008efc:	683a      	ldr	r2, [r7, #0]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	0011      	movs	r1, r2
 8008f02:	0018      	movs	r0, r3
 8008f04:	f000 fe50 	bl	8009ba8 <USBD_ClrFeature>
          break;
 8008f08:	e006      	b.n	8008f18 <USBD_StdDevReq+0xd8>

        default:
          USBD_CtlError(pdev, req);
 8008f0a:	683a      	ldr	r2, [r7, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	0011      	movs	r1, r2
 8008f10:	0018      	movs	r0, r3
 8008f12:	f000 fead 	bl	8009c70 <USBD_CtlError>
          break;
 8008f16:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008f18:	e006      	b.n	8008f28 <USBD_StdDevReq+0xe8>

    default:
      USBD_CtlError(pdev, req);
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	0011      	movs	r1, r2
 8008f20:	0018      	movs	r0, r3
 8008f22:	f000 fea5 	bl	8009c70 <USBD_CtlError>
      break;
 8008f26:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008f28:	230f      	movs	r3, #15
 8008f2a:	18fb      	adds	r3, r7, r3
 8008f2c:	781b      	ldrb	r3, [r3, #0]
}
 8008f2e:	0018      	movs	r0, r3
 8008f30:	46bd      	mov	sp, r7
 8008f32:	b005      	add	sp, #20
 8008f34:	bd90      	pop	{r4, r7, pc}
 8008f36:	46c0      	nop			; (mov r8, r8)
 8008f38:	0800ab7c 	.word	0x0800ab7c

08008f3c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f3c:	b5b0      	push	{r4, r5, r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f46:	230f      	movs	r3, #15
 8008f48:	18fb      	adds	r3, r7, r3
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	001a      	movs	r2, r3
 8008f54:	2360      	movs	r3, #96	; 0x60
 8008f56:	4013      	ands	r3, r2
 8008f58:	2b40      	cmp	r3, #64	; 0x40
 8008f5a:	d005      	beq.n	8008f68 <USBD_StdItfReq+0x2c>
 8008f5c:	d900      	bls.n	8008f60 <USBD_StdItfReq+0x24>
 8008f5e:	e06c      	b.n	800903a <USBD_StdItfReq+0xfe>
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d001      	beq.n	8008f68 <USBD_StdItfReq+0x2c>
 8008f64:	2b20      	cmp	r3, #32
 8008f66:	d168      	bne.n	800903a <USBD_StdItfReq+0xfe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	23a7      	movs	r3, #167	; 0xa7
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	5cd3      	ldrb	r3, [r2, r3]
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	3b01      	subs	r3, #1
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d857      	bhi.n	8009028 <USBD_StdItfReq+0xec>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	889b      	ldrh	r3, [r3, #4]
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d84b      	bhi.n	800901a <USBD_StdItfReq+0xde>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	889b      	ldrh	r3, [r3, #4]
 8008f86:	b2da      	uxtb	r2, r3
 8008f88:	250e      	movs	r5, #14
 8008f8a:	197c      	adds	r4, r7, r5
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	0011      	movs	r1, r2
 8008f90:	0018      	movs	r0, r3
 8008f92:	f7ff feb4 	bl	8008cfe <USBD_CoreFindIF>
 8008f96:	0003      	movs	r3, r0
 8008f98:	7023      	strb	r3, [r4, #0]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f9a:	0029      	movs	r1, r5
 8008f9c:	187b      	adds	r3, r7, r1
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	2bff      	cmp	r3, #255	; 0xff
 8008fa2:	d028      	beq.n	8008ff6 <USBD_StdItfReq+0xba>
 8008fa4:	187b      	adds	r3, r7, r1
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d124      	bne.n	8008ff6 <USBD_StdItfReq+0xba>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008fac:	187b      	adds	r3, r7, r1
 8008fae:	781a      	ldrb	r2, [r3, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	32ae      	adds	r2, #174	; 0xae
 8008fb4:	0092      	lsls	r2, r2, #2
 8008fb6:	58d3      	ldr	r3, [r2, r3]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d016      	beq.n	8008fec <USBD_StdItfReq+0xb0>
              {
                pdev->classId = idx;
 8008fbe:	0008      	movs	r0, r1
 8008fc0:	187b      	adds	r3, r7, r1
 8008fc2:	7819      	ldrb	r1, [r3, #0]
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	23b5      	movs	r3, #181	; 0xb5
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	50d1      	str	r1, [r2, r3]
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008fcc:	183b      	adds	r3, r7, r0
 8008fce:	781a      	ldrb	r2, [r3, #0]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	32ae      	adds	r2, #174	; 0xae
 8008fd4:	0092      	lsls	r2, r2, #2
 8008fd6:	58d3      	ldr	r3, [r2, r3]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	220f      	movs	r2, #15
 8008fdc:	18bc      	adds	r4, r7, r2
 8008fde:	6839      	ldr	r1, [r7, #0]
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	0010      	movs	r0, r2
 8008fe4:	4798      	blx	r3
 8008fe6:	0003      	movs	r3, r0
 8008fe8:	7023      	strb	r3, [r4, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 8008fea:	e008      	b.n	8008ffe <USBD_StdItfReq+0xc2>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008fec:	230f      	movs	r3, #15
 8008fee:	18fb      	adds	r3, r7, r3
 8008ff0:	2203      	movs	r2, #3
 8008ff2:	701a      	strb	r2, [r3, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 8008ff4:	e003      	b.n	8008ffe <USBD_StdItfReq+0xc2>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008ff6:	230f      	movs	r3, #15
 8008ff8:	18fb      	adds	r3, r7, r3
 8008ffa:	2203      	movs	r2, #3
 8008ffc:	701a      	strb	r2, [r3, #0]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	88db      	ldrh	r3, [r3, #6]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d117      	bne.n	8009036 <USBD_StdItfReq+0xfa>
 8009006:	230f      	movs	r3, #15
 8009008:	18fb      	adds	r3, r7, r3
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d112      	bne.n	8009036 <USBD_StdItfReq+0xfa>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	0018      	movs	r0, r3
 8009014:	f000 ff12 	bl	8009e3c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009018:	e00d      	b.n	8009036 <USBD_StdItfReq+0xfa>
            USBD_CtlError(pdev, req);
 800901a:	683a      	ldr	r2, [r7, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	0011      	movs	r1, r2
 8009020:	0018      	movs	r0, r3
 8009022:	f000 fe25 	bl	8009c70 <USBD_CtlError>
          break;
 8009026:	e006      	b.n	8009036 <USBD_StdItfReq+0xfa>

        default:
          USBD_CtlError(pdev, req);
 8009028:	683a      	ldr	r2, [r7, #0]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	0011      	movs	r1, r2
 800902e:	0018      	movs	r0, r3
 8009030:	f000 fe1e 	bl	8009c70 <USBD_CtlError>
          break;
 8009034:	e000      	b.n	8009038 <USBD_StdItfReq+0xfc>
          break;
 8009036:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8009038:	e006      	b.n	8009048 <USBD_StdItfReq+0x10c>

    default:
      USBD_CtlError(pdev, req);
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	0011      	movs	r1, r2
 8009040:	0018      	movs	r0, r3
 8009042:	f000 fe15 	bl	8009c70 <USBD_CtlError>
      break;
 8009046:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8009048:	230f      	movs	r3, #15
 800904a:	18fb      	adds	r3, r7, r3
 800904c:	781b      	ldrb	r3, [r3, #0]
}
 800904e:	0018      	movs	r0, r3
 8009050:	46bd      	mov	sp, r7
 8009052:	b004      	add	sp, #16
 8009054:	bdb0      	pop	{r4, r5, r7, pc}

08009056 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009056:	b5b0      	push	{r4, r5, r7, lr}
 8009058:	b084      	sub	sp, #16
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
 800905e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009060:	230f      	movs	r3, #15
 8009062:	18fb      	adds	r3, r7, r3
 8009064:	2200      	movs	r2, #0
 8009066:	701a      	strb	r2, [r3, #0]

  ep_addr = LOBYTE(req->wIndex);
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	889a      	ldrh	r2, [r3, #4]
 800906c:	230e      	movs	r3, #14
 800906e:	18fb      	adds	r3, r7, r3
 8009070:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	001a      	movs	r2, r3
 8009078:	2360      	movs	r3, #96	; 0x60
 800907a:	4013      	ands	r3, r2
 800907c:	2b40      	cmp	r3, #64	; 0x40
 800907e:	d006      	beq.n	800908e <USBD_StdEPReq+0x38>
 8009080:	d900      	bls.n	8009084 <USBD_StdEPReq+0x2e>
 8009082:	e1de      	b.n	8009442 <USBD_StdEPReq+0x3ec>
 8009084:	2b00      	cmp	r3, #0
 8009086:	d039      	beq.n	80090fc <USBD_StdEPReq+0xa6>
 8009088:	2b20      	cmp	r3, #32
 800908a:	d000      	beq.n	800908e <USBD_StdEPReq+0x38>
 800908c:	e1d9      	b.n	8009442 <USBD_StdEPReq+0x3ec>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800908e:	250d      	movs	r5, #13
 8009090:	197c      	adds	r4, r7, r5
 8009092:	230e      	movs	r3, #14
 8009094:	18fb      	adds	r3, r7, r3
 8009096:	781a      	ldrb	r2, [r3, #0]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	0011      	movs	r1, r2
 800909c:	0018      	movs	r0, r3
 800909e:	f7ff fe3a 	bl	8008d16 <USBD_CoreFindEP>
 80090a2:	0003      	movs	r3, r0
 80090a4:	7023      	strb	r3, [r4, #0]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090a6:	197b      	adds	r3, r7, r5
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	2bff      	cmp	r3, #255	; 0xff
 80090ac:	d100      	bne.n	80090b0 <USBD_StdEPReq+0x5a>
 80090ae:	e1cf      	b.n	8009450 <USBD_StdEPReq+0x3fa>
 80090b0:	197b      	adds	r3, r7, r5
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d000      	beq.n	80090ba <USBD_StdEPReq+0x64>
 80090b8:	e1ca      	b.n	8009450 <USBD_StdEPReq+0x3fa>
      {
        pdev->classId = idx;
 80090ba:	197b      	adds	r3, r7, r5
 80090bc:	7819      	ldrb	r1, [r3, #0]
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	23b5      	movs	r3, #181	; 0xb5
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	50d1      	str	r1, [r2, r3]
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80090c6:	0029      	movs	r1, r5
 80090c8:	187b      	adds	r3, r7, r1
 80090ca:	781a      	ldrb	r2, [r3, #0]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	32ae      	adds	r2, #174	; 0xae
 80090d0:	0092      	lsls	r2, r2, #2
 80090d2:	58d3      	ldr	r3, [r2, r3]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d100      	bne.n	80090dc <USBD_StdEPReq+0x86>
 80090da:	e1b9      	b.n	8009450 <USBD_StdEPReq+0x3fa>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80090dc:	187b      	adds	r3, r7, r1
 80090de:	781a      	ldrb	r2, [r3, #0]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	32ae      	adds	r2, #174	; 0xae
 80090e4:	0092      	lsls	r2, r2, #2
 80090e6:	58d3      	ldr	r3, [r2, r3]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	220f      	movs	r2, #15
 80090ec:	18bc      	adds	r4, r7, r2
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	0010      	movs	r0, r2
 80090f4:	4798      	blx	r3
 80090f6:	0003      	movs	r3, r0
 80090f8:	7023      	strb	r3, [r4, #0]
        }
      }
      break;
 80090fa:	e1a9      	b.n	8009450 <USBD_StdEPReq+0x3fa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	785b      	ldrb	r3, [r3, #1]
 8009100:	2b03      	cmp	r3, #3
 8009102:	d007      	beq.n	8009114 <USBD_StdEPReq+0xbe>
 8009104:	dd00      	ble.n	8009108 <USBD_StdEPReq+0xb2>
 8009106:	e194      	b.n	8009432 <USBD_StdEPReq+0x3dc>
 8009108:	2b00      	cmp	r3, #0
 800910a:	d100      	bne.n	800910e <USBD_StdEPReq+0xb8>
 800910c:	e0c9      	b.n	80092a2 <USBD_StdEPReq+0x24c>
 800910e:	2b01      	cmp	r3, #1
 8009110:	d04d      	beq.n	80091ae <USBD_StdEPReq+0x158>
 8009112:	e18e      	b.n	8009432 <USBD_StdEPReq+0x3dc>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	23a7      	movs	r3, #167	; 0xa7
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	5cd3      	ldrb	r3, [r2, r3]
 800911c:	b2db      	uxtb	r3, r3
 800911e:	2b02      	cmp	r3, #2
 8009120:	d002      	beq.n	8009128 <USBD_StdEPReq+0xd2>
 8009122:	2b03      	cmp	r3, #3
 8009124:	d01e      	beq.n	8009164 <USBD_StdEPReq+0x10e>
 8009126:	e03a      	b.n	800919e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009128:	220e      	movs	r2, #14
 800912a:	18bb      	adds	r3, r7, r2
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d011      	beq.n	8009156 <USBD_StdEPReq+0x100>
 8009132:	18bb      	adds	r3, r7, r2
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	2b80      	cmp	r3, #128	; 0x80
 8009138:	d00d      	beq.n	8009156 <USBD_StdEPReq+0x100>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800913a:	18bb      	adds	r3, r7, r2
 800913c:	781a      	ldrb	r2, [r3, #0]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	0011      	movs	r1, r2
 8009142:	0018      	movs	r0, r3
 8009144:	f001 fa91 	bl	800a66a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2180      	movs	r1, #128	; 0x80
 800914c:	0018      	movs	r0, r3
 800914e:	f001 fa8c 	bl	800a66a <USBD_LL_StallEP>
 8009152:	46c0      	nop			; (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009154:	e02a      	b.n	80091ac <USBD_StdEPReq+0x156>
                USBD_CtlError(pdev, req);
 8009156:	683a      	ldr	r2, [r7, #0]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	0011      	movs	r1, r2
 800915c:	0018      	movs	r0, r3
 800915e:	f000 fd87 	bl	8009c70 <USBD_CtlError>
              break;
 8009162:	e023      	b.n	80091ac <USBD_StdEPReq+0x156>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	885b      	ldrh	r3, [r3, #2]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d113      	bne.n	8009194 <USBD_StdEPReq+0x13e>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800916c:	220e      	movs	r2, #14
 800916e:	18bb      	adds	r3, r7, r2
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00e      	beq.n	8009194 <USBD_StdEPReq+0x13e>
 8009176:	18bb      	adds	r3, r7, r2
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	2b80      	cmp	r3, #128	; 0x80
 800917c:	d00a      	beq.n	8009194 <USBD_StdEPReq+0x13e>
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	88db      	ldrh	r3, [r3, #6]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d106      	bne.n	8009194 <USBD_StdEPReq+0x13e>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009186:	18bb      	adds	r3, r7, r2
 8009188:	781a      	ldrb	r2, [r3, #0]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	0011      	movs	r1, r2
 800918e:	0018      	movs	r0, r3
 8009190:	f001 fa6b 	bl	800a66a <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	0018      	movs	r0, r3
 8009198:	f000 fe50 	bl	8009e3c <USBD_CtlSendStatus>

              break;
 800919c:	e006      	b.n	80091ac <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800919e:	683a      	ldr	r2, [r7, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	0011      	movs	r1, r2
 80091a4:	0018      	movs	r0, r3
 80091a6:	f000 fd63 	bl	8009c70 <USBD_CtlError>
              break;
 80091aa:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80091ac:	e148      	b.n	8009440 <USBD_StdEPReq+0x3ea>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	23a7      	movs	r3, #167	; 0xa7
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	5cd3      	ldrb	r3, [r2, r3]
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d002      	beq.n	80091c2 <USBD_StdEPReq+0x16c>
 80091bc:	2b03      	cmp	r3, #3
 80091be:	d01e      	beq.n	80091fe <USBD_StdEPReq+0x1a8>
 80091c0:	e066      	b.n	8009290 <USBD_StdEPReq+0x23a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091c2:	220e      	movs	r2, #14
 80091c4:	18bb      	adds	r3, r7, r2
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d011      	beq.n	80091f0 <USBD_StdEPReq+0x19a>
 80091cc:	18bb      	adds	r3, r7, r2
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	2b80      	cmp	r3, #128	; 0x80
 80091d2:	d00d      	beq.n	80091f0 <USBD_StdEPReq+0x19a>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80091d4:	18bb      	adds	r3, r7, r2
 80091d6:	781a      	ldrb	r2, [r3, #0]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	0011      	movs	r1, r2
 80091dc:	0018      	movs	r0, r3
 80091de:	f001 fa44 	bl	800a66a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2180      	movs	r1, #128	; 0x80
 80091e6:	0018      	movs	r0, r3
 80091e8:	f001 fa3f 	bl	800a66a <USBD_LL_StallEP>
 80091ec:	46c0      	nop			; (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80091ee:	e057      	b.n	80092a0 <USBD_StdEPReq+0x24a>
                USBD_CtlError(pdev, req);
 80091f0:	683a      	ldr	r2, [r7, #0]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	0011      	movs	r1, r2
 80091f6:	0018      	movs	r0, r3
 80091f8:	f000 fd3a 	bl	8009c70 <USBD_CtlError>
              break;
 80091fc:	e050      	b.n	80092a0 <USBD_StdEPReq+0x24a>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	885b      	ldrh	r3, [r3, #2]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d14b      	bne.n	800929e <USBD_StdEPReq+0x248>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009206:	210e      	movs	r1, #14
 8009208:	187b      	adds	r3, r7, r1
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	227f      	movs	r2, #127	; 0x7f
 800920e:	4013      	ands	r3, r2
 8009210:	d006      	beq.n	8009220 <USBD_StdEPReq+0x1ca>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009212:	187b      	adds	r3, r7, r1
 8009214:	781a      	ldrb	r2, [r3, #0]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	0011      	movs	r1, r2
 800921a:	0018      	movs	r0, r3
 800921c:	f001 fa50 	bl	800a6c0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	0018      	movs	r0, r3
 8009224:	f000 fe0a 	bl	8009e3c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009228:	250d      	movs	r5, #13
 800922a:	197c      	adds	r4, r7, r5
 800922c:	230e      	movs	r3, #14
 800922e:	18fb      	adds	r3, r7, r3
 8009230:	781a      	ldrb	r2, [r3, #0]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	0011      	movs	r1, r2
 8009236:	0018      	movs	r0, r3
 8009238:	f7ff fd6d 	bl	8008d16 <USBD_CoreFindEP>
 800923c:	0003      	movs	r3, r0
 800923e:	7023      	strb	r3, [r4, #0]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009240:	197b      	adds	r3, r7, r5
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	2bff      	cmp	r3, #255	; 0xff
 8009246:	d02a      	beq.n	800929e <USBD_StdEPReq+0x248>
 8009248:	197b      	adds	r3, r7, r5
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d126      	bne.n	800929e <USBD_StdEPReq+0x248>
                {
                  pdev->classId = idx;
 8009250:	197b      	adds	r3, r7, r5
 8009252:	7819      	ldrb	r1, [r3, #0]
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	23b5      	movs	r3, #181	; 0xb5
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	50d1      	str	r1, [r2, r3]
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800925c:	0029      	movs	r1, r5
 800925e:	187b      	adds	r3, r7, r1
 8009260:	781a      	ldrb	r2, [r3, #0]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	32ae      	adds	r2, #174	; 0xae
 8009266:	0092      	lsls	r2, r2, #2
 8009268:	58d3      	ldr	r3, [r2, r3]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d016      	beq.n	800929e <USBD_StdEPReq+0x248>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009270:	187b      	adds	r3, r7, r1
 8009272:	781a      	ldrb	r2, [r3, #0]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	32ae      	adds	r2, #174	; 0xae
 8009278:	0092      	lsls	r2, r2, #2
 800927a:	58d3      	ldr	r3, [r2, r3]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	220f      	movs	r2, #15
 8009280:	18bc      	adds	r4, r7, r2
 8009282:	6839      	ldr	r1, [r7, #0]
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	0010      	movs	r0, r2
 8009288:	4798      	blx	r3
 800928a:	0003      	movs	r3, r0
 800928c:	7023      	strb	r3, [r4, #0]
                  }
                }
              }
              break;
 800928e:	e006      	b.n	800929e <USBD_StdEPReq+0x248>

            default:
              USBD_CtlError(pdev, req);
 8009290:	683a      	ldr	r2, [r7, #0]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	0011      	movs	r1, r2
 8009296:	0018      	movs	r0, r3
 8009298:	f000 fcea 	bl	8009c70 <USBD_CtlError>
              break;
 800929c:	e000      	b.n	80092a0 <USBD_StdEPReq+0x24a>
              break;
 800929e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80092a0:	e0ce      	b.n	8009440 <USBD_StdEPReq+0x3ea>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	23a7      	movs	r3, #167	; 0xa7
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	5cd3      	ldrb	r3, [r2, r3]
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d002      	beq.n	80092b6 <USBD_StdEPReq+0x260>
 80092b0:	2b03      	cmp	r3, #3
 80092b2:	d03c      	beq.n	800932e <USBD_StdEPReq+0x2d8>
 80092b4:	e0b5      	b.n	8009422 <USBD_StdEPReq+0x3cc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092b6:	220e      	movs	r2, #14
 80092b8:	18bb      	adds	r3, r7, r2
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00a      	beq.n	80092d6 <USBD_StdEPReq+0x280>
 80092c0:	18bb      	adds	r3, r7, r2
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	2b80      	cmp	r3, #128	; 0x80
 80092c6:	d006      	beq.n	80092d6 <USBD_StdEPReq+0x280>
              {
                USBD_CtlError(pdev, req);
 80092c8:	683a      	ldr	r2, [r7, #0]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	0011      	movs	r1, r2
 80092ce:	0018      	movs	r0, r3
 80092d0:	f000 fcce 	bl	8009c70 <USBD_CtlError>
                break;
 80092d4:	e0ac      	b.n	8009430 <USBD_StdEPReq+0x3da>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092d6:	220e      	movs	r2, #14
 80092d8:	18bb      	adds	r3, r7, r2
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	b25b      	sxtb	r3, r3
 80092de:	2b00      	cmp	r3, #0
 80092e0:	da0c      	bge.n	80092fc <USBD_StdEPReq+0x2a6>
 80092e2:	18bb      	adds	r3, r7, r2
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	227f      	movs	r2, #127	; 0x7f
 80092e8:	401a      	ands	r2, r3
 80092ea:	0013      	movs	r3, r2
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	189b      	adds	r3, r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	3310      	adds	r3, #16
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	18d3      	adds	r3, r2, r3
 80092f8:	3304      	adds	r3, #4
 80092fa:	e00d      	b.n	8009318 <USBD_StdEPReq+0x2c2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80092fc:	230e      	movs	r3, #14
 80092fe:	18fb      	adds	r3, r7, r3
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	227f      	movs	r2, #127	; 0x7f
 8009304:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009306:	0013      	movs	r3, r2
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	189b      	adds	r3, r3, r2
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	3351      	adds	r3, #81	; 0x51
 8009310:	33ff      	adds	r3, #255	; 0xff
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	18d3      	adds	r3, r2, r3
 8009316:	3304      	adds	r3, #4
 8009318:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	2200      	movs	r2, #0
 800931e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009320:	68b9      	ldr	r1, [r7, #8]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2202      	movs	r2, #2
 8009326:	0018      	movs	r0, r3
 8009328:	f000 fd2a 	bl	8009d80 <USBD_CtlSendData>
              break;
 800932c:	e080      	b.n	8009430 <USBD_StdEPReq+0x3da>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800932e:	220e      	movs	r2, #14
 8009330:	18bb      	adds	r3, r7, r2
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	b25b      	sxtb	r3, r3
 8009336:	2b00      	cmp	r3, #0
 8009338:	da14      	bge.n	8009364 <USBD_StdEPReq+0x30e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800933a:	18bb      	adds	r3, r7, r2
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	220f      	movs	r2, #15
 8009340:	401a      	ands	r2, r3
 8009342:	6879      	ldr	r1, [r7, #4]
 8009344:	0013      	movs	r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	189b      	adds	r3, r3, r2
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	18cb      	adds	r3, r1, r3
 800934e:	3324      	adds	r3, #36	; 0x24
 8009350:	881b      	ldrh	r3, [r3, #0]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d11e      	bne.n	8009394 <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	0011      	movs	r1, r2
 800935c:	0018      	movs	r0, r3
 800935e:	f000 fc87 	bl	8009c70 <USBD_CtlError>
                  break;
 8009362:	e065      	b.n	8009430 <USBD_StdEPReq+0x3da>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009364:	230e      	movs	r3, #14
 8009366:	18fb      	adds	r3, r7, r3
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	220f      	movs	r2, #15
 800936c:	401a      	ands	r2, r3
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	23b2      	movs	r3, #178	; 0xb2
 8009372:	0059      	lsls	r1, r3, #1
 8009374:	0013      	movs	r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	189b      	adds	r3, r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	18c3      	adds	r3, r0, r3
 800937e:	185b      	adds	r3, r3, r1
 8009380:	881b      	ldrh	r3, [r3, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d106      	bne.n	8009394 <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 8009386:	683a      	ldr	r2, [r7, #0]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	0011      	movs	r1, r2
 800938c:	0018      	movs	r0, r3
 800938e:	f000 fc6f 	bl	8009c70 <USBD_CtlError>
                  break;
 8009392:	e04d      	b.n	8009430 <USBD_StdEPReq+0x3da>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009394:	220e      	movs	r2, #14
 8009396:	18bb      	adds	r3, r7, r2
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	b25b      	sxtb	r3, r3
 800939c:	2b00      	cmp	r3, #0
 800939e:	da0c      	bge.n	80093ba <USBD_StdEPReq+0x364>
 80093a0:	18bb      	adds	r3, r7, r2
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	227f      	movs	r2, #127	; 0x7f
 80093a6:	401a      	ands	r2, r3
 80093a8:	0013      	movs	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	189b      	adds	r3, r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	3310      	adds	r3, #16
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	18d3      	adds	r3, r2, r3
 80093b6:	3304      	adds	r3, #4
 80093b8:	e00d      	b.n	80093d6 <USBD_StdEPReq+0x380>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80093ba:	230e      	movs	r3, #14
 80093bc:	18fb      	adds	r3, r7, r3
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	227f      	movs	r2, #127	; 0x7f
 80093c2:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093c4:	0013      	movs	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	189b      	adds	r3, r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	3351      	adds	r3, #81	; 0x51
 80093ce:	33ff      	adds	r3, #255	; 0xff
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	18d3      	adds	r3, r2, r3
 80093d4:	3304      	adds	r3, #4
 80093d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80093d8:	220e      	movs	r2, #14
 80093da:	18bb      	adds	r3, r7, r2
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d003      	beq.n	80093ea <USBD_StdEPReq+0x394>
 80093e2:	18bb      	adds	r3, r7, r2
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	2b80      	cmp	r3, #128	; 0x80
 80093e8:	d103      	bne.n	80093f2 <USBD_StdEPReq+0x39c>
              {
                pep->status = 0x0000U;
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	2200      	movs	r2, #0
 80093ee:	601a      	str	r2, [r3, #0]
 80093f0:	e010      	b.n	8009414 <USBD_StdEPReq+0x3be>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80093f2:	230e      	movs	r3, #14
 80093f4:	18fb      	adds	r3, r7, r3
 80093f6:	781a      	ldrb	r2, [r3, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	0011      	movs	r1, r2
 80093fc:	0018      	movs	r0, r3
 80093fe:	f001 f98a 	bl	800a716 <USBD_LL_IsStallEP>
 8009402:	1e03      	subs	r3, r0, #0
 8009404:	d003      	beq.n	800940e <USBD_StdEPReq+0x3b8>
              {
                pep->status = 0x0001U;
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	2201      	movs	r2, #1
 800940a:	601a      	str	r2, [r3, #0]
 800940c:	e002      	b.n	8009414 <USBD_StdEPReq+0x3be>
              }
              else
              {
                pep->status = 0x0000U;
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	2200      	movs	r2, #0
 8009412:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009414:	68b9      	ldr	r1, [r7, #8]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2202      	movs	r2, #2
 800941a:	0018      	movs	r0, r3
 800941c:	f000 fcb0 	bl	8009d80 <USBD_CtlSendData>
              break;
 8009420:	e006      	b.n	8009430 <USBD_StdEPReq+0x3da>

            default:
              USBD_CtlError(pdev, req);
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	0011      	movs	r1, r2
 8009428:	0018      	movs	r0, r3
 800942a:	f000 fc21 	bl	8009c70 <USBD_CtlError>
              break;
 800942e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8009430:	e006      	b.n	8009440 <USBD_StdEPReq+0x3ea>

        default:
          USBD_CtlError(pdev, req);
 8009432:	683a      	ldr	r2, [r7, #0]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	0011      	movs	r1, r2
 8009438:	0018      	movs	r0, r3
 800943a:	f000 fc19 	bl	8009c70 <USBD_CtlError>
          break;
 800943e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8009440:	e007      	b.n	8009452 <USBD_StdEPReq+0x3fc>

    default:
      USBD_CtlError(pdev, req);
 8009442:	683a      	ldr	r2, [r7, #0]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	0011      	movs	r1, r2
 8009448:	0018      	movs	r0, r3
 800944a:	f000 fc11 	bl	8009c70 <USBD_CtlError>
      break;
 800944e:	e000      	b.n	8009452 <USBD_StdEPReq+0x3fc>
      break;
 8009450:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8009452:	230f      	movs	r3, #15
 8009454:	18fb      	adds	r3, r7, r3
 8009456:	781b      	ldrb	r3, [r3, #0]
}
 8009458:	0018      	movs	r0, r3
 800945a:	46bd      	mov	sp, r7
 800945c:	b004      	add	sp, #16
 800945e:	bdb0      	pop	{r4, r5, r7, pc}

08009460 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800946a:	2308      	movs	r3, #8
 800946c:	18fb      	adds	r3, r7, r3
 800946e:	2200      	movs	r2, #0
 8009470:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8009472:	2300      	movs	r3, #0
 8009474:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009476:	230b      	movs	r3, #11
 8009478:	18fb      	adds	r3, r7, r3
 800947a:	2200      	movs	r2, #0
 800947c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	885b      	ldrh	r3, [r3, #2]
 8009482:	0a1b      	lsrs	r3, r3, #8
 8009484:	b29b      	uxth	r3, r3
 8009486:	2b0f      	cmp	r3, #15
 8009488:	d900      	bls.n	800948c <USBD_GetDescriptor+0x2c>
 800948a:	e17b      	b.n	8009784 <USBD_GetDescriptor+0x324>
 800948c:	009a      	lsls	r2, r3, #2
 800948e:	4bdd      	ldr	r3, [pc, #884]	; (8009804 <USBD_GetDescriptor+0x3a4>)
 8009490:	18d3      	adds	r3, r2, r3
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	469f      	mov	pc, r3
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	23ad      	movs	r3, #173	; 0xad
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	58d3      	ldr	r3, [r2, r3]
 800949e:	69db      	ldr	r3, [r3, #28]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00d      	beq.n	80094c0 <USBD_GetDescriptor+0x60>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	23ad      	movs	r3, #173	; 0xad
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	58d3      	ldr	r3, [r2, r3]
 80094ac:	69db      	ldr	r3, [r3, #28]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	7c12      	ldrb	r2, [r2, #16]
 80094b2:	2108      	movs	r1, #8
 80094b4:	1879      	adds	r1, r7, r1
 80094b6:	0010      	movs	r0, r2
 80094b8:	4798      	blx	r3
 80094ba:	0003      	movs	r3, r0
 80094bc:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094be:	e16e      	b.n	800979e <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 80094c0:	683a      	ldr	r2, [r7, #0]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	0011      	movs	r1, r2
 80094c6:	0018      	movs	r0, r3
 80094c8:	f000 fbd2 	bl	8009c70 <USBD_CtlError>
        err++;
 80094cc:	210b      	movs	r1, #11
 80094ce:	187b      	adds	r3, r7, r1
 80094d0:	781a      	ldrb	r2, [r3, #0]
 80094d2:	187b      	adds	r3, r7, r1
 80094d4:	3201      	adds	r2, #1
 80094d6:	701a      	strb	r2, [r3, #0]
      break;
 80094d8:	e161      	b.n	800979e <USBD_GetDescriptor+0x33e>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	23ad      	movs	r3, #173	; 0xad
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	58d3      	ldr	r3, [r2, r3]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	7c12      	ldrb	r2, [r2, #16]
 80094e8:	2108      	movs	r1, #8
 80094ea:	1879      	adds	r1, r7, r1
 80094ec:	0010      	movs	r0, r2
 80094ee:	4798      	blx	r3
 80094f0:	0003      	movs	r3, r0
 80094f2:	60fb      	str	r3, [r7, #12]
      break;
 80094f4:	e153      	b.n	800979e <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	7c1b      	ldrb	r3, [r3, #16]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d10f      	bne.n	800951e <USBD_GetDescriptor+0xbe>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	23ae      	movs	r3, #174	; 0xae
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	58d3      	ldr	r3, [r2, r3]
 8009506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009508:	2208      	movs	r2, #8
 800950a:	18ba      	adds	r2, r7, r2
 800950c:	0010      	movs	r0, r2
 800950e:	4798      	blx	r3
 8009510:	0003      	movs	r3, r0
 8009512:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	3301      	adds	r3, #1
 8009518:	2202      	movs	r2, #2
 800951a:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800951c:	e13f      	b.n	800979e <USBD_GetDescriptor+0x33e>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	23ae      	movs	r3, #174	; 0xae
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	58d3      	ldr	r3, [r2, r3]
 8009526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009528:	2208      	movs	r2, #8
 800952a:	18ba      	adds	r2, r7, r2
 800952c:	0010      	movs	r0, r2
 800952e:	4798      	blx	r3
 8009530:	0003      	movs	r3, r0
 8009532:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	3301      	adds	r3, #1
 8009538:	2202      	movs	r2, #2
 800953a:	701a      	strb	r2, [r3, #0]
      break;
 800953c:	e12f      	b.n	800979e <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	885b      	ldrh	r3, [r3, #2]
 8009542:	b2db      	uxtb	r3, r3
 8009544:	2b05      	cmp	r3, #5
 8009546:	d900      	bls.n	800954a <USBD_GetDescriptor+0xea>
 8009548:	e0d0      	b.n	80096ec <USBD_GetDescriptor+0x28c>
 800954a:	009a      	lsls	r2, r3, #2
 800954c:	4bae      	ldr	r3, [pc, #696]	; (8009808 <USBD_GetDescriptor+0x3a8>)
 800954e:	18d3      	adds	r3, r2, r3
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	23ad      	movs	r3, #173	; 0xad
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	58d3      	ldr	r3, [r2, r3]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00d      	beq.n	800957e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	23ad      	movs	r3, #173	; 0xad
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	58d3      	ldr	r3, [r2, r3]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	7c12      	ldrb	r2, [r2, #16]
 8009570:	2108      	movs	r1, #8
 8009572:	1879      	adds	r1, r7, r1
 8009574:	0010      	movs	r0, r2
 8009576:	4798      	blx	r3
 8009578:	0003      	movs	r3, r0
 800957a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800957c:	e0c3      	b.n	8009706 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	0011      	movs	r1, r2
 8009584:	0018      	movs	r0, r3
 8009586:	f000 fb73 	bl	8009c70 <USBD_CtlError>
            err++;
 800958a:	210b      	movs	r1, #11
 800958c:	187b      	adds	r3, r7, r1
 800958e:	781a      	ldrb	r2, [r3, #0]
 8009590:	187b      	adds	r3, r7, r1
 8009592:	3201      	adds	r2, #1
 8009594:	701a      	strb	r2, [r3, #0]
          break;
 8009596:	e0b6      	b.n	8009706 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	23ad      	movs	r3, #173	; 0xad
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	58d3      	ldr	r3, [r2, r3]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00d      	beq.n	80095c2 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	23ad      	movs	r3, #173	; 0xad
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	58d3      	ldr	r3, [r2, r3]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	7c12      	ldrb	r2, [r2, #16]
 80095b4:	2108      	movs	r1, #8
 80095b6:	1879      	adds	r1, r7, r1
 80095b8:	0010      	movs	r0, r2
 80095ba:	4798      	blx	r3
 80095bc:	0003      	movs	r3, r0
 80095be:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095c0:	e0a1      	b.n	8009706 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 80095c2:	683a      	ldr	r2, [r7, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	0011      	movs	r1, r2
 80095c8:	0018      	movs	r0, r3
 80095ca:	f000 fb51 	bl	8009c70 <USBD_CtlError>
            err++;
 80095ce:	210b      	movs	r1, #11
 80095d0:	187b      	adds	r3, r7, r1
 80095d2:	781a      	ldrb	r2, [r3, #0]
 80095d4:	187b      	adds	r3, r7, r1
 80095d6:	3201      	adds	r2, #1
 80095d8:	701a      	strb	r2, [r3, #0]
          break;
 80095da:	e094      	b.n	8009706 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	23ad      	movs	r3, #173	; 0xad
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	58d3      	ldr	r3, [r2, r3]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00d      	beq.n	8009606 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	23ad      	movs	r3, #173	; 0xad
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	58d3      	ldr	r3, [r2, r3]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	7c12      	ldrb	r2, [r2, #16]
 80095f8:	2108      	movs	r1, #8
 80095fa:	1879      	adds	r1, r7, r1
 80095fc:	0010      	movs	r0, r2
 80095fe:	4798      	blx	r3
 8009600:	0003      	movs	r3, r0
 8009602:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009604:	e07f      	b.n	8009706 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	0011      	movs	r1, r2
 800960c:	0018      	movs	r0, r3
 800960e:	f000 fb2f 	bl	8009c70 <USBD_CtlError>
            err++;
 8009612:	210b      	movs	r1, #11
 8009614:	187b      	adds	r3, r7, r1
 8009616:	781a      	ldrb	r2, [r3, #0]
 8009618:	187b      	adds	r3, r7, r1
 800961a:	3201      	adds	r2, #1
 800961c:	701a      	strb	r2, [r3, #0]
          break;
 800961e:	e072      	b.n	8009706 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	23ad      	movs	r3, #173	; 0xad
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	58d3      	ldr	r3, [r2, r3]
 8009628:	691b      	ldr	r3, [r3, #16]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00d      	beq.n	800964a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	23ad      	movs	r3, #173	; 0xad
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	58d3      	ldr	r3, [r2, r3]
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	7c12      	ldrb	r2, [r2, #16]
 800963c:	2108      	movs	r1, #8
 800963e:	1879      	adds	r1, r7, r1
 8009640:	0010      	movs	r0, r2
 8009642:	4798      	blx	r3
 8009644:	0003      	movs	r3, r0
 8009646:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009648:	e05d      	b.n	8009706 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800964a:	683a      	ldr	r2, [r7, #0]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	0011      	movs	r1, r2
 8009650:	0018      	movs	r0, r3
 8009652:	f000 fb0d 	bl	8009c70 <USBD_CtlError>
            err++;
 8009656:	210b      	movs	r1, #11
 8009658:	187b      	adds	r3, r7, r1
 800965a:	781a      	ldrb	r2, [r3, #0]
 800965c:	187b      	adds	r3, r7, r1
 800965e:	3201      	adds	r2, #1
 8009660:	701a      	strb	r2, [r3, #0]
          break;
 8009662:	e050      	b.n	8009706 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	23ad      	movs	r3, #173	; 0xad
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	58d3      	ldr	r3, [r2, r3]
 800966c:	695b      	ldr	r3, [r3, #20]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00d      	beq.n	800968e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	23ad      	movs	r3, #173	; 0xad
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	58d3      	ldr	r3, [r2, r3]
 800967a:	695b      	ldr	r3, [r3, #20]
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	7c12      	ldrb	r2, [r2, #16]
 8009680:	2108      	movs	r1, #8
 8009682:	1879      	adds	r1, r7, r1
 8009684:	0010      	movs	r0, r2
 8009686:	4798      	blx	r3
 8009688:	0003      	movs	r3, r0
 800968a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800968c:	e03b      	b.n	8009706 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	0011      	movs	r1, r2
 8009694:	0018      	movs	r0, r3
 8009696:	f000 faeb 	bl	8009c70 <USBD_CtlError>
            err++;
 800969a:	210b      	movs	r1, #11
 800969c:	187b      	adds	r3, r7, r1
 800969e:	781a      	ldrb	r2, [r3, #0]
 80096a0:	187b      	adds	r3, r7, r1
 80096a2:	3201      	adds	r2, #1
 80096a4:	701a      	strb	r2, [r3, #0]
          break;
 80096a6:	e02e      	b.n	8009706 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	23ad      	movs	r3, #173	; 0xad
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	58d3      	ldr	r3, [r2, r3]
 80096b0:	699b      	ldr	r3, [r3, #24]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00d      	beq.n	80096d2 <USBD_GetDescriptor+0x272>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	23ad      	movs	r3, #173	; 0xad
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	58d3      	ldr	r3, [r2, r3]
 80096be:	699b      	ldr	r3, [r3, #24]
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	7c12      	ldrb	r2, [r2, #16]
 80096c4:	2108      	movs	r1, #8
 80096c6:	1879      	adds	r1, r7, r1
 80096c8:	0010      	movs	r0, r2
 80096ca:	4798      	blx	r3
 80096cc:	0003      	movs	r3, r0
 80096ce:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096d0:	e019      	b.n	8009706 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 80096d2:	683a      	ldr	r2, [r7, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	0011      	movs	r1, r2
 80096d8:	0018      	movs	r0, r3
 80096da:	f000 fac9 	bl	8009c70 <USBD_CtlError>
            err++;
 80096de:	210b      	movs	r1, #11
 80096e0:	187b      	adds	r3, r7, r1
 80096e2:	781a      	ldrb	r2, [r3, #0]
 80096e4:	187b      	adds	r3, r7, r1
 80096e6:	3201      	adds	r2, #1
 80096e8:	701a      	strb	r2, [r3, #0]
          break;
 80096ea:	e00c      	b.n	8009706 <USBD_GetDescriptor+0x2a6>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80096ec:	683a      	ldr	r2, [r7, #0]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	0011      	movs	r1, r2
 80096f2:	0018      	movs	r0, r3
 80096f4:	f000 fabc 	bl	8009c70 <USBD_CtlError>
          err++;
 80096f8:	210b      	movs	r1, #11
 80096fa:	187b      	adds	r3, r7, r1
 80096fc:	781a      	ldrb	r2, [r3, #0]
 80096fe:	187b      	adds	r3, r7, r1
 8009700:	3201      	adds	r2, #1
 8009702:	701a      	strb	r2, [r3, #0]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009704:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8009706:	e04a      	b.n	800979e <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	7c1b      	ldrb	r3, [r3, #16]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10b      	bne.n	8009728 <USBD_GetDescriptor+0x2c8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	23ae      	movs	r3, #174	; 0xae
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	58d3      	ldr	r3, [r2, r3]
 8009718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800971a:	2208      	movs	r2, #8
 800971c:	18ba      	adds	r2, r7, r2
 800971e:	0010      	movs	r0, r2
 8009720:	4798      	blx	r3
 8009722:	0003      	movs	r3, r0
 8009724:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009726:	e03a      	b.n	800979e <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 8009728:	683a      	ldr	r2, [r7, #0]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	0011      	movs	r1, r2
 800972e:	0018      	movs	r0, r3
 8009730:	f000 fa9e 	bl	8009c70 <USBD_CtlError>
        err++;
 8009734:	210b      	movs	r1, #11
 8009736:	187b      	adds	r3, r7, r1
 8009738:	781a      	ldrb	r2, [r3, #0]
 800973a:	187b      	adds	r3, r7, r1
 800973c:	3201      	adds	r2, #1
 800973e:	701a      	strb	r2, [r3, #0]
      break;
 8009740:	e02d      	b.n	800979e <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	7c1b      	ldrb	r3, [r3, #16]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10f      	bne.n	800976a <USBD_GetDescriptor+0x30a>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	23ae      	movs	r3, #174	; 0xae
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	58d3      	ldr	r3, [r2, r3]
 8009752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009754:	2208      	movs	r2, #8
 8009756:	18ba      	adds	r2, r7, r2
 8009758:	0010      	movs	r0, r2
 800975a:	4798      	blx	r3
 800975c:	0003      	movs	r3, r0
 800975e:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	3301      	adds	r3, #1
 8009764:	2207      	movs	r2, #7
 8009766:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009768:	e019      	b.n	800979e <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 800976a:	683a      	ldr	r2, [r7, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	0011      	movs	r1, r2
 8009770:	0018      	movs	r0, r3
 8009772:	f000 fa7d 	bl	8009c70 <USBD_CtlError>
        err++;
 8009776:	210b      	movs	r1, #11
 8009778:	187b      	adds	r3, r7, r1
 800977a:	781a      	ldrb	r2, [r3, #0]
 800977c:	187b      	adds	r3, r7, r1
 800977e:	3201      	adds	r2, #1
 8009780:	701a      	strb	r2, [r3, #0]
      break;
 8009782:	e00c      	b.n	800979e <USBD_GetDescriptor+0x33e>

    default:
      USBD_CtlError(pdev, req);
 8009784:	683a      	ldr	r2, [r7, #0]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	0011      	movs	r1, r2
 800978a:	0018      	movs	r0, r3
 800978c:	f000 fa70 	bl	8009c70 <USBD_CtlError>
      err++;
 8009790:	210b      	movs	r1, #11
 8009792:	187b      	adds	r3, r7, r1
 8009794:	781a      	ldrb	r2, [r3, #0]
 8009796:	187b      	adds	r3, r7, r1
 8009798:	3201      	adds	r2, #1
 800979a:	701a      	strb	r2, [r3, #0]
      break;
 800979c:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800979e:	230b      	movs	r3, #11
 80097a0:	18fb      	adds	r3, r7, r3
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d131      	bne.n	800980c <USBD_GetDescriptor+0x3ac>
  {
    return;
  }

  if (req->wLength != 0U)
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	88db      	ldrh	r3, [r3, #6]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d023      	beq.n	80097f8 <USBD_GetDescriptor+0x398>
  {
    if (len != 0U)
 80097b0:	2108      	movs	r1, #8
 80097b2:	187b      	adds	r3, r7, r1
 80097b4:	881b      	ldrh	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d017      	beq.n	80097ea <USBD_GetDescriptor+0x38a>
    {
      len = MIN(len, req->wLength);
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	88da      	ldrh	r2, [r3, #6]
 80097be:	187b      	adds	r3, r7, r1
 80097c0:	881b      	ldrh	r3, [r3, #0]
 80097c2:	1c18      	adds	r0, r3, #0
 80097c4:	1c11      	adds	r1, r2, #0
 80097c6:	b28a      	uxth	r2, r1
 80097c8:	b283      	uxth	r3, r0
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d900      	bls.n	80097d0 <USBD_GetDescriptor+0x370>
 80097ce:	1c01      	adds	r1, r0, #0
 80097d0:	b28a      	uxth	r2, r1
 80097d2:	2108      	movs	r1, #8
 80097d4:	187b      	adds	r3, r7, r1
 80097d6:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80097d8:	187b      	adds	r3, r7, r1
 80097da:	881b      	ldrh	r3, [r3, #0]
 80097dc:	001a      	movs	r2, r3
 80097de:	68f9      	ldr	r1, [r7, #12]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	0018      	movs	r0, r3
 80097e4:	f000 facc 	bl	8009d80 <USBD_CtlSendData>
 80097e8:	e011      	b.n	800980e <USBD_GetDescriptor+0x3ae>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80097ea:	683a      	ldr	r2, [r7, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	0011      	movs	r1, r2
 80097f0:	0018      	movs	r0, r3
 80097f2:	f000 fa3d 	bl	8009c70 <USBD_CtlError>
 80097f6:	e00a      	b.n	800980e <USBD_GetDescriptor+0x3ae>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	0018      	movs	r0, r3
 80097fc:	f000 fb1e 	bl	8009e3c <USBD_CtlSendStatus>
 8009800:	e005      	b.n	800980e <USBD_GetDescriptor+0x3ae>
 8009802:	46c0      	nop			; (mov r8, r8)
 8009804:	0800aba4 	.word	0x0800aba4
 8009808:	0800abe4 	.word	0x0800abe4
    return;
 800980c:	46c0      	nop			; (mov r8, r8)
  }
}
 800980e:	46bd      	mov	sp, r7
 8009810:	b004      	add	sp, #16
 8009812:	bd80      	pop	{r7, pc}

08009814 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009814:	b590      	push	{r4, r7, lr}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	889b      	ldrh	r3, [r3, #4]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d13e      	bne.n	80098a4 <USBD_SetAddress+0x90>
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	88db      	ldrh	r3, [r3, #6]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d13a      	bne.n	80098a4 <USBD_SetAddress+0x90>
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	885b      	ldrh	r3, [r3, #2]
 8009832:	2b7f      	cmp	r3, #127	; 0x7f
 8009834:	d836      	bhi.n	80098a4 <USBD_SetAddress+0x90>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	885b      	ldrh	r3, [r3, #2]
 800983a:	b2da      	uxtb	r2, r3
 800983c:	230f      	movs	r3, #15
 800983e:	18fb      	adds	r3, r7, r3
 8009840:	217f      	movs	r1, #127	; 0x7f
 8009842:	400a      	ands	r2, r1
 8009844:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	23a7      	movs	r3, #167	; 0xa7
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	5cd3      	ldrb	r3, [r2, r3]
 800984e:	b2db      	uxtb	r3, r3
 8009850:	2b03      	cmp	r3, #3
 8009852:	d106      	bne.n	8009862 <USBD_SetAddress+0x4e>
    {
      USBD_CtlError(pdev, req);
 8009854:	683a      	ldr	r2, [r7, #0]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	0011      	movs	r1, r2
 800985a:	0018      	movs	r0, r3
 800985c:	f000 fa08 	bl	8009c70 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009860:	e027      	b.n	80098b2 <USBD_SetAddress+0x9e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	240f      	movs	r4, #15
 8009866:	193a      	adds	r2, r7, r4
 8009868:	4914      	ldr	r1, [pc, #80]	; (80098bc <USBD_SetAddress+0xa8>)
 800986a:	7812      	ldrb	r2, [r2, #0]
 800986c:	545a      	strb	r2, [r3, r1]
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800986e:	193b      	adds	r3, r7, r4
 8009870:	781a      	ldrb	r2, [r3, #0]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	0011      	movs	r1, r2
 8009876:	0018      	movs	r0, r3
 8009878:	f000 ff7d 	bl	800a776 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	0018      	movs	r0, r3
 8009880:	f000 fadc 	bl	8009e3c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009884:	193b      	adds	r3, r7, r4
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d005      	beq.n	8009898 <USBD_SetAddress+0x84>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	23a7      	movs	r3, #167	; 0xa7
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	2102      	movs	r1, #2
 8009894:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009896:	e00c      	b.n	80098b2 <USBD_SetAddress+0x9e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	23a7      	movs	r3, #167	; 0xa7
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	2101      	movs	r1, #1
 80098a0:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098a2:	e006      	b.n	80098b2 <USBD_SetAddress+0x9e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80098a4:	683a      	ldr	r2, [r7, #0]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	0011      	movs	r1, r2
 80098aa:	0018      	movs	r0, r3
 80098ac:	f000 f9e0 	bl	8009c70 <USBD_CtlError>
  }
}
 80098b0:	46c0      	nop			; (mov r8, r8)
 80098b2:	46c0      	nop			; (mov r8, r8)
 80098b4:	46bd      	mov	sp, r7
 80098b6:	b005      	add	sp, #20
 80098b8:	bd90      	pop	{r4, r7, pc}
 80098ba:	46c0      	nop			; (mov r8, r8)
 80098bc:	0000029e 	.word	0x0000029e

080098c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098c0:	b5b0      	push	{r4, r5, r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098ca:	230f      	movs	r3, #15
 80098cc:	18fb      	adds	r3, r7, r3
 80098ce:	2200      	movs	r2, #0
 80098d0:	701a      	strb	r2, [r3, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	885b      	ldrh	r3, [r3, #2]
 80098d6:	b2da      	uxtb	r2, r3
 80098d8:	4b5f      	ldr	r3, [pc, #380]	; (8009a58 <USBD_SetConfig+0x198>)
 80098da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80098dc:	4b5e      	ldr	r3, [pc, #376]	; (8009a58 <USBD_SetConfig+0x198>)
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d907      	bls.n	80098f4 <USBD_SetConfig+0x34>
  {
    USBD_CtlError(pdev, req);
 80098e4:	683a      	ldr	r2, [r7, #0]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	0011      	movs	r1, r2
 80098ea:	0018      	movs	r0, r3
 80098ec:	f000 f9c0 	bl	8009c70 <USBD_CtlError>
    return USBD_FAIL;
 80098f0:	2303      	movs	r3, #3
 80098f2:	e0ac      	b.n	8009a4e <USBD_SetConfig+0x18e>
  }

  switch (pdev->dev_state)
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	23a7      	movs	r3, #167	; 0xa7
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	5cd3      	ldrb	r3, [r2, r3]
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d002      	beq.n	8009908 <USBD_SetConfig+0x48>
 8009902:	2b03      	cmp	r3, #3
 8009904:	d033      	beq.n	800996e <USBD_SetConfig+0xae>
 8009906:	e08d      	b.n	8009a24 <USBD_SetConfig+0x164>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009908:	4b53      	ldr	r3, [pc, #332]	; (8009a58 <USBD_SetConfig+0x198>)
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d029      	beq.n	8009964 <USBD_SetConfig+0xa4>
      {
        pdev->dev_config = cfgidx;
 8009910:	4b51      	ldr	r3, [pc, #324]	; (8009a58 <USBD_SetConfig+0x198>)
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	001a      	movs	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800991a:	4b4f      	ldr	r3, [pc, #316]	; (8009a58 <USBD_SetConfig+0x198>)
 800991c:	781a      	ldrb	r2, [r3, #0]
 800991e:	250f      	movs	r5, #15
 8009920:	197c      	adds	r4, r7, r5
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	0011      	movs	r1, r2
 8009926:	0018      	movs	r0, r3
 8009928:	f7fe feb2 	bl	8008690 <USBD_SetClassConfig>
 800992c:	0003      	movs	r3, r0
 800992e:	7023      	strb	r3, [r4, #0]

        if (ret != USBD_OK)
 8009930:	197b      	adds	r3, r7, r5
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d00b      	beq.n	8009950 <USBD_SetConfig+0x90>
        {
          USBD_CtlError(pdev, req);
 8009938:	683a      	ldr	r2, [r7, #0]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	0011      	movs	r1, r2
 800993e:	0018      	movs	r0, r3
 8009940:	f000 f996 	bl	8009c70 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	23a7      	movs	r3, #167	; 0xa7
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	2102      	movs	r1, #2
 800994c:	54d1      	strb	r1, [r2, r3]
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800994e:	e07b      	b.n	8009a48 <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	0018      	movs	r0, r3
 8009954:	f000 fa72 	bl	8009e3c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	23a7      	movs	r3, #167	; 0xa7
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	2103      	movs	r1, #3
 8009960:	54d1      	strb	r1, [r2, r3]
      break;
 8009962:	e071      	b.n	8009a48 <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	0018      	movs	r0, r3
 8009968:	f000 fa68 	bl	8009e3c <USBD_CtlSendStatus>
      break;
 800996c:	e06c      	b.n	8009a48 <USBD_SetConfig+0x188>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800996e:	4b3a      	ldr	r3, [pc, #232]	; (8009a58 <USBD_SetConfig+0x198>)
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d115      	bne.n	80099a2 <USBD_SetConfig+0xe2>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	23a7      	movs	r3, #167	; 0xa7
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	2102      	movs	r1, #2
 800997e:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 8009980:	4b35      	ldr	r3, [pc, #212]	; (8009a58 <USBD_SetConfig+0x198>)
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	001a      	movs	r2, r3
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800998a:	4b33      	ldr	r3, [pc, #204]	; (8009a58 <USBD_SetConfig+0x198>)
 800998c:	781a      	ldrb	r2, [r3, #0]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	0011      	movs	r1, r2
 8009992:	0018      	movs	r0, r3
 8009994:	f7fe fea1 	bl	80086da <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	0018      	movs	r0, r3
 800999c:	f000 fa4e 	bl	8009e3c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80099a0:	e052      	b.n	8009a48 <USBD_SetConfig+0x188>
      else if (cfgidx != pdev->dev_config)
 80099a2:	4b2d      	ldr	r3, [pc, #180]	; (8009a58 <USBD_SetConfig+0x198>)
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	001a      	movs	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d034      	beq.n	8009a1a <USBD_SetConfig+0x15a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	b2da      	uxtb	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	0011      	movs	r1, r2
 80099ba:	0018      	movs	r0, r3
 80099bc:	f7fe fe8d 	bl	80086da <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80099c0:	4b25      	ldr	r3, [pc, #148]	; (8009a58 <USBD_SetConfig+0x198>)
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	001a      	movs	r2, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80099ca:	4b23      	ldr	r3, [pc, #140]	; (8009a58 <USBD_SetConfig+0x198>)
 80099cc:	781a      	ldrb	r2, [r3, #0]
 80099ce:	250f      	movs	r5, #15
 80099d0:	197c      	adds	r4, r7, r5
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	0011      	movs	r1, r2
 80099d6:	0018      	movs	r0, r3
 80099d8:	f7fe fe5a 	bl	8008690 <USBD_SetClassConfig>
 80099dc:	0003      	movs	r3, r0
 80099de:	7023      	strb	r3, [r4, #0]
        if (ret != USBD_OK)
 80099e0:	197b      	adds	r3, r7, r5
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d013      	beq.n	8009a10 <USBD_SetConfig+0x150>
          USBD_CtlError(pdev, req);
 80099e8:	683a      	ldr	r2, [r7, #0]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	0011      	movs	r1, r2
 80099ee:	0018      	movs	r0, r3
 80099f0:	f000 f93e 	bl	8009c70 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	b2da      	uxtb	r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	0011      	movs	r1, r2
 80099fe:	0018      	movs	r0, r3
 8009a00:	f7fe fe6b 	bl	80086da <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	23a7      	movs	r3, #167	; 0xa7
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	2102      	movs	r1, #2
 8009a0c:	54d1      	strb	r1, [r2, r3]
      break;
 8009a0e:	e01b      	b.n	8009a48 <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	0018      	movs	r0, r3
 8009a14:	f000 fa12 	bl	8009e3c <USBD_CtlSendStatus>
      break;
 8009a18:	e016      	b.n	8009a48 <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	0018      	movs	r0, r3
 8009a1e:	f000 fa0d 	bl	8009e3c <USBD_CtlSendStatus>
      break;
 8009a22:	e011      	b.n	8009a48 <USBD_SetConfig+0x188>

    default:
      USBD_CtlError(pdev, req);
 8009a24:	683a      	ldr	r2, [r7, #0]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	0011      	movs	r1, r2
 8009a2a:	0018      	movs	r0, r3
 8009a2c:	f000 f920 	bl	8009c70 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a30:	4b09      	ldr	r3, [pc, #36]	; (8009a58 <USBD_SetConfig+0x198>)
 8009a32:	781a      	ldrb	r2, [r3, #0]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	0011      	movs	r1, r2
 8009a38:	0018      	movs	r0, r3
 8009a3a:	f7fe fe4e 	bl	80086da <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009a3e:	230f      	movs	r3, #15
 8009a40:	18fb      	adds	r3, r7, r3
 8009a42:	2203      	movs	r2, #3
 8009a44:	701a      	strb	r2, [r3, #0]
      break;
 8009a46:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8009a48:	230f      	movs	r3, #15
 8009a4a:	18fb      	adds	r3, r7, r3
 8009a4c:	781b      	ldrb	r3, [r3, #0]
}
 8009a4e:	0018      	movs	r0, r3
 8009a50:	46bd      	mov	sp, r7
 8009a52:	b004      	add	sp, #16
 8009a54:	bdb0      	pop	{r4, r5, r7, pc}
 8009a56:	46c0      	nop			; (mov r8, r8)
 8009a58:	20000388 	.word	0x20000388

08009a5c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	88db      	ldrh	r3, [r3, #6]
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d006      	beq.n	8009a7c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	0011      	movs	r1, r2
 8009a74:	0018      	movs	r0, r3
 8009a76:	f000 f8fb 	bl	8009c70 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009a7a:	e027      	b.n	8009acc <USBD_GetConfig+0x70>
    switch (pdev->dev_state)
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	23a7      	movs	r3, #167	; 0xa7
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	5cd3      	ldrb	r3, [r2, r3]
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	dc02      	bgt.n	8009a90 <USBD_GetConfig+0x34>
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	dc03      	bgt.n	8009a96 <USBD_GetConfig+0x3a>
 8009a8e:	e016      	b.n	8009abe <USBD_GetConfig+0x62>
 8009a90:	2b03      	cmp	r3, #3
 8009a92:	d00c      	beq.n	8009aae <USBD_GetConfig+0x52>
 8009a94:	e013      	b.n	8009abe <USBD_GetConfig+0x62>
        pdev->dev_default_config = 0U;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	3308      	adds	r3, #8
 8009aa0:	0019      	movs	r1, r3
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	0018      	movs	r0, r3
 8009aa8:	f000 f96a 	bl	8009d80 <USBD_CtlSendData>
        break;
 8009aac:	e00e      	b.n	8009acc <USBD_GetConfig+0x70>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	1d19      	adds	r1, r3, #4
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	0018      	movs	r0, r3
 8009ab8:	f000 f962 	bl	8009d80 <USBD_CtlSendData>
        break;
 8009abc:	e006      	b.n	8009acc <USBD_GetConfig+0x70>
        USBD_CtlError(pdev, req);
 8009abe:	683a      	ldr	r2, [r7, #0]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	0011      	movs	r1, r2
 8009ac4:	0018      	movs	r0, r3
 8009ac6:	f000 f8d3 	bl	8009c70 <USBD_CtlError>
        break;
 8009aca:	46c0      	nop			; (mov r8, r8)
}
 8009acc:	46c0      	nop			; (mov r8, r8)
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	b002      	add	sp, #8
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	23a7      	movs	r3, #167	; 0xa7
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	5cd3      	ldrb	r3, [r2, r3]
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	2b02      	cmp	r3, #2
 8009aec:	d822      	bhi.n	8009b34 <USBD_GetStatus+0x60>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	88db      	ldrh	r3, [r3, #6]
 8009af2:	2b02      	cmp	r3, #2
 8009af4:	d006      	beq.n	8009b04 <USBD_GetStatus+0x30>
      {
        USBD_CtlError(pdev, req);
 8009af6:	683a      	ldr	r2, [r7, #0]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	0011      	movs	r1, r2
 8009afc:	0018      	movs	r0, r3
 8009afe:	f000 f8b7 	bl	8009c70 <USBD_CtlError>
        break;
 8009b02:	e01e      	b.n	8009b42 <USBD_GetStatus+0x6e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	23a9      	movs	r3, #169	; 0xa9
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	58d3      	ldr	r3, [r2, r3]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d005      	beq.n	8009b22 <USBD_GetStatus+0x4e>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	431a      	orrs	r2, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	330c      	adds	r3, #12
 8009b26:	0019      	movs	r1, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2202      	movs	r2, #2
 8009b2c:	0018      	movs	r0, r3
 8009b2e:	f000 f927 	bl	8009d80 <USBD_CtlSendData>
      break;
 8009b32:	e006      	b.n	8009b42 <USBD_GetStatus+0x6e>

    default:
      USBD_CtlError(pdev, req);
 8009b34:	683a      	ldr	r2, [r7, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	0011      	movs	r1, r2
 8009b3a:	0018      	movs	r0, r3
 8009b3c:	f000 f898 	bl	8009c70 <USBD_CtlError>
      break;
 8009b40:	46c0      	nop			; (mov r8, r8)
  }
}
 8009b42:	46c0      	nop			; (mov r8, r8)
 8009b44:	46bd      	mov	sp, r7
 8009b46:	b002      	add	sp, #8
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b082      	sub	sp, #8
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
 8009b52:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	885b      	ldrh	r3, [r3, #2]
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d109      	bne.n	8009b70 <USBD_SetFeature+0x26>
  {
    pdev->dev_remote_wakeup = 1U;
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	23a9      	movs	r3, #169	; 0xa9
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	2101      	movs	r1, #1
 8009b64:	50d1      	str	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	0018      	movs	r0, r3
 8009b6a:	f000 f967 	bl	8009e3c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009b6e:	e017      	b.n	8009ba0 <USBD_SetFeature+0x56>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	885b      	ldrh	r3, [r3, #2]
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d10d      	bne.n	8009b94 <USBD_SetFeature+0x4a>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	889b      	ldrh	r3, [r3, #4]
 8009b7c:	0a1b      	lsrs	r3, r3, #8
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	b2d9      	uxtb	r1, r3
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	23a8      	movs	r3, #168	; 0xa8
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	54d1      	strb	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	0018      	movs	r0, r3
 8009b8e:	f000 f955 	bl	8009e3c <USBD_CtlSendStatus>
}
 8009b92:	e005      	b.n	8009ba0 <USBD_SetFeature+0x56>
    USBD_CtlError(pdev, req);
 8009b94:	683a      	ldr	r2, [r7, #0]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	0011      	movs	r1, r2
 8009b9a:	0018      	movs	r0, r3
 8009b9c:	f000 f868 	bl	8009c70 <USBD_CtlError>
}
 8009ba0:	46c0      	nop			; (mov r8, r8)
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	b002      	add	sp, #8
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	23a7      	movs	r3, #167	; 0xa7
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	5cd3      	ldrb	r3, [r2, r3]
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	2b02      	cmp	r3, #2
 8009bc0:	d80d      	bhi.n	8009bde <USBD_ClrFeature+0x36>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	885b      	ldrh	r3, [r3, #2]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d110      	bne.n	8009bec <USBD_ClrFeature+0x44>
      {
        pdev->dev_remote_wakeup = 0U;
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	23a9      	movs	r3, #169	; 0xa9
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	50d1      	str	r1, [r2, r3]
        (void)USBD_CtlSendStatus(pdev);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	0018      	movs	r0, r3
 8009bd8:	f000 f930 	bl	8009e3c <USBD_CtlSendStatus>
      }
      break;
 8009bdc:	e006      	b.n	8009bec <USBD_ClrFeature+0x44>

    default:
      USBD_CtlError(pdev, req);
 8009bde:	683a      	ldr	r2, [r7, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	0011      	movs	r1, r2
 8009be4:	0018      	movs	r0, r3
 8009be6:	f000 f843 	bl	8009c70 <USBD_CtlError>
      break;
 8009bea:	e000      	b.n	8009bee <USBD_ClrFeature+0x46>
      break;
 8009bec:	46c0      	nop			; (mov r8, r8)
  }
}
 8009bee:	46c0      	nop			; (mov r8, r8)
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	b002      	add	sp, #8
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b084      	sub	sp, #16
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
 8009bfe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	781a      	ldrb	r2, [r3, #0]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	781a      	ldrb	r2, [r3, #0]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	0018      	movs	r0, r3
 8009c24:	f7ff f8e6 	bl	8008df4 <SWAPBYTE>
 8009c28:	0003      	movs	r3, r0
 8009c2a:	001a      	movs	r2, r3
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	3301      	adds	r3, #1
 8009c34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	0018      	movs	r0, r3
 8009c40:	f7ff f8d8 	bl	8008df4 <SWAPBYTE>
 8009c44:	0003      	movs	r3, r0
 8009c46:	001a      	movs	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	3301      	adds	r3, #1
 8009c56:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	0018      	movs	r0, r3
 8009c5c:	f7ff f8ca 	bl	8008df4 <SWAPBYTE>
 8009c60:	0003      	movs	r3, r0
 8009c62:	001a      	movs	r2, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	80da      	strh	r2, [r3, #6]
}
 8009c68:	46c0      	nop			; (mov r8, r8)
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	b004      	add	sp, #16
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2180      	movs	r1, #128	; 0x80
 8009c7e:	0018      	movs	r0, r3
 8009c80:	f000 fcf3 	bl	800a66a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2100      	movs	r1, #0
 8009c88:	0018      	movs	r0, r3
 8009c8a:	f000 fcee 	bl	800a66a <USBD_LL_StallEP>
}
 8009c8e:	46c0      	nop			; (mov r8, r8)
 8009c90:	46bd      	mov	sp, r7
 8009c92:	b002      	add	sp, #8
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c96:	b590      	push	{r4, r7, lr}
 8009c98:	b087      	sub	sp, #28
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	60f8      	str	r0, [r7, #12]
 8009c9e:	60b9      	str	r1, [r7, #8]
 8009ca0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009ca2:	2417      	movs	r4, #23
 8009ca4:	193b      	adds	r3, r7, r4
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d044      	beq.n	8009d3a <USBD_GetString+0xa4>
  {
    return;
  }

  pdesc = desc;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	0018      	movs	r0, r3
 8009cb8:	f000 f843 	bl	8009d42 <USBD_GetLen>
 8009cbc:	0003      	movs	r3, r0
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	18db      	adds	r3, r3, r3
 8009cc4:	b29a      	uxth	r2, r3
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009cca:	193b      	adds	r3, r7, r4
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	18d3      	adds	r3, r2, r3
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	7812      	ldrb	r2, [r2, #0]
 8009cd6:	701a      	strb	r2, [r3, #0]
  idx++;
 8009cd8:	193b      	adds	r3, r7, r4
 8009cda:	781a      	ldrb	r2, [r3, #0]
 8009cdc:	193b      	adds	r3, r7, r4
 8009cde:	3201      	adds	r2, #1
 8009ce0:	701a      	strb	r2, [r3, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009ce2:	193b      	adds	r3, r7, r4
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	68ba      	ldr	r2, [r7, #8]
 8009ce8:	18d3      	adds	r3, r2, r3
 8009cea:	2203      	movs	r2, #3
 8009cec:	701a      	strb	r2, [r3, #0]
  idx++;
 8009cee:	193b      	adds	r3, r7, r4
 8009cf0:	781a      	ldrb	r2, [r3, #0]
 8009cf2:	193b      	adds	r3, r7, r4
 8009cf4:	3201      	adds	r2, #1
 8009cf6:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 8009cf8:	e01a      	b.n	8009d30 <USBD_GetString+0x9a>
  {
    unicode[idx] = *pdesc;
 8009cfa:	2117      	movs	r1, #23
 8009cfc:	187b      	adds	r3, r7, r1
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	18d3      	adds	r3, r2, r3
 8009d04:	693a      	ldr	r2, [r7, #16]
 8009d06:	7812      	ldrb	r2, [r2, #0]
 8009d08:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	613b      	str	r3, [r7, #16]
    idx++;
 8009d10:	187b      	adds	r3, r7, r1
 8009d12:	781a      	ldrb	r2, [r3, #0]
 8009d14:	187b      	adds	r3, r7, r1
 8009d16:	3201      	adds	r2, #1
 8009d18:	701a      	strb	r2, [r3, #0]

    unicode[idx] = 0U;
 8009d1a:	187b      	adds	r3, r7, r1
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	68ba      	ldr	r2, [r7, #8]
 8009d20:	18d3      	adds	r3, r2, r3
 8009d22:	2200      	movs	r2, #0
 8009d24:	701a      	strb	r2, [r3, #0]
    idx++;
 8009d26:	187b      	adds	r3, r7, r1
 8009d28:	781a      	ldrb	r2, [r3, #0]
 8009d2a:	187b      	adds	r3, r7, r1
 8009d2c:	3201      	adds	r2, #1
 8009d2e:	701a      	strb	r2, [r3, #0]
  while (*pdesc != (uint8_t)'\0')
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1e0      	bne.n	8009cfa <USBD_GetString+0x64>
 8009d38:	e000      	b.n	8009d3c <USBD_GetString+0xa6>
    return;
 8009d3a:	46c0      	nop			; (mov r8, r8)
  }
}
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	b007      	add	sp, #28
 8009d40:	bd90      	pop	{r4, r7, pc}

08009d42 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b084      	sub	sp, #16
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009d4a:	230f      	movs	r3, #15
 8009d4c:	18fb      	adds	r3, r7, r3
 8009d4e:	2200      	movs	r2, #0
 8009d50:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009d56:	e008      	b.n	8009d6a <USBD_GetLen+0x28>
  {
    len++;
 8009d58:	210f      	movs	r1, #15
 8009d5a:	187b      	adds	r3, r7, r1
 8009d5c:	781a      	ldrb	r2, [r3, #0]
 8009d5e:	187b      	adds	r3, r7, r1
 8009d60:	3201      	adds	r2, #1
 8009d62:	701a      	strb	r2, [r3, #0]
    pbuff++;
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	3301      	adds	r3, #1
 8009d68:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1f2      	bne.n	8009d58 <USBD_GetLen+0x16>
  }

  return len;
 8009d72:	230f      	movs	r3, #15
 8009d74:	18fb      	adds	r3, r7, r3
 8009d76:	781b      	ldrb	r3, [r3, #0]
}
 8009d78:	0018      	movs	r0, r3
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	b004      	add	sp, #16
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	23a5      	movs	r3, #165	; 0xa5
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	2102      	movs	r1, #2
 8009d94:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	68ba      	ldr	r2, [r7, #8]
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	2100      	movs	r1, #0
 8009daa:	f000 fd0f 	bl	800a7cc <USBD_LL_Transmit>

  return USBD_OK;
 8009dae:	2300      	movs	r3, #0
}
 8009db0:	0018      	movs	r0, r3
 8009db2:	46bd      	mov	sp, r7
 8009db4:	b004      	add	sp, #16
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	68ba      	ldr	r2, [r7, #8]
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	2100      	movs	r1, #0
 8009dcc:	f000 fcfe 	bl	800a7cc <USBD_LL_Transmit>

  return USBD_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	0018      	movs	r0, r3
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	b004      	add	sp, #16
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b084      	sub	sp, #16
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	60f8      	str	r0, [r7, #12]
 8009de2:	60b9      	str	r1, [r7, #8]
 8009de4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	23a5      	movs	r3, #165	; 0xa5
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	2103      	movs	r1, #3
 8009dee:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	23ac      	movs	r3, #172	; 0xac
 8009df4:	005b      	lsls	r3, r3, #1
 8009df6:	6879      	ldr	r1, [r7, #4]
 8009df8:	50d1      	str	r1, [r2, r3]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	23ae      	movs	r3, #174	; 0xae
 8009dfe:	005b      	lsls	r3, r3, #1
 8009e00:	6879      	ldr	r1, [r7, #4]
 8009e02:	50d1      	str	r1, [r2, r3]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	68ba      	ldr	r2, [r7, #8]
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	f000 fd0e 	bl	800a82c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	0018      	movs	r0, r3
 8009e14:	46bd      	mov	sp, r7
 8009e16:	b004      	add	sp, #16
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b084      	sub	sp, #16
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	60f8      	str	r0, [r7, #12]
 8009e22:	60b9      	str	r1, [r7, #8]
 8009e24:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	f000 fcfd 	bl	800a82c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	0018      	movs	r0, r3
 8009e36:	46bd      	mov	sp, r7
 8009e38:	b004      	add	sp, #16
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	23a5      	movs	r3, #165	; 0xa5
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	2104      	movs	r1, #4
 8009e4c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	2300      	movs	r3, #0
 8009e52:	2200      	movs	r2, #0
 8009e54:	2100      	movs	r1, #0
 8009e56:	f000 fcb9 	bl	800a7cc <USBD_LL_Transmit>

  return USBD_OK;
 8009e5a:	2300      	movs	r3, #0
}
 8009e5c:	0018      	movs	r0, r3
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	b002      	add	sp, #8
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	23a5      	movs	r3, #165	; 0xa5
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	2105      	movs	r1, #5
 8009e74:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	2300      	movs	r3, #0
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	f000 fcd5 	bl	800a82c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e82:	2300      	movs	r3, #0
}
 8009e84:	0018      	movs	r0, r3
 8009e86:	46bd      	mov	sp, r7
 8009e88:	b002      	add	sp, #8
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009e90:	4914      	ldr	r1, [pc, #80]	; (8009ee4 <MX_USB_Device_Init+0x58>)
 8009e92:	4b15      	ldr	r3, [pc, #84]	; (8009ee8 <MX_USB_Device_Init+0x5c>)
 8009e94:	2200      	movs	r2, #0
 8009e96:	0018      	movs	r0, r3
 8009e98:	f7fe fb6c 	bl	8008574 <USBD_Init>
 8009e9c:	1e03      	subs	r3, r0, #0
 8009e9e:	d001      	beq.n	8009ea4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009ea0:	f7f6 fd4e 	bl	8000940 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009ea4:	4a11      	ldr	r2, [pc, #68]	; (8009eec <MX_USB_Device_Init+0x60>)
 8009ea6:	4b10      	ldr	r3, [pc, #64]	; (8009ee8 <MX_USB_Device_Init+0x5c>)
 8009ea8:	0011      	movs	r1, r2
 8009eaa:	0018      	movs	r0, r3
 8009eac:	f7fe fb9c 	bl	80085e8 <USBD_RegisterClass>
 8009eb0:	1e03      	subs	r3, r0, #0
 8009eb2:	d001      	beq.n	8009eb8 <MX_USB_Device_Init+0x2c>
    Error_Handler();
 8009eb4:	f7f6 fd44 	bl	8000940 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009eb8:	4a0d      	ldr	r2, [pc, #52]	; (8009ef0 <MX_USB_Device_Init+0x64>)
 8009eba:	4b0b      	ldr	r3, [pc, #44]	; (8009ee8 <MX_USB_Device_Init+0x5c>)
 8009ebc:	0011      	movs	r1, r2
 8009ebe:	0018      	movs	r0, r3
 8009ec0:	f7fe fa76 	bl	80083b0 <USBD_CDC_RegisterInterface>
 8009ec4:	1e03      	subs	r3, r0, #0
 8009ec6:	d001      	beq.n	8009ecc <MX_USB_Device_Init+0x40>
    Error_Handler();
 8009ec8:	f7f6 fd3a 	bl	8000940 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009ecc:	4b06      	ldr	r3, [pc, #24]	; (8009ee8 <MX_USB_Device_Init+0x5c>)
 8009ece:	0018      	movs	r0, r3
 8009ed0:	f7fe fbc8 	bl	8008664 <USBD_Start>
 8009ed4:	1e03      	subs	r3, r0, #0
 8009ed6:	d001      	beq.n	8009edc <MX_USB_Device_Init+0x50>
    Error_Handler();
 8009ed8:	f7f6 fd32 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009edc:	46c0      	nop			; (mov r8, r8)
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	46c0      	nop			; (mov r8, r8)
 8009ee4:	200000b0 	.word	0x200000b0
 8009ee8:	2000038c 	.word	0x2000038c
 8009eec:	2000001c 	.word	0x2000001c
 8009ef0:	2000009c 	.word	0x2000009c

08009ef4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009ef8:	4907      	ldr	r1, [pc, #28]	; (8009f18 <CDC_Init_FS+0x24>)
 8009efa:	4b08      	ldr	r3, [pc, #32]	; (8009f1c <CDC_Init_FS+0x28>)
 8009efc:	2200      	movs	r2, #0
 8009efe:	0018      	movs	r0, r3
 8009f00:	f7fe fa70 	bl	80083e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009f04:	4a06      	ldr	r2, [pc, #24]	; (8009f20 <CDC_Init_FS+0x2c>)
 8009f06:	4b05      	ldr	r3, [pc, #20]	; (8009f1c <CDC_Init_FS+0x28>)
 8009f08:	0011      	movs	r1, r2
 8009f0a:	0018      	movs	r0, r3
 8009f0c:	f7fe fa8d 	bl	800842a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009f10:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009f12:	0018      	movs	r0, r3
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	20000e68 	.word	0x20000e68
 8009f1c:	2000038c 	.word	0x2000038c
 8009f20:	20000668 	.word	0x20000668

08009f24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009f28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009f2a:	0018      	movs	r0, r3
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6039      	str	r1, [r7, #0]
 8009f38:	0011      	movs	r1, r2
 8009f3a:	1dfb      	adds	r3, r7, #7
 8009f3c:	1c02      	adds	r2, r0, #0
 8009f3e:	701a      	strb	r2, [r3, #0]
 8009f40:	1d3b      	adds	r3, r7, #4
 8009f42:	1c0a      	adds	r2, r1, #0
 8009f44:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009f46:	1dfb      	adds	r3, r7, #7
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	2b23      	cmp	r3, #35	; 0x23
 8009f4c:	d804      	bhi.n	8009f58 <CDC_Control_FS+0x28>
 8009f4e:	009a      	lsls	r2, r3, #2
 8009f50:	4b04      	ldr	r3, [pc, #16]	; (8009f64 <CDC_Control_FS+0x34>)
 8009f52:	18d3      	adds	r3, r2, r3
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009f58:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 8009f5a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009f5c:	0018      	movs	r0, r3
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	b002      	add	sp, #8
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	0800abfc 	.word	0x0800abfc

08009f68 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	4b06      	ldr	r3, [pc, #24]	; (8009f90 <CDC_Receive_FS+0x28>)
 8009f76:	0011      	movs	r1, r2
 8009f78:	0018      	movs	r0, r3
 8009f7a:	f7fe fa56 	bl	800842a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009f7e:	4b04      	ldr	r3, [pc, #16]	; (8009f90 <CDC_Receive_FS+0x28>)
 8009f80:	0018      	movs	r0, r3
 8009f82:	f7fe fabd 	bl	8008500 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009f86:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009f88:	0018      	movs	r0, r3
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	b002      	add	sp, #8
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	2000038c 	.word	0x2000038c

08009f94 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009f94:	b5b0      	push	{r4, r5, r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	000a      	movs	r2, r1
 8009f9e:	1cbb      	adds	r3, r7, #2
 8009fa0:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8009fa2:	230f      	movs	r3, #15
 8009fa4:	18fb      	adds	r3, r7, r3
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009faa:	4a11      	ldr	r2, [pc, #68]	; (8009ff0 <CDC_Transmit_FS+0x5c>)
 8009fac:	23af      	movs	r3, #175	; 0xaf
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	58d3      	ldr	r3, [r2, r3]
 8009fb2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009fb4:	68ba      	ldr	r2, [r7, #8]
 8009fb6:	2385      	movs	r3, #133	; 0x85
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	58d3      	ldr	r3, [r2, r3]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d001      	beq.n	8009fc4 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e010      	b.n	8009fe6 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009fc4:	1cbb      	adds	r3, r7, #2
 8009fc6:	881a      	ldrh	r2, [r3, #0]
 8009fc8:	6879      	ldr	r1, [r7, #4]
 8009fca:	4b09      	ldr	r3, [pc, #36]	; (8009ff0 <CDC_Transmit_FS+0x5c>)
 8009fcc:	0018      	movs	r0, r3
 8009fce:	f7fe fa09 	bl	80083e4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009fd2:	250f      	movs	r5, #15
 8009fd4:	197c      	adds	r4, r7, r5
 8009fd6:	4b06      	ldr	r3, [pc, #24]	; (8009ff0 <CDC_Transmit_FS+0x5c>)
 8009fd8:	0018      	movs	r0, r3
 8009fda:	f7fe fa43 	bl	8008464 <USBD_CDC_TransmitPacket>
 8009fde:	0003      	movs	r3, r0
 8009fe0:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8009fe2:	197b      	adds	r3, r7, r5
 8009fe4:	781b      	ldrb	r3, [r3, #0]
}
 8009fe6:	0018      	movs	r0, r3
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	b004      	add	sp, #16
 8009fec:	bdb0      	pop	{r4, r5, r7, pc}
 8009fee:	46c0      	nop			; (mov r8, r8)
 8009ff0:	2000038c 	.word	0x2000038c

08009ff4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b086      	sub	sp, #24
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	1dfb      	adds	r3, r7, #7
 800a000:	701a      	strb	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800a002:	2117      	movs	r1, #23
 800a004:	187b      	adds	r3, r7, r1
 800a006:	2200      	movs	r2, #0
 800a008:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a00a:	187b      	adds	r3, r7, r1
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	b25b      	sxtb	r3, r3
}
 800a010:	0018      	movs	r0, r3
 800a012:	46bd      	mov	sp, r7
 800a014:	b006      	add	sp, #24
 800a016:	bd80      	pop	{r7, pc}

0800a018 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	0002      	movs	r2, r0
 800a020:	6039      	str	r1, [r7, #0]
 800a022:	1dfb      	adds	r3, r7, #7
 800a024:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	2212      	movs	r2, #18
 800a02a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800a02c:	4b02      	ldr	r3, [pc, #8]	; (800a038 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800a02e:	0018      	movs	r0, r3
 800a030:	46bd      	mov	sp, r7
 800a032:	b002      	add	sp, #8
 800a034:	bd80      	pop	{r7, pc}
 800a036:	46c0      	nop			; (mov r8, r8)
 800a038:	200000d0 	.word	0x200000d0

0800a03c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	0002      	movs	r2, r0
 800a044:	6039      	str	r1, [r7, #0]
 800a046:	1dfb      	adds	r3, r7, #7
 800a048:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	2204      	movs	r2, #4
 800a04e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a050:	4b02      	ldr	r3, [pc, #8]	; (800a05c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800a052:	0018      	movs	r0, r3
 800a054:	46bd      	mov	sp, r7
 800a056:	b002      	add	sp, #8
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	46c0      	nop			; (mov r8, r8)
 800a05c:	200000e4 	.word	0x200000e4

0800a060 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	0002      	movs	r2, r0
 800a068:	6039      	str	r1, [r7, #0]
 800a06a:	1dfb      	adds	r3, r7, #7
 800a06c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800a06e:	1dfb      	adds	r3, r7, #7
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d106      	bne.n	800a084 <USBD_CDC_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a076:	683a      	ldr	r2, [r7, #0]
 800a078:	4908      	ldr	r1, [pc, #32]	; (800a09c <USBD_CDC_ProductStrDescriptor+0x3c>)
 800a07a:	4b09      	ldr	r3, [pc, #36]	; (800a0a0 <USBD_CDC_ProductStrDescriptor+0x40>)
 800a07c:	0018      	movs	r0, r3
 800a07e:	f7ff fe0a 	bl	8009c96 <USBD_GetString>
 800a082:	e005      	b.n	800a090 <USBD_CDC_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a084:	683a      	ldr	r2, [r7, #0]
 800a086:	4905      	ldr	r1, [pc, #20]	; (800a09c <USBD_CDC_ProductStrDescriptor+0x3c>)
 800a088:	4b05      	ldr	r3, [pc, #20]	; (800a0a0 <USBD_CDC_ProductStrDescriptor+0x40>)
 800a08a:	0018      	movs	r0, r3
 800a08c:	f7ff fe03 	bl	8009c96 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a090:	4b02      	ldr	r3, [pc, #8]	; (800a09c <USBD_CDC_ProductStrDescriptor+0x3c>)
}
 800a092:	0018      	movs	r0, r3
 800a094:	46bd      	mov	sp, r7
 800a096:	b002      	add	sp, #8
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	46c0      	nop			; (mov r8, r8)
 800a09c:	20001668 	.word	0x20001668
 800a0a0:	0800aa5c 	.word	0x0800aa5c

0800a0a4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	0002      	movs	r2, r0
 800a0ac:	6039      	str	r1, [r7, #0]
 800a0ae:	1dfb      	adds	r3, r7, #7
 800a0b0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a0b2:	683a      	ldr	r2, [r7, #0]
 800a0b4:	4904      	ldr	r1, [pc, #16]	; (800a0c8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800a0b6:	4b05      	ldr	r3, [pc, #20]	; (800a0cc <USBD_CDC_ManufacturerStrDescriptor+0x28>)
 800a0b8:	0018      	movs	r0, r3
 800a0ba:	f7ff fdec 	bl	8009c96 <USBD_GetString>
  return USBD_StrDesc;
 800a0be:	4b02      	ldr	r3, [pc, #8]	; (800a0c8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
}
 800a0c0:	0018      	movs	r0, r3
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	b002      	add	sp, #8
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	20001668 	.word	0x20001668
 800a0cc:	0800aa70 	.word	0x0800aa70

0800a0d0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	0002      	movs	r2, r0
 800a0d8:	6039      	str	r1, [r7, #0]
 800a0da:	1dfb      	adds	r3, r7, #7
 800a0dc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	221a      	movs	r2, #26
 800a0e2:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a0e4:	f000 f84c 	bl	800a180 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a0e8:	4b02      	ldr	r3, [pc, #8]	; (800a0f4 <USBD_CDC_SerialStrDescriptor+0x24>)
}
 800a0ea:	0018      	movs	r0, r3
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	b002      	add	sp, #8
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	46c0      	nop			; (mov r8, r8)
 800a0f4:	200000e8 	.word	0x200000e8

0800a0f8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	0002      	movs	r2, r0
 800a100:	6039      	str	r1, [r7, #0]
 800a102:	1dfb      	adds	r3, r7, #7
 800a104:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800a106:	1dfb      	adds	r3, r7, #7
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d106      	bne.n	800a11c <USBD_CDC_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a10e:	683a      	ldr	r2, [r7, #0]
 800a110:	4908      	ldr	r1, [pc, #32]	; (800a134 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 800a112:	4b09      	ldr	r3, [pc, #36]	; (800a138 <USBD_CDC_ConfigStrDescriptor+0x40>)
 800a114:	0018      	movs	r0, r3
 800a116:	f7ff fdbe 	bl	8009c96 <USBD_GetString>
 800a11a:	e005      	b.n	800a128 <USBD_CDC_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a11c:	683a      	ldr	r2, [r7, #0]
 800a11e:	4905      	ldr	r1, [pc, #20]	; (800a134 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 800a120:	4b05      	ldr	r3, [pc, #20]	; (800a138 <USBD_CDC_ConfigStrDescriptor+0x40>)
 800a122:	0018      	movs	r0, r3
 800a124:	f7ff fdb7 	bl	8009c96 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a128:	4b02      	ldr	r3, [pc, #8]	; (800a134 <USBD_CDC_ConfigStrDescriptor+0x3c>)
}
 800a12a:	0018      	movs	r0, r3
 800a12c:	46bd      	mov	sp, r7
 800a12e:	b002      	add	sp, #8
 800a130:	bd80      	pop	{r7, pc}
 800a132:	46c0      	nop			; (mov r8, r8)
 800a134:	20001668 	.word	0x20001668
 800a138:	0800aa84 	.word	0x0800aa84

0800a13c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	0002      	movs	r2, r0
 800a144:	6039      	str	r1, [r7, #0]
 800a146:	1dfb      	adds	r3, r7, #7
 800a148:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800a14a:	1dfb      	adds	r3, r7, #7
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d106      	bne.n	800a160 <USBD_CDC_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a152:	683a      	ldr	r2, [r7, #0]
 800a154:	4908      	ldr	r1, [pc, #32]	; (800a178 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 800a156:	4b09      	ldr	r3, [pc, #36]	; (800a17c <USBD_CDC_InterfaceStrDescriptor+0x40>)
 800a158:	0018      	movs	r0, r3
 800a15a:	f7ff fd9c 	bl	8009c96 <USBD_GetString>
 800a15e:	e005      	b.n	800a16c <USBD_CDC_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a160:	683a      	ldr	r2, [r7, #0]
 800a162:	4905      	ldr	r1, [pc, #20]	; (800a178 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 800a164:	4b05      	ldr	r3, [pc, #20]	; (800a17c <USBD_CDC_InterfaceStrDescriptor+0x40>)
 800a166:	0018      	movs	r0, r3
 800a168:	f7ff fd95 	bl	8009c96 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a16c:	4b02      	ldr	r3, [pc, #8]	; (800a178 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
}
 800a16e:	0018      	movs	r0, r3
 800a170:	46bd      	mov	sp, r7
 800a172:	b002      	add	sp, #8
 800a174:	bd80      	pop	{r7, pc}
 800a176:	46c0      	nop			; (mov r8, r8)
 800a178:	20001668 	.word	0x20001668
 800a17c:	0800aa90 	.word	0x0800aa90

0800a180 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a186:	4b10      	ldr	r3, [pc, #64]	; (800a1c8 <Get_SerialNum+0x48>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a18c:	4b0f      	ldr	r3, [pc, #60]	; (800a1cc <Get_SerialNum+0x4c>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a192:	4b0f      	ldr	r3, [pc, #60]	; (800a1d0 <Get_SerialNum+0x50>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a198:	68fa      	ldr	r2, [r7, #12]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	18d3      	adds	r3, r2, r3
 800a19e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00b      	beq.n	800a1be <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a1a6:	490b      	ldr	r1, [pc, #44]	; (800a1d4 <Get_SerialNum+0x54>)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2208      	movs	r2, #8
 800a1ac:	0018      	movs	r0, r3
 800a1ae:	f000 f815 	bl	800a1dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a1b2:	4909      	ldr	r1, [pc, #36]	; (800a1d8 <Get_SerialNum+0x58>)
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	2204      	movs	r2, #4
 800a1b8:	0018      	movs	r0, r3
 800a1ba:	f000 f80f 	bl	800a1dc <IntToUnicode>
  }
}
 800a1be:	46c0      	nop			; (mov r8, r8)
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	b004      	add	sp, #16
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	46c0      	nop			; (mov r8, r8)
 800a1c8:	1fff7590 	.word	0x1fff7590
 800a1cc:	1fff7594 	.word	0x1fff7594
 800a1d0:	1fff7598 	.word	0x1fff7598
 800a1d4:	200000ea 	.word	0x200000ea
 800a1d8:	200000fa 	.word	0x200000fa

0800a1dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b086      	sub	sp, #24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	1dfb      	adds	r3, r7, #7
 800a1e8:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800a1ea:	2117      	movs	r1, #23
 800a1ec:	187b      	adds	r3, r7, r1
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800a1f2:	187b      	adds	r3, r7, r1
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	701a      	strb	r2, [r3, #0]
 800a1f8:	e02f      	b.n	800a25a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	0f1b      	lsrs	r3, r3, #28
 800a1fe:	2b09      	cmp	r3, #9
 800a200:	d80d      	bhi.n	800a21e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	0f1b      	lsrs	r3, r3, #28
 800a206:	b2da      	uxtb	r2, r3
 800a208:	2317      	movs	r3, #23
 800a20a:	18fb      	adds	r3, r7, r3
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	005b      	lsls	r3, r3, #1
 800a210:	0019      	movs	r1, r3
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	185b      	adds	r3, r3, r1
 800a216:	3230      	adds	r2, #48	; 0x30
 800a218:	b2d2      	uxtb	r2, r2
 800a21a:	701a      	strb	r2, [r3, #0]
 800a21c:	e00c      	b.n	800a238 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	0f1b      	lsrs	r3, r3, #28
 800a222:	b2da      	uxtb	r2, r3
 800a224:	2317      	movs	r3, #23
 800a226:	18fb      	adds	r3, r7, r3
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	005b      	lsls	r3, r3, #1
 800a22c:	0019      	movs	r1, r3
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	185b      	adds	r3, r3, r1
 800a232:	3237      	adds	r2, #55	; 0x37
 800a234:	b2d2      	uxtb	r2, r2
 800a236:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	011b      	lsls	r3, r3, #4
 800a23c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a23e:	2117      	movs	r1, #23
 800a240:	187b      	adds	r3, r7, r1
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	005b      	lsls	r3, r3, #1
 800a246:	3301      	adds	r3, #1
 800a248:	68ba      	ldr	r2, [r7, #8]
 800a24a:	18d3      	adds	r3, r2, r3
 800a24c:	2200      	movs	r2, #0
 800a24e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a250:	187b      	adds	r3, r7, r1
 800a252:	781a      	ldrb	r2, [r3, #0]
 800a254:	187b      	adds	r3, r7, r1
 800a256:	3201      	adds	r2, #1
 800a258:	701a      	strb	r2, [r3, #0]
 800a25a:	2317      	movs	r3, #23
 800a25c:	18fa      	adds	r2, r7, r3
 800a25e:	1dfb      	adds	r3, r7, #7
 800a260:	7812      	ldrb	r2, [r2, #0]
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	429a      	cmp	r2, r3
 800a266:	d3c8      	bcc.n	800a1fa <IntToUnicode+0x1e>
  }
}
 800a268:	46c0      	nop			; (mov r8, r8)
 800a26a:	46c0      	nop			; (mov r8, r8)
 800a26c:	46bd      	mov	sp, r7
 800a26e:	b006      	add	sp, #24
 800a270:	bd80      	pop	{r7, pc}
	...

0800a274 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a274:	b590      	push	{r4, r7, lr}
 800a276:	b08f      	sub	sp, #60	; 0x3c
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a27c:	240c      	movs	r4, #12
 800a27e:	193b      	adds	r3, r7, r4
 800a280:	0018      	movs	r0, r3
 800a282:	232c      	movs	r3, #44	; 0x2c
 800a284:	001a      	movs	r2, r3
 800a286:	2100      	movs	r1, #0
 800a288:	f000 fba2 	bl	800a9d0 <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a16      	ldr	r2, [pc, #88]	; (800a2ec <HAL_PCD_MspInit+0x78>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d125      	bne.n	800a2e2 <HAL_PCD_MspInit+0x6e>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a296:	193b      	adds	r3, r7, r4
 800a298:	2280      	movs	r2, #128	; 0x80
 800a29a:	0452      	lsls	r2, r2, #17
 800a29c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSE;
 800a29e:	193b      	adds	r3, r7, r4
 800a2a0:	2280      	movs	r2, #128	; 0x80
 800a2a2:	0152      	lsls	r2, r2, #5
 800a2a4:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a2a6:	193b      	adds	r3, r7, r4
 800a2a8:	0018      	movs	r0, r3
 800a2aa:	f7f9 fd6b 	bl	8003d84 <HAL_RCCEx_PeriphCLKConfig>
 800a2ae:	1e03      	subs	r3, r0, #0
 800a2b0:	d001      	beq.n	800a2b6 <HAL_PCD_MspInit+0x42>
    {
      Error_Handler();
 800a2b2:	f7f6 fb45 	bl	8000940 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a2b6:	4b0e      	ldr	r3, [pc, #56]	; (800a2f0 <HAL_PCD_MspInit+0x7c>)
 800a2b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2ba:	4b0d      	ldr	r3, [pc, #52]	; (800a2f0 <HAL_PCD_MspInit+0x7c>)
 800a2bc:	2180      	movs	r1, #128	; 0x80
 800a2be:	0189      	lsls	r1, r1, #6
 800a2c0:	430a      	orrs	r2, r1
 800a2c2:	63da      	str	r2, [r3, #60]	; 0x3c
 800a2c4:	4b0a      	ldr	r3, [pc, #40]	; (800a2f0 <HAL_PCD_MspInit+0x7c>)
 800a2c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2c8:	2380      	movs	r3, #128	; 0x80
 800a2ca:	019b      	lsls	r3, r3, #6
 800a2cc:	4013      	ands	r3, r2
 800a2ce:	60bb      	str	r3, [r7, #8]
 800a2d0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	2008      	movs	r0, #8
 800a2d8:	f7f6 fedc 	bl	8001094 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800a2dc:	2008      	movs	r0, #8
 800a2de:	f7f6 feee 	bl	80010be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 800a2e2:	46c0      	nop			; (mov r8, r8)
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	b00f      	add	sp, #60	; 0x3c
 800a2e8:	bd90      	pop	{r4, r7, pc}
 800a2ea:	46c0      	nop			; (mov r8, r8)
 800a2ec:	40005c00 	.word	0x40005c00
 800a2f0:	40021000 	.word	0x40021000

0800a2f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	23b7      	movs	r3, #183	; 0xb7
 800a300:	009b      	lsls	r3, r3, #2
 800a302:	58d2      	ldr	r2, [r2, r3]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	21a7      	movs	r1, #167	; 0xa7
 800a308:	0089      	lsls	r1, r1, #2
 800a30a:	468c      	mov	ip, r1
 800a30c:	4463      	add	r3, ip
 800a30e:	0019      	movs	r1, r3
 800a310:	0010      	movs	r0, r2
 800a312:	f7fe fa03 	bl	800871c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a316:	46c0      	nop			; (mov r8, r8)
 800a318:	46bd      	mov	sp, r7
 800a31a:	b002      	add	sp, #8
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a31e:	b590      	push	{r4, r7, lr}
 800a320:	b083      	sub	sp, #12
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
 800a326:	000a      	movs	r2, r1
 800a328:	1cfb      	adds	r3, r7, #3
 800a32a:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	23b7      	movs	r3, #183	; 0xb7
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	58d4      	ldr	r4, [r2, r3]
 800a334:	1cfb      	adds	r3, r7, #3
 800a336:	781a      	ldrb	r2, [r3, #0]
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	23b4      	movs	r3, #180	; 0xb4
 800a33c:	0059      	lsls	r1, r3, #1
 800a33e:	0013      	movs	r3, r2
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	189b      	adds	r3, r3, r2
 800a344:	00db      	lsls	r3, r3, #3
 800a346:	18c3      	adds	r3, r0, r3
 800a348:	185b      	adds	r3, r3, r1
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	1cfb      	adds	r3, r7, #3
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	0019      	movs	r1, r3
 800a352:	0020      	movs	r0, r4
 800a354:	f7fe fa4c 	bl	80087f0 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a358:	46c0      	nop			; (mov r8, r8)
 800a35a:	46bd      	mov	sp, r7
 800a35c:	b003      	add	sp, #12
 800a35e:	bd90      	pop	{r4, r7, pc}

0800a360 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	000a      	movs	r2, r1
 800a36a:	1cfb      	adds	r3, r7, #3
 800a36c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	23b7      	movs	r3, #183	; 0xb7
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	58d0      	ldr	r0, [r2, r3]
 800a376:	1cfb      	adds	r3, r7, #3
 800a378:	781a      	ldrb	r2, [r3, #0]
 800a37a:	6879      	ldr	r1, [r7, #4]
 800a37c:	0013      	movs	r3, r2
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	189b      	adds	r3, r3, r2
 800a382:	00db      	lsls	r3, r3, #3
 800a384:	18cb      	adds	r3, r1, r3
 800a386:	3328      	adds	r3, #40	; 0x28
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	1cfb      	adds	r3, r7, #3
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	0019      	movs	r1, r3
 800a390:	f7fe fb16 	bl	80089c0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a394:	46c0      	nop			; (mov r8, r8)
 800a396:	46bd      	mov	sp, r7
 800a398:	b002      	add	sp, #8
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	23b7      	movs	r3, #183	; 0xb7
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	58d3      	ldr	r3, [r2, r3]
 800a3ac:	0018      	movs	r0, r3
 800a3ae:	f7fe fc81 	bl	8008cb4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a3b2:	46c0      	nop			; (mov r8, r8)
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	b002      	add	sp, #8
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b084      	sub	sp, #16
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a3c2:	230f      	movs	r3, #15
 800a3c4:	18fb      	adds	r3, r7, r3
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	701a      	strb	r2, [r3, #0]
  if (hpcd->Init.speed != USBD_FS_SPEED)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	79db      	ldrb	r3, [r3, #7]
 800a3ce:	2b02      	cmp	r3, #2
 800a3d0:	d001      	beq.n	800a3d6 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800a3d2:	f7f6 fab5 	bl	8000940 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	23b7      	movs	r3, #183	; 0xb7
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	58d2      	ldr	r2, [r2, r3]
 800a3de:	230f      	movs	r3, #15
 800a3e0:	18fb      	adds	r3, r7, r3
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	0019      	movs	r1, r3
 800a3e6:	0010      	movs	r0, r2
 800a3e8:	f7fe fc21 	bl	8008c2e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	23b7      	movs	r3, #183	; 0xb7
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	58d3      	ldr	r3, [r2, r3]
 800a3f4:	0018      	movs	r0, r3
 800a3f6:	f7fe fbbb 	bl	8008b70 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a3fa:	46c0      	nop			; (mov r8, r8)
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	b004      	add	sp, #16
 800a400:	bd80      	pop	{r7, pc}
	...

0800a404 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
 /* __HAL_PCD_GATE_PHYCLOCK(hpcd);*/
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	23b7      	movs	r3, #183	; 0xb7
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	58d3      	ldr	r3, [r2, r3]
 800a414:	0018      	movs	r0, r3
 800a416:	f7fe fc1b 	bl	8008c50 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	7adb      	ldrb	r3, [r3, #11]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d005      	beq.n	800a42e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a422:	4b05      	ldr	r3, [pc, #20]	; (800a438 <HAL_PCD_SuspendCallback+0x34>)
 800a424:	691a      	ldr	r2, [r3, #16]
 800a426:	4b04      	ldr	r3, [pc, #16]	; (800a438 <HAL_PCD_SuspendCallback+0x34>)
 800a428:	2106      	movs	r1, #6
 800a42a:	430a      	orrs	r2, r1
 800a42c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a42e:	46c0      	nop			; (mov r8, r8)
 800a430:	46bd      	mov	sp, r7
 800a432:	b002      	add	sp, #8
 800a434:	bd80      	pop	{r7, pc}
 800a436:	46c0      	nop			; (mov r8, r8)
 800a438:	e000ed00 	.word	0xe000ed00

0800a43c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */
 /* __HAL_PCD_UNGATE_PHYCLOCK(hpcd);*/

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	7adb      	ldrb	r3, [r3, #11]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d007      	beq.n	800a45c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a44c:	4b09      	ldr	r3, [pc, #36]	; (800a474 <HAL_PCD_ResumeCallback+0x38>)
 800a44e:	691a      	ldr	r2, [r3, #16]
 800a450:	4b08      	ldr	r3, [pc, #32]	; (800a474 <HAL_PCD_ResumeCallback+0x38>)
 800a452:	2106      	movs	r1, #6
 800a454:	438a      	bics	r2, r1
 800a456:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800a458:	f000 fa7c 	bl	800a954 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	23b7      	movs	r3, #183	; 0xb7
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	58d3      	ldr	r3, [r2, r3]
 800a464:	0018      	movs	r0, r3
 800a466:	f7fe fc0b 	bl	8008c80 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a46a:	46c0      	nop			; (mov r8, r8)
 800a46c:	46bd      	mov	sp, r7
 800a46e:	b002      	add	sp, #8
 800a470:	bd80      	pop	{r7, pc}
 800a472:	46c0      	nop			; (mov r8, r8)
 800a474:	e000ed00 	.word	0xe000ed00

0800a478 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_DRD_FS.pData = pdev;
 800a480:	4a34      	ldr	r2, [pc, #208]	; (800a554 <USBD_LL_Init+0xdc>)
 800a482:	23b7      	movs	r3, #183	; 0xb7
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	6879      	ldr	r1, [r7, #4]
 800a488:	50d1      	str	r1, [r2, r3]
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_DRD_FS;
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	23b2      	movs	r3, #178	; 0xb2
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	4930      	ldr	r1, [pc, #192]	; (800a554 <USBD_LL_Init+0xdc>)
 800a492:	50d1      	str	r1, [r2, r3]

  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 800a494:	4b2f      	ldr	r3, [pc, #188]	; (800a554 <USBD_LL_Init+0xdc>)
 800a496:	4a30      	ldr	r2, [pc, #192]	; (800a558 <USBD_LL_Init+0xe0>)
 800a498:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800a49a:	4b2e      	ldr	r3, [pc, #184]	; (800a554 <USBD_LL_Init+0xdc>)
 800a49c:	2208      	movs	r2, #8
 800a49e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 800a4a0:	4b2c      	ldr	r3, [pc, #176]	; (800a554 <USBD_LL_Init+0xdc>)
 800a4a2:	2208      	movs	r2, #8
 800a4a4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 800a4a6:	4b2b      	ldr	r3, [pc, #172]	; (800a554 <USBD_LL_Init+0xdc>)
 800a4a8:	2202      	movs	r2, #2
 800a4aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a4ac:	4b29      	ldr	r3, [pc, #164]	; (800a554 <USBD_LL_Init+0xdc>)
 800a4ae:	2202      	movs	r2, #2
 800a4b0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 800a4b2:	4b28      	ldr	r3, [pc, #160]	; (800a554 <USBD_LL_Init+0xdc>)
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800a4b8:	4b26      	ldr	r3, [pc, #152]	; (800a554 <USBD_LL_Init+0xdc>)
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 800a4be:	4b25      	ldr	r3, [pc, #148]	; (800a554 <USBD_LL_Init+0xdc>)
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 800a4c4:	4b23      	ldr	r3, [pc, #140]	; (800a554 <USBD_LL_Init+0xdc>)
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 800a4ca:	4b22      	ldr	r3, [pc, #136]	; (800a554 <USBD_LL_Init+0xdc>)
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 800a4d0:	4b20      	ldr	r3, [pc, #128]	; (800a554 <USBD_LL_Init+0xdc>)
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 800a4d6:	4b1f      	ldr	r3, [pc, #124]	; (800a554 <USBD_LL_Init+0xdc>)
 800a4d8:	2200      	movs	r2, #0
 800a4da:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800a4dc:	4b1d      	ldr	r3, [pc, #116]	; (800a554 <USBD_LL_Init+0xdc>)
 800a4de:	0018      	movs	r0, r3
 800a4e0:	f7f7 fa30 	bl	8001944 <HAL_PCD_Init>
 800a4e4:	1e03      	subs	r3, r0, #0
 800a4e6:	d001      	beq.n	800a4ec <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800a4e8:	f7f6 fa2a 	bl	8000940 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	23b2      	movs	r3, #178	; 0xb2
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	58d0      	ldr	r0, [r2, r3]
 800a4f4:	2318      	movs	r3, #24
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	2100      	movs	r1, #0
 800a4fa:	f7f8 fec1 	bl	8003280 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	23b2      	movs	r3, #178	; 0xb2
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	58d0      	ldr	r0, [r2, r3]
 800a506:	2358      	movs	r3, #88	; 0x58
 800a508:	2200      	movs	r2, #0
 800a50a:	2180      	movs	r1, #128	; 0x80
 800a50c:	f7f8 feb8 	bl	8003280 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	23b2      	movs	r3, #178	; 0xb2
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	58d0      	ldr	r0, [r2, r3]
 800a518:	23c0      	movs	r3, #192	; 0xc0
 800a51a:	2200      	movs	r2, #0
 800a51c:	2181      	movs	r1, #129	; 0x81
 800a51e:	f7f8 feaf 	bl	8003280 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	23b2      	movs	r3, #178	; 0xb2
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	58d0      	ldr	r0, [r2, r3]
 800a52a:	2388      	movs	r3, #136	; 0x88
 800a52c:	005b      	lsls	r3, r3, #1
 800a52e:	2200      	movs	r2, #0
 800a530:	2101      	movs	r1, #1
 800a532:	f7f8 fea5 	bl	8003280 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	23b2      	movs	r3, #178	; 0xb2
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	58d0      	ldr	r0, [r2, r3]
 800a53e:	2380      	movs	r3, #128	; 0x80
 800a540:	005b      	lsls	r3, r3, #1
 800a542:	2200      	movs	r2, #0
 800a544:	2182      	movs	r1, #130	; 0x82
 800a546:	f7f8 fe9b 	bl	8003280 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */

  return USBD_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	0018      	movs	r0, r3
 800a54e:	46bd      	mov	sp, r7
 800a550:	b002      	add	sp, #8
 800a552:	bd80      	pop	{r7, pc}
 800a554:	20001868 	.word	0x20001868
 800a558:	40005c00 	.word	0x40005c00

0800a55c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a55c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a564:	210f      	movs	r1, #15
 800a566:	187b      	adds	r3, r7, r1
 800a568:	2200      	movs	r2, #0
 800a56a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a56c:	260e      	movs	r6, #14
 800a56e:	19bb      	adds	r3, r7, r6
 800a570:	2200      	movs	r2, #0
 800a572:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	23b2      	movs	r3, #178	; 0xb2
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	58d3      	ldr	r3, [r2, r3]
 800a57c:	000d      	movs	r5, r1
 800a57e:	187c      	adds	r4, r7, r1
 800a580:	0018      	movs	r0, r3
 800a582:	f7f7 fad9 	bl	8001b38 <HAL_PCD_Start>
 800a586:	0003      	movs	r3, r0
 800a588:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a58a:	19bc      	adds	r4, r7, r6
 800a58c:	197b      	adds	r3, r7, r5
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	0018      	movs	r0, r3
 800a592:	f000 f9e6 	bl	800a962 <USBD_Get_USB_Status>
 800a596:	0003      	movs	r3, r0
 800a598:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a59a:	19bb      	adds	r3, r7, r6
 800a59c:	781b      	ldrb	r3, [r3, #0]
}
 800a59e:	0018      	movs	r0, r3
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	b005      	add	sp, #20
 800a5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a5a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a5a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5a8:	b085      	sub	sp, #20
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	000c      	movs	r4, r1
 800a5b0:	0010      	movs	r0, r2
 800a5b2:	0019      	movs	r1, r3
 800a5b4:	1cfb      	adds	r3, r7, #3
 800a5b6:	1c22      	adds	r2, r4, #0
 800a5b8:	701a      	strb	r2, [r3, #0]
 800a5ba:	1cbb      	adds	r3, r7, #2
 800a5bc:	1c02      	adds	r2, r0, #0
 800a5be:	701a      	strb	r2, [r3, #0]
 800a5c0:	003b      	movs	r3, r7
 800a5c2:	1c0a      	adds	r2, r1, #0
 800a5c4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5c6:	260f      	movs	r6, #15
 800a5c8:	19bb      	adds	r3, r7, r6
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5ce:	250e      	movs	r5, #14
 800a5d0:	197b      	adds	r3, r7, r5
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	23b2      	movs	r3, #178	; 0xb2
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	58d0      	ldr	r0, [r2, r3]
 800a5de:	19bc      	adds	r4, r7, r6
 800a5e0:	1cbb      	adds	r3, r7, #2
 800a5e2:	781d      	ldrb	r5, [r3, #0]
 800a5e4:	003b      	movs	r3, r7
 800a5e6:	881a      	ldrh	r2, [r3, #0]
 800a5e8:	1cfb      	adds	r3, r7, #3
 800a5ea:	7819      	ldrb	r1, [r3, #0]
 800a5ec:	002b      	movs	r3, r5
 800a5ee:	f7f7 fc09 	bl	8001e04 <HAL_PCD_EP_Open>
 800a5f2:	0003      	movs	r3, r0
 800a5f4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5f6:	250e      	movs	r5, #14
 800a5f8:	197c      	adds	r4, r7, r5
 800a5fa:	19bb      	adds	r3, r7, r6
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	0018      	movs	r0, r3
 800a600:	f000 f9af 	bl	800a962 <USBD_Get_USB_Status>
 800a604:	0003      	movs	r3, r0
 800a606:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a608:	197b      	adds	r3, r7, r5
 800a60a:	781b      	ldrb	r3, [r3, #0]
}
 800a60c:	0018      	movs	r0, r3
 800a60e:	46bd      	mov	sp, r7
 800a610:	b005      	add	sp, #20
 800a612:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a614 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a614:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a616:	b085      	sub	sp, #20
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	000a      	movs	r2, r1
 800a61e:	1cfb      	adds	r3, r7, #3
 800a620:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a622:	210f      	movs	r1, #15
 800a624:	187b      	adds	r3, r7, r1
 800a626:	2200      	movs	r2, #0
 800a628:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a62a:	260e      	movs	r6, #14
 800a62c:	19bb      	adds	r3, r7, r6
 800a62e:	2200      	movs	r2, #0
 800a630:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	23b2      	movs	r3, #178	; 0xb2
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	58d2      	ldr	r2, [r2, r3]
 800a63a:	000d      	movs	r5, r1
 800a63c:	187c      	adds	r4, r7, r1
 800a63e:	1cfb      	adds	r3, r7, #3
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	0019      	movs	r1, r3
 800a644:	0010      	movs	r0, r2
 800a646:	f7f7 fc4e 	bl	8001ee6 <HAL_PCD_EP_Close>
 800a64a:	0003      	movs	r3, r0
 800a64c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a64e:	19bc      	adds	r4, r7, r6
 800a650:	197b      	adds	r3, r7, r5
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	0018      	movs	r0, r3
 800a656:	f000 f984 	bl	800a962 <USBD_Get_USB_Status>
 800a65a:	0003      	movs	r3, r0
 800a65c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a65e:	19bb      	adds	r3, r7, r6
 800a660:	781b      	ldrb	r3, [r3, #0]
}
 800a662:	0018      	movs	r0, r3
 800a664:	46bd      	mov	sp, r7
 800a666:	b005      	add	sp, #20
 800a668:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a66a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a66a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a66c:	b085      	sub	sp, #20
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
 800a672:	000a      	movs	r2, r1
 800a674:	1cfb      	adds	r3, r7, #3
 800a676:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a678:	210f      	movs	r1, #15
 800a67a:	187b      	adds	r3, r7, r1
 800a67c:	2200      	movs	r2, #0
 800a67e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a680:	260e      	movs	r6, #14
 800a682:	19bb      	adds	r3, r7, r6
 800a684:	2200      	movs	r2, #0
 800a686:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	23b2      	movs	r3, #178	; 0xb2
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	58d2      	ldr	r2, [r2, r3]
 800a690:	000d      	movs	r5, r1
 800a692:	187c      	adds	r4, r7, r1
 800a694:	1cfb      	adds	r3, r7, #3
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	0019      	movs	r1, r3
 800a69a:	0010      	movs	r0, r2
 800a69c:	f7f7 fd04 	bl	80020a8 <HAL_PCD_EP_SetStall>
 800a6a0:	0003      	movs	r3, r0
 800a6a2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6a4:	19bc      	adds	r4, r7, r6
 800a6a6:	197b      	adds	r3, r7, r5
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	0018      	movs	r0, r3
 800a6ac:	f000 f959 	bl	800a962 <USBD_Get_USB_Status>
 800a6b0:	0003      	movs	r3, r0
 800a6b2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a6b4:	19bb      	adds	r3, r7, r6
 800a6b6:	781b      	ldrb	r3, [r3, #0]
}
 800a6b8:	0018      	movs	r0, r3
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	b005      	add	sp, #20
 800a6be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a6c0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6c2:	b085      	sub	sp, #20
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	000a      	movs	r2, r1
 800a6ca:	1cfb      	adds	r3, r7, #3
 800a6cc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6ce:	210f      	movs	r1, #15
 800a6d0:	187b      	adds	r3, r7, r1
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6d6:	260e      	movs	r6, #14
 800a6d8:	19bb      	adds	r3, r7, r6
 800a6da:	2200      	movs	r2, #0
 800a6dc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	23b2      	movs	r3, #178	; 0xb2
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	58d2      	ldr	r2, [r2, r3]
 800a6e6:	000d      	movs	r5, r1
 800a6e8:	187c      	adds	r4, r7, r1
 800a6ea:	1cfb      	adds	r3, r7, #3
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	0019      	movs	r1, r3
 800a6f0:	0010      	movs	r0, r2
 800a6f2:	f7f7 fd37 	bl	8002164 <HAL_PCD_EP_ClrStall>
 800a6f6:	0003      	movs	r3, r0
 800a6f8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6fa:	19bc      	adds	r4, r7, r6
 800a6fc:	197b      	adds	r3, r7, r5
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	0018      	movs	r0, r3
 800a702:	f000 f92e 	bl	800a962 <USBD_Get_USB_Status>
 800a706:	0003      	movs	r3, r0
 800a708:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a70a:	19bb      	adds	r3, r7, r6
 800a70c:	781b      	ldrb	r3, [r3, #0]
}
 800a70e:	0018      	movs	r0, r3
 800a710:	46bd      	mov	sp, r7
 800a712:	b005      	add	sp, #20
 800a714:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a716 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b084      	sub	sp, #16
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
 800a71e:	000a      	movs	r2, r1
 800a720:	1cfb      	adds	r3, r7, #3
 800a722:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	23b2      	movs	r3, #178	; 0xb2
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	58d3      	ldr	r3, [r2, r3]
 800a72c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a72e:	1cfb      	adds	r3, r7, #3
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	b25b      	sxtb	r3, r3
 800a734:	2b00      	cmp	r3, #0
 800a736:	da0c      	bge.n	800a752 <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a738:	1cfb      	adds	r3, r7, #3
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	227f      	movs	r2, #127	; 0x7f
 800a73e:	401a      	ands	r2, r3
 800a740:	68f9      	ldr	r1, [r7, #12]
 800a742:	0013      	movs	r3, r2
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	189b      	adds	r3, r3, r2
 800a748:	00db      	lsls	r3, r3, #3
 800a74a:	18cb      	adds	r3, r1, r3
 800a74c:	3316      	adds	r3, #22
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	e00d      	b.n	800a76e <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a752:	1cfb      	adds	r3, r7, #3
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	227f      	movs	r2, #127	; 0x7f
 800a758:	401a      	ands	r2, r3
 800a75a:	68f8      	ldr	r0, [r7, #12]
 800a75c:	23ab      	movs	r3, #171	; 0xab
 800a75e:	0059      	lsls	r1, r3, #1
 800a760:	0013      	movs	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	189b      	adds	r3, r3, r2
 800a766:	00db      	lsls	r3, r3, #3
 800a768:	18c3      	adds	r3, r0, r3
 800a76a:	185b      	adds	r3, r3, r1
 800a76c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a76e:	0018      	movs	r0, r3
 800a770:	46bd      	mov	sp, r7
 800a772:	b004      	add	sp, #16
 800a774:	bd80      	pop	{r7, pc}

0800a776 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a776:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a778:	b085      	sub	sp, #20
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
 800a77e:	000a      	movs	r2, r1
 800a780:	1cfb      	adds	r3, r7, #3
 800a782:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a784:	210f      	movs	r1, #15
 800a786:	187b      	adds	r3, r7, r1
 800a788:	2200      	movs	r2, #0
 800a78a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a78c:	260e      	movs	r6, #14
 800a78e:	19bb      	adds	r3, r7, r6
 800a790:	2200      	movs	r2, #0
 800a792:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	23b2      	movs	r3, #178	; 0xb2
 800a798:	009b      	lsls	r3, r3, #2
 800a79a:	58d2      	ldr	r2, [r2, r3]
 800a79c:	000d      	movs	r5, r1
 800a79e:	187c      	adds	r4, r7, r1
 800a7a0:	1cfb      	adds	r3, r7, #3
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	0019      	movs	r1, r3
 800a7a6:	0010      	movs	r0, r2
 800a7a8:	f7f7 fb02 	bl	8001db0 <HAL_PCD_SetAddress>
 800a7ac:	0003      	movs	r3, r0
 800a7ae:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7b0:	19bc      	adds	r4, r7, r6
 800a7b2:	197b      	adds	r3, r7, r5
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	0018      	movs	r0, r3
 800a7b8:	f000 f8d3 	bl	800a962 <USBD_Get_USB_Status>
 800a7bc:	0003      	movs	r3, r0
 800a7be:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a7c0:	19bb      	adds	r3, r7, r6
 800a7c2:	781b      	ldrb	r3, [r3, #0]
}
 800a7c4:	0018      	movs	r0, r3
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	b005      	add	sp, #20
 800a7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a7cc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7ce:	b087      	sub	sp, #28
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	607a      	str	r2, [r7, #4]
 800a7d6:	603b      	str	r3, [r7, #0]
 800a7d8:	230b      	movs	r3, #11
 800a7da:	18fb      	adds	r3, r7, r3
 800a7dc:	1c0a      	adds	r2, r1, #0
 800a7de:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7e0:	2617      	movs	r6, #23
 800a7e2:	19bb      	adds	r3, r7, r6
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7e8:	2516      	movs	r5, #22
 800a7ea:	197b      	adds	r3, r7, r5
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	23b2      	movs	r3, #178	; 0xb2
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	58d0      	ldr	r0, [r2, r3]
 800a7f8:	19bc      	adds	r4, r7, r6
 800a7fa:	683d      	ldr	r5, [r7, #0]
 800a7fc:	687a      	ldr	r2, [r7, #4]
 800a7fe:	230b      	movs	r3, #11
 800a800:	18fb      	adds	r3, r7, r3
 800a802:	7819      	ldrb	r1, [r3, #0]
 800a804:	002b      	movs	r3, r5
 800a806:	f7f7 fc12 	bl	800202e <HAL_PCD_EP_Transmit>
 800a80a:	0003      	movs	r3, r0
 800a80c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a80e:	2516      	movs	r5, #22
 800a810:	197c      	adds	r4, r7, r5
 800a812:	19bb      	adds	r3, r7, r6
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	0018      	movs	r0, r3
 800a818:	f000 f8a3 	bl	800a962 <USBD_Get_USB_Status>
 800a81c:	0003      	movs	r3, r0
 800a81e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a820:	197b      	adds	r3, r7, r5
 800a822:	781b      	ldrb	r3, [r3, #0]
}
 800a824:	0018      	movs	r0, r3
 800a826:	46bd      	mov	sp, r7
 800a828:	b007      	add	sp, #28
 800a82a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a82c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a82c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a82e:	b087      	sub	sp, #28
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	607a      	str	r2, [r7, #4]
 800a836:	603b      	str	r3, [r7, #0]
 800a838:	230b      	movs	r3, #11
 800a83a:	18fb      	adds	r3, r7, r3
 800a83c:	1c0a      	adds	r2, r1, #0
 800a83e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a840:	2617      	movs	r6, #23
 800a842:	19bb      	adds	r3, r7, r6
 800a844:	2200      	movs	r2, #0
 800a846:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a848:	2516      	movs	r5, #22
 800a84a:	197b      	adds	r3, r7, r5
 800a84c:	2200      	movs	r2, #0
 800a84e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a850:	68fa      	ldr	r2, [r7, #12]
 800a852:	23b2      	movs	r3, #178	; 0xb2
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	58d0      	ldr	r0, [r2, r3]
 800a858:	19bc      	adds	r4, r7, r6
 800a85a:	683d      	ldr	r5, [r7, #0]
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	230b      	movs	r3, #11
 800a860:	18fb      	adds	r3, r7, r3
 800a862:	7819      	ldrb	r1, [r3, #0]
 800a864:	002b      	movs	r3, r5
 800a866:	f7f7 fb91 	bl	8001f8c <HAL_PCD_EP_Receive>
 800a86a:	0003      	movs	r3, r0
 800a86c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a86e:	2516      	movs	r5, #22
 800a870:	197c      	adds	r4, r7, r5
 800a872:	19bb      	adds	r3, r7, r6
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	0018      	movs	r0, r3
 800a878:	f000 f873 	bl	800a962 <USBD_Get_USB_Status>
 800a87c:	0003      	movs	r3, r0
 800a87e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a880:	197b      	adds	r3, r7, r5
 800a882:	781b      	ldrb	r3, [r3, #0]
}
 800a884:	0018      	movs	r0, r3
 800a886:	46bd      	mov	sp, r7
 800a888:	b007      	add	sp, #28
 800a88a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a88c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	000a      	movs	r2, r1
 800a896:	1cfb      	adds	r3, r7, #3
 800a898:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	23b2      	movs	r3, #178	; 0xb2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	58d2      	ldr	r2, [r2, r3]
 800a8a2:	1cfb      	adds	r3, r7, #3
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	0019      	movs	r1, r3
 800a8a8:	0010      	movs	r0, r2
 800a8aa:	f7f7 fba7 	bl	8001ffc <HAL_PCD_EP_GetRxCount>
 800a8ae:	0003      	movs	r3, r0
}
 800a8b0:	0018      	movs	r0, r3
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	b002      	add	sp, #8
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	000a      	movs	r2, r1
 800a8c2:	1cfb      	adds	r3, r7, #3
 800a8c4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a8c6:	1cfb      	adds	r3, r7, #3
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d002      	beq.n	800a8d4 <HAL_PCDEx_LPM_Callback+0x1c>
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d014      	beq.n	800a8fc <HAL_PCDEx_LPM_Callback+0x44>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a8d2:	e025      	b.n	800a920 <HAL_PCDEx_LPM_Callback+0x68>
    if (hpcd->Init.low_power_enable)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	7adb      	ldrb	r3, [r3, #11]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d007      	beq.n	800a8ec <HAL_PCDEx_LPM_Callback+0x34>
      SystemClockConfig_Resume();
 800a8dc:	f000 f83a 	bl	800a954 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a8e0:	4b11      	ldr	r3, [pc, #68]	; (800a928 <HAL_PCDEx_LPM_Callback+0x70>)
 800a8e2:	691a      	ldr	r2, [r3, #16]
 800a8e4:	4b10      	ldr	r3, [pc, #64]	; (800a928 <HAL_PCDEx_LPM_Callback+0x70>)
 800a8e6:	2106      	movs	r1, #6
 800a8e8:	438a      	bics	r2, r1
 800a8ea:	611a      	str	r2, [r3, #16]
    USBD_LL_Resume(hpcd->pData);
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	23b7      	movs	r3, #183	; 0xb7
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	58d3      	ldr	r3, [r2, r3]
 800a8f4:	0018      	movs	r0, r3
 800a8f6:	f7fe f9c3 	bl	8008c80 <USBD_LL_Resume>
    break;
 800a8fa:	e011      	b.n	800a920 <HAL_PCDEx_LPM_Callback+0x68>
    USBD_LL_Suspend(hpcd->pData);
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	23b7      	movs	r3, #183	; 0xb7
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	58d3      	ldr	r3, [r2, r3]
 800a904:	0018      	movs	r0, r3
 800a906:	f7fe f9a3 	bl	8008c50 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	7adb      	ldrb	r3, [r3, #11]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d005      	beq.n	800a91e <HAL_PCDEx_LPM_Callback+0x66>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a912:	4b05      	ldr	r3, [pc, #20]	; (800a928 <HAL_PCDEx_LPM_Callback+0x70>)
 800a914:	691a      	ldr	r2, [r3, #16]
 800a916:	4b04      	ldr	r3, [pc, #16]	; (800a928 <HAL_PCDEx_LPM_Callback+0x70>)
 800a918:	2106      	movs	r1, #6
 800a91a:	430a      	orrs	r2, r1
 800a91c:	611a      	str	r2, [r3, #16]
    break;
 800a91e:	46c0      	nop			; (mov r8, r8)
}
 800a920:	46c0      	nop			; (mov r8, r8)
 800a922:	46bd      	mov	sp, r7
 800a924:	b002      	add	sp, #8
 800a926:	bd80      	pop	{r7, pc}
 800a928:	e000ed00 	.word	0xe000ed00

0800a92c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a934:	4b02      	ldr	r3, [pc, #8]	; (800a940 <USBD_static_malloc+0x14>)
}
 800a936:	0018      	movs	r0, r3
 800a938:	46bd      	mov	sp, r7
 800a93a:	b002      	add	sp, #8
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	46c0      	nop			; (mov r8, r8)
 800a940:	20001b48 	.word	0x20001b48

0800a944 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]

}
 800a94c:	46c0      	nop			; (mov r8, r8)
 800a94e:	46bd      	mov	sp, r7
 800a950:	b002      	add	sp, #8
 800a952:	bd80      	pop	{r7, pc}

0800a954 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a958:	f7f5 fd84 	bl	8000464 <SystemClock_Config>
}
 800a95c:	46c0      	nop			; (mov r8, r8)
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b084      	sub	sp, #16
 800a966:	af00      	add	r7, sp, #0
 800a968:	0002      	movs	r2, r0
 800a96a:	1dfb      	adds	r3, r7, #7
 800a96c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a96e:	230f      	movs	r3, #15
 800a970:	18fb      	adds	r3, r7, r3
 800a972:	2200      	movs	r2, #0
 800a974:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800a976:	1dfb      	adds	r3, r7, #7
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	2b03      	cmp	r3, #3
 800a97c:	d017      	beq.n	800a9ae <USBD_Get_USB_Status+0x4c>
 800a97e:	dc1b      	bgt.n	800a9b8 <USBD_Get_USB_Status+0x56>
 800a980:	2b02      	cmp	r3, #2
 800a982:	d00f      	beq.n	800a9a4 <USBD_Get_USB_Status+0x42>
 800a984:	dc18      	bgt.n	800a9b8 <USBD_Get_USB_Status+0x56>
 800a986:	2b00      	cmp	r3, #0
 800a988:	d002      	beq.n	800a990 <USBD_Get_USB_Status+0x2e>
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d005      	beq.n	800a99a <USBD_Get_USB_Status+0x38>
 800a98e:	e013      	b.n	800a9b8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a990:	230f      	movs	r3, #15
 800a992:	18fb      	adds	r3, r7, r3
 800a994:	2200      	movs	r2, #0
 800a996:	701a      	strb	r2, [r3, #0]
    break;
 800a998:	e013      	b.n	800a9c2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a99a:	230f      	movs	r3, #15
 800a99c:	18fb      	adds	r3, r7, r3
 800a99e:	2203      	movs	r2, #3
 800a9a0:	701a      	strb	r2, [r3, #0]
    break;
 800a9a2:	e00e      	b.n	800a9c2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a9a4:	230f      	movs	r3, #15
 800a9a6:	18fb      	adds	r3, r7, r3
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	701a      	strb	r2, [r3, #0]
    break;
 800a9ac:	e009      	b.n	800a9c2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a9ae:	230f      	movs	r3, #15
 800a9b0:	18fb      	adds	r3, r7, r3
 800a9b2:	2203      	movs	r2, #3
 800a9b4:	701a      	strb	r2, [r3, #0]
    break;
 800a9b6:	e004      	b.n	800a9c2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800a9b8:	230f      	movs	r3, #15
 800a9ba:	18fb      	adds	r3, r7, r3
 800a9bc:	2203      	movs	r2, #3
 800a9be:	701a      	strb	r2, [r3, #0]
    break;
 800a9c0:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800a9c2:	230f      	movs	r3, #15
 800a9c4:	18fb      	adds	r3, r7, r3
 800a9c6:	781b      	ldrb	r3, [r3, #0]
}
 800a9c8:	0018      	movs	r0, r3
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	b004      	add	sp, #16
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <memset>:
 800a9d0:	0003      	movs	r3, r0
 800a9d2:	1882      	adds	r2, r0, r2
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d100      	bne.n	800a9da <memset+0xa>
 800a9d8:	4770      	bx	lr
 800a9da:	7019      	strb	r1, [r3, #0]
 800a9dc:	3301      	adds	r3, #1
 800a9de:	e7f9      	b.n	800a9d4 <memset+0x4>

0800a9e0 <__libc_init_array>:
 800a9e0:	b570      	push	{r4, r5, r6, lr}
 800a9e2:	2600      	movs	r6, #0
 800a9e4:	4c0c      	ldr	r4, [pc, #48]	; (800aa18 <__libc_init_array+0x38>)
 800a9e6:	4d0d      	ldr	r5, [pc, #52]	; (800aa1c <__libc_init_array+0x3c>)
 800a9e8:	1b64      	subs	r4, r4, r5
 800a9ea:	10a4      	asrs	r4, r4, #2
 800a9ec:	42a6      	cmp	r6, r4
 800a9ee:	d109      	bne.n	800aa04 <__libc_init_array+0x24>
 800a9f0:	2600      	movs	r6, #0
 800a9f2:	f000 f819 	bl	800aa28 <_init>
 800a9f6:	4c0a      	ldr	r4, [pc, #40]	; (800aa20 <__libc_init_array+0x40>)
 800a9f8:	4d0a      	ldr	r5, [pc, #40]	; (800aa24 <__libc_init_array+0x44>)
 800a9fa:	1b64      	subs	r4, r4, r5
 800a9fc:	10a4      	asrs	r4, r4, #2
 800a9fe:	42a6      	cmp	r6, r4
 800aa00:	d105      	bne.n	800aa0e <__libc_init_array+0x2e>
 800aa02:	bd70      	pop	{r4, r5, r6, pc}
 800aa04:	00b3      	lsls	r3, r6, #2
 800aa06:	58eb      	ldr	r3, [r5, r3]
 800aa08:	4798      	blx	r3
 800aa0a:	3601      	adds	r6, #1
 800aa0c:	e7ee      	b.n	800a9ec <__libc_init_array+0xc>
 800aa0e:	00b3      	lsls	r3, r6, #2
 800aa10:	58eb      	ldr	r3, [r5, r3]
 800aa12:	4798      	blx	r3
 800aa14:	3601      	adds	r6, #1
 800aa16:	e7f2      	b.n	800a9fe <__libc_init_array+0x1e>
 800aa18:	0800ac8c 	.word	0x0800ac8c
 800aa1c:	0800ac8c 	.word	0x0800ac8c
 800aa20:	0800ac90 	.word	0x0800ac90
 800aa24:	0800ac8c 	.word	0x0800ac8c

0800aa28 <_init>:
 800aa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2a:	46c0      	nop			; (mov r8, r8)
 800aa2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa2e:	bc08      	pop	{r3}
 800aa30:	469e      	mov	lr, r3
 800aa32:	4770      	bx	lr

0800aa34 <_fini>:
 800aa34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa36:	46c0      	nop			; (mov r8, r8)
 800aa38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa3a:	bc08      	pop	{r3}
 800aa3c:	469e      	mov	lr, r3
 800aa3e:	4770      	bx	lr
